[
  "INCOSE -TP -2010-006-04 | VERS/REV: 4 | 1 April 2022  \n \nGuide to Writing Requirements \n1 Jul 2023",
  "Guide to Writing Requirements  i \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nC OPYRIGHT INFORMATION  \nThis INCOSE Technical Product was prepared by the International Council on Systems \nEngineering (INCOSE).  It is approved by the INCOSE Technical Operations \nLeadership for release as an INCOSE Technical Product. \nCopyright (c) 2023 by INCOSE, subject to the following restrictions: \nAuthor Use.  Authors have full rights to use their contributions in a totally unfettered \nway with credit to the INCOSE Technical source.  Abstraction is permitted with \ncredit to the source.  \nINCOSE Use.  Permission to reproduce and use this document or parts thereof by \nmembers of INCOSE and to prepare derivative works from this document for \nINCOSE use is granted, with attribution to INCOSE and the original author(s) where \npractical, provided this copyright notice is included with all reproductions and \nderivative works.",
  "INCOSE use is granted, with attribution to INCOSE and the original author(s) where \npractical, provided this copyright notice is included with all reproductions and \nderivative works. \nExternal Use.  This document may not be shared or distributed to any non-INCOSE \nthird party.  Requests for permission to reproduce this document in whole or part, or \nto prepare derivative works of this document for external and commercial use \nshould be addressed to the INCOSE Central Office, 7670 Opportunity Rd., Suite \n220, San Diego, CA 92111-2222. \nElectronic Version Use.  Any electronic version of this document is to be used for \npersonal, professional use only and is not to be placed on a non-INCOSE \nsponsored server for general use.  \nAny additional use of these materials must have written approval from INCOSE Central. \nAdditional Copies/General Information \nCopies of the Guide to Writing Requirements, as well as any other INCOSE document",
  "Additional Copies/General Information \nCopies of the Guide to Writing Requirements, as well as any other INCOSE document \ncan be obtained from the INCOSE Store.  General information on INCOSE, the \nRequirements Working Group, any other INCOSE working group, or membership may \nalso be obtained from the INCOSE Central Office at: \nInternational Council on Systems \nEngineering \nTelephone: +1 858-541-1725 \n7670 Opportunity Road, Suite 220 Toll Free Phone (US): 800-366-1164  \nSan Diego, California 92111-2222 | \nUSA  \nFax: +1 858-541-1728  \nE-mail: info@incose.org  Web Site: http://www.incose.org",
  "Guide to Writing Requirements  ii \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nG UIDE TO W RITING R EQUIREMENTS  \nDocument No.: INCOSE-TP -2010-006-04 \nVersion/Revision: Rev 4 \nDate: 1 July 2023 \nPrepared by: \nRequirements Working Group \nInternational Council on Systems Engineering  \n7670 Opportunity Road, Suite 220,  \nSan Diego, California 92111-2222 USA \nPreface \nThis Guide has been prepared and produced by the Requirements Working Group \n(RWG) of the International Council on Systems Engineering (INCOSE).  The original \ndocument coalesced inputs from numerous INCOSE contributors, edited by Jeremy \nDick, published in draft form in December 2009 for internal INCOSE review, and later \npublished as an INCOSE Technical Product in July 2015.  Subsequently, the document \nhas been revised extensively following reviews by the RWG members .  The latest \nrevision represents a further evolution of the concepts communicated within the Guide",
  "has been revised extensively following reviews by the RWG members .  The latest \nrevision represents a further evolution of the concepts communicated within the Guide \nbased on comments and inputs received from members of the RWG and larger body of \nINCOSE members . This latest revision also brings the Guide in harmony with the latest \nversions of ISO/IEC/IEEE 15288, the INCOSE Systems Engineering Handbook version \n5, and the other major RWG products: the Needs and Requirements Manual (NRM), the \nGuide to Needs and Requirements (GtNR), and the Guide to Verification and Validation \n(GtVV). \nAuthors \nThe principal authors of this Guide are: \nMichael Ryan, Capability Associates Pty Ltd, Australia \nLou Wheatcraft, Wheatland Consulting, LLC, USA \nMajor Contributors \nThose who made a significant contribution to the generation of the Guide are: \nKathy Baksa, Pratt & Whitney, USA \nRonald S. Carson, Retired, USA  \nJeremy Dick, Retired, UK \nJosé Fuentes, The Reuse Company, Spain",
  "Kathy Baksa, Pratt & Whitney, USA \nRonald S. Carson, Retired, USA  \nJeremy Dick, Retired, UK \nJosé Fuentes, The Reuse Company, Spain \nJosé Pereira, The Reuse Company, Spain \nIIyes Yousfi, The Reuse Company, Spain \nRick Zinni, L3Harris Corporation, USA",
  "Guide to Writing Requirements  iii \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nReviewers \nThe following reviewers submitted comments during the development of this version of \nthe Guide: \nAngel Agrawal, Northrop Grumman, USA  \nW ale Akinwale, Flex Ltd,  \nRonald S. Carson, Seattle Pacific University \nKeith Collyer, Retired \nQuinn Fatherley, Lawrence Livermore National Laboratory, USA \nBruno Favoreto, DE  \nTami Katz, Ball Aerospace, USA \nThomas Konerth, Bechtel NSE, USA \nCarlo Leardi, Tetra Pak, IT \nSeth Sherman , L3Harris, USA \nErnest Tavares, KBR, USA  \nRaymond Wolfgang, Sandia National Labs, USA \n \nR EVISION H ISTORY  \nRevision Revision Date Change Description & Rationale \n0 12 Jul 2009 Original \n0.1 1 Jan 2011 Revision to use standard INCOSE formatting \n0.2 30 Jan 2011 Revision to export from DOORS into standard INCOSE formatting \n0.3 30 Jan 2012 Revision to accommodate comments from review by INCOSE Technical Operations",
  "0.2 30 Jan 2011 Revision to export from DOORS into standard INCOSE formatting \n0.3 30 Jan 2012 Revision to accommodate comments from review by INCOSE Technical Operations \n0.4 2 March 2012 Revision based on comments from INCOSE RWG leadership \n1 17 April 2012 Revision based on comments from INCOSE RWG general membership \n1.1 26 Jan 2013 Update at IW2013 by RWG to remove typographical errors \n1.2 6 Apr 2013 Update to revise attributes and to amend rules after training packages developed \n1.3 10 Feb 2015 Update at IW2015 by RWG at definitions, update characteristics and attributes. \n1.4 10 Mar 2015 Updates resulting from the first round of reviews by attendees at INCOSE IW 2015 \n1.5 22 Mar 2015 Updates resulting from review by RWG members \n2 1 Jul 2015 Release by INCOSE Tech Ops \n2.1 30 Jun 2017 Updates resulting from review by RWG members at INCOSE IW2016 & IW2017 \n2.2 10 Feb 2019 Updates resulting from review by RWG members at INCOSE IW2019",
  "2.1 30 Jun 2017 Updates resulting from review by RWG members at INCOSE IW2016 & IW2017 \n2.2 10 Feb 2019 Updates resulting from review by RWG members at INCOSE IW2019 \n2.3 20 Mar 2019 Revision based on comments from INCOSE RWG general membership \n3 19 Jul 2019 Release by INCOSE Tech Ops \n3.1 1 May 2022 Alignment with other RWG products, editorial, and traceability updates \n4.0 1 Jul 2023 Revision based on comments from INCOSE RWG general membership",
  "Guide to Writing Requirements  iv \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nTABLE OF C ONTENTS   \nSECTION 1: INTRODUCTION  .............................................................................................................. 7 \n1.1 PURPOSE  ................................................................................................................................. 7 \n1.2 SCOPE  ..................................................................................................................................... 8 \n1.3 AUDIENCE  ................................................................................................................................ 8 \n1.4 APPROACH  ............................................................................................................................... 9 \n1.5 W HY USE THE TEXTUAL FORM OF C OMMUNICATION ? ............................................................... 10",
  "1.5 W HY USE THE TEXTUAL FORM OF C OMMUNICATION ? ............................................................... 10 \n1.5.1 Advantages Of Text-Based Needs And Requirements............................................... 10 \n1.5.2 Summary  ..................................................................................................................... 13 \n1.6 D EFINITIONS ........................................................................................................................... 14 \n1.6.1 Entities ......................................................................................................................... 15 \n1.6.2 Concepts ..................................................................................................................... 15 \n1.6.3 Needs .......................................................................................................................... 15",
  "1.6.3 Needs .......................................................................................................................... 15 \n1.6.4 Requirements .............................................................................................................. 16 \n1.6.5 Attributes ..................................................................................................................... 16 \n1.6.6 Needs and Requirement Expressions......................................................................... 17 \n1.6.7 Patterns ....................................................................................................................... 17 \n1.6.8 Sets of Needs and Sets of Requirements ................................................................... 17 \n1.7 N EEDS , R EQUIREMENTS , AND THE ENTITY TO W HICH THEY APPLY  ........................................... 18",
  "1.7 N EEDS , R EQUIREMENTS , AND THE ENTITY TO W HICH THEY APPLY  ........................................... 18 \n1.8 N EEDS VS R EQUIREMENTS  ...................................................................................................... 19 \n1.8.1 Stakeholder Expectations, Needs, and Requirements ............................................... 19 \n1.8.2 System Requirements. ................................................................................................ 20 \n1.8.3 Common Issues........................................................................................................... 21 \n1.8.4 Terminology Used In This Guide ................................................................................. 23 \n1.9 Q UALITY OF N EEDS AND R EQUIREMENTS  ................................................................................. 27 \n1.9.1 Verification Of The Needs And Requirements ............................................................ 27",
  "1.9.1 Verification Of The Needs And Requirements ............................................................ 27 \n1.9.2 Validation Of The Needs And Requirements .............................................................. 28 \n1.10 N EEDS AND R EQUIREMENTS IN THE C ONTEXT OF VERIFICATION AND VALIDATION  ...................... 29 \n1.11 C ONDITIONAL C LAUSES AND U BIQUITOUS R EQUIREMENTS  ....................................................... 29 \n1.12 O RGANIZING AND M ANAGING N EEDS AND R EQUIREMENTS  ....................................................... 30 \n1.12.1 The Problems of Complexity ....................................................................................... 30 \n1.12.2 Managing Complexity .................................................................................................. 31 \n1.13 G UIDE O RGANIZATION  ............................................................................................................ 31",
  "1.13 G UIDE O RGANIZATION  ............................................................................................................ 31 \nSECTION 2: CHARACTERISTICS OF INDIVIDUAL NEED AND REQUIREMENT STATEMENTS  33 \n2.1 G ROUPING C HARACTERISTICS  ................................................................................................ 33 \n2.1.1 SMART  ........................................................................................................................ 33 \n2.1.2 C 3F ............................................................................................................................... 34 \n2.1.3 VAN  ............................................................................................................................. 34 \n2.1.4 VANS  ........................................................................................................................... 34",
  "2.1.4 VANS  ........................................................................................................................... 34 \n2.2 C1  - N ECESSARY  .................................................................................................................... 35 \n2.3 C2  - APPROPRIATE  ................................................................................................................. 38 \n2.4 C 3 - U NAMBIGUOUS  ................................................................................................................ 41 \n2.5 C4  - C OMPLETE  ...................................................................................................................... 43 \n2.6 C5  - SINGULAR  ....................................................................................................................... 44 \n2.7 C6  - FEASIBLE  ........................................................................................................................ 46",
  "2.7 C6  - FEASIBLE  ........................................................................................................................ 46 \n2.8 C7  – VERIFIABLE/VALIDATABLE  ............................................................................................... 47 \n2.9 C8  - C ORRECT  ....................................................................................................................... 49 \n2.10 C9  - C ONFORMING  ................................................................................................................. 51 \nSECTION 3: CHARACTERISTICS OF SETS OF NEEDS AND REQUIREMENTS  .......................... 53 \n3.1 C10  - C OMPLETE  .................................................................................................................... 53 \n3.2 C11  - C ONSISTENT  ................................................................................................................. 56",
  "3.2 C11  - C ONSISTENT  ................................................................................................................. 56 \n3.3 C12  - FEASIBLE  ...................................................................................................................... 58 \n3.4 C13  - C OMPREHENSIBLE  ........................................................................................................ 60 \n3.5 C14  - ABLE TO BE VALIDATED  ................................................................................................. 61",
  "Guide to Writing Requirements  v \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n3.6 C15  - C ORRECT  ..................................................................................................................... 62 \nSECTION 4:RULES FOR INDIVIDUAL NEED AND REQUIREMENT STATEMENTS AND FOR SETS \nOF NEEDS AND REQUIREMENTS .................................................................................................... 64 \n4.1 ACCURACY  ............................................................................................................................. 64 \n4.1.1 R1 – Structured Statements ........................................................................................ 64 \n4.1.2 R2 – Active Voice ........................................................................................................ 65 \n4.1.3 R3 – Appropriate Subject-Verb ................................................................................... 66",
  "4.1.3 R3 – Appropriate Subject-Verb ................................................................................... 66 \n4.1.4 R4 – Defined Terms .................................................................................................... 69 \n4.1.5 R5 – Definite Articles ................................................................................................... 70 \n4.1.6 R6 – Co mmon  Units of Measure ................................................................................. 71 \n4.1.7 R7 – Vague Terms ...................................................................................................... 73 \n4.1.8 R8 – Escape Clauses .................................................................................................. 74 \n4.1.9 R9 – Open -Ended Clauses ......................................................................................... 75",
  "4.1.9 R9 – Open -Ended Clauses ......................................................................................... 75 \n4.2 C ONCISION  ............................................................................................................................. 76 \n4.2.1 R10 – Superfluous Infinitives....................................................................................... 76 \n4.2.2 R11 – Separate Clauses ............................................................................................. 77 \n4.3 N ON -AMBIGUITY  ..................................................................................................................... 78 \n4.3.1 R12 – Correct Grammar .............................................................................................. 78 \n4.3.2 R13 – Correct Spelling ................................................................................................ 80",
  "4.3.2 R13 – Correct Spelling ................................................................................................ 80 \n4.3.3 R14 – Correct Punctuation .......................................................................................... 81 \n4.3.4 R15 – Logical Expressions .......................................................................................... 82 \n4.3.5 R16 – Use of “Not”....................................................................................................... 83 \n4.3.6 R17 – Use of Oblique Symbol ..................................................................................... 84 \n4.4 SINGULARITY  .......................................................................................................................... 85 \n4.4.1 R 18 – Single Thought Sentence ................................................................................. 85",
  "4.4.1 R 18 – Single Thought Sentence ................................................................................. 85 \n4.4.2 R19 – Combinators ..................................................................................................... 88 \n4.4.3 R20 – Purpose Phrases .............................................................................................. 89 \n4.4.4 R21 – Parentheses ...................................................................................................... 90 \n4.4.5 R22 – Enumeration ..................................................................................................... 91 \n4.4.6 R23 – Supporting Diagram, Model, or ICD ................................................................. 92 \n4.5 C OMPLETENESS  ..................................................................................................................... 93",
  "4.5 C OMPLETENESS  ..................................................................................................................... 93 \n4.5.1 R24 – Pronouns........................................................................................................... 93 \n4.5.2 R25 – Headings ........................................................................................................... 94 \n4.6 R EALISM  ................................................................................................................................ 95 \n4.6.1 R26 – Absolutes .......................................................................................................... 95 \n4.7 C ONDITIONS  ........................................................................................................................... 96 \n4.7.1 R27 – Explicit Conditions ............................................................................................ 96",
  "4.7.1 R27 – Explicit Conditions ............................................................................................ 96 \n4.7.2 R28 – Multiple Conditions ........................................................................................... 97 \n4.8 U NIQUENESS  .......................................................................................................................... 98 \n4.8.1 R29 – Classification ..................................................................................................... 98 \n4.8.2 R30 – Unique Expression............................................................................................ 99 \n4.9 ABSTRACTION  ...................................................................................................................... 100 \n4.9.1 R31 – Solution Free .................................................................................................. 100",
  "4.9.1 R31 – Solution Free .................................................................................................. 100 \n4.10 Q UANTIFIERS ........................................................................................................................ 103 \n4.10.1 R32 – Universal Qualification .................................................................................... 103 \n4.11 TOLERANCE  ......................................................................................................................... 103 \n4.11.1 R33 – Range of Values ............................................................................................. 103 \n4.12 Q UANTI FICATION ................................................................................................................... 106 \n4.12.1 R34 – Measurable Performance ............................................................................... 106",
  "4.12.1 R34 – Measurable Performance ............................................................................... 106 \n4.12.2 R35 – Temporal Dependencies ................................................................................ 107 \n4.13 U NIFORMITY OF LANGUAGE  ................................................................................................... 107 \n4.13.1 R36 – Consistent Terms and Units ........................................................................... 107 \n4.13.2 R37 – Acronyms ........................................................................................................ 109 \n4.13.3 R38 – Abbreviations .................................................................................................. 109 \n4.13.4 R39 – Style Guide ..................................................................................................... 110",
  "4.13.4 R39 – Style Guide ..................................................................................................... 110 \n4.13.5 R40 – Decimal Format .............................................................................................. 111",
  "Guide to Writing Requirements  vi \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n4.14 M ODULARITY  ........................................................................................................................ 112 \n4.14.1 R41 – Related Needs and Requirements ................................................................. 112 \n4.14.2 R42 – Structured Sets ............................................................................................... 113 \nAPPENDIX A:  REFERENCES  .......................................................................................................... 115 \nAPPENDIX B:  ACRONYMS AND ABBREVIATIONS  ...................................................................... 117 \nAPPENDIX C:  PATTERNS  ............................................................................................................... 118",
  "APPENDIX C:  PATTERNS  ............................................................................................................... 118 \nC.1 INTRODUCTION TO PATTERNS  ............................................................................................... 118 \nC.2 BENEFITS OF U SING PATTERNS  ............................................................................................. 119 \nC.3 BASIC STRUCTURE OF A NEED OR REQUIREMENT PATTERN  ..................................................... 120 \nC.4 BUILDING BLOCKS FOR R EQUIREMENT PATTERNS  .................................................................. 122 \nC.5 O THER REFERENCES  ............................................................................................................ 124 \nAPPENDIX D:  RULE APPLICABILITY MATRIX  .............................................................................. 125",
  "APPENDIX D:  RULE APPLICABILITY MATRIX  .............................................................................. 125 \nD.1 THE IMPORTANCE OF TAILORING THE R ULES .......................................................................... 125 \nD.2 D IMENSIONS OF THE R ULE APPLICABILITY M ATRIX  ................................................................. 125 \nAPPENDIX E:  CROSS REFERENCE MATRICES  ........................................................................... 133 \nAPPENDIX F:  COMMENT FORM  ..................................................................................................... 137 \n \n \n \n \n \nLIST OF FIGURES    \nFIGURE 1:  R ELATIONSHIPS A MONG RWG  PRODUCTS  ...................................................................................... 7 \nFIGURE 2:  N EEDS AND R EQUIREMENTS IN C ONTEXT  ......................................................................................... 9",
  "FIGURE 2:  N EEDS AND R EQUIREMENTS IN C ONTEXT  ......................................................................................... 9 \nFIGURE 3:  ENTITY-RELATIONSHIP D IAGRAM FOR C USTOMERS , C ONCEPTS , ENTITIES, N EEDS , AND \nR EQUIREMENTS TERMS  ......................................................................................................................... 14 \nFIGURE 4: ENTITY-R ELATIONSHIP D IAGRAM FOR N EEDS AND R EQUIREMENTS TERMS  ...................................... 16 \nFIGURE 5: INPUTS TO THE LIFECYCLE C ONCEPT AND N EEDS D EFINITION A CTIVITIES ........................................ 23 \nFIGURE 6: N EEDS VS R EQUIREMENTS - D IFFERENT PERSPECTIVES  .................................................................. 24 \nFIGURE 7: N EEDS AND R EQUIREMENTS IN THE C ONTEXT OF VERIFICATION AND VALIDATION  ............................ 29 \nFIGURE 8: C OMPLETE AND C ORRECT SETS OF N EEDS AND R EQUIREMENTS ..................................................... 35",
  "FIGURE 8: C OMPLETE AND C ORRECT SETS OF N EEDS AND R EQUIREMENTS ..................................................... 35 \nFIGURE 9: LEVELS OF LIFECYCLE C ONCEPTS , N EEDS , AND R EQUIREMENTS  .................................................... 39 \nFIGURE 10: LEVELS OF A SYSTEM – H IERARCHICAL VIEW  ............................................................................... 39 \nFIGURE 11: N EEDS AND R EQUIREMENTS U NDERSTOOD IN THE SAME W AY  ...................................................... 41 \nFIGURE 12: N EEDS OR R EQUIREMENTS FEASIBILITY B UCKET  .......................................................................... 46 \nFIGURE 14: N EEDS VALIDATION  ..................................................................................................................... 49 \nFIGURE 15: R EQUIREMENTS VALIDATION  ........................................................................................................ 50",
  "FIGURE 15: R EQUIREMENTS VALIDATION  ........................................................................................................ 50 \nFIGURE 16: N EEDS VERIFICATION  ................................................................................................................... 52 \nFIGURE 17: R EQUIREMENTS VERIFICATION  ..................................................................................................... 52 \nFIGURE 18: VERIFICATION AND VALIDATION A CROSS THE LIFECYCLE  .............................................................. 61 \nFIGURE C -1: R EQUIREMENT PATTERN BUILDING BLOCKS . .............................................................................. 122",
  "Guide to Writing Requirements  7 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nSection 1: Introduction \n \n1.1 Purpose \nThe purpose of this Guide is to describe how to express need statements (needs) and \nrequirement statements (requirements) clearly and precisely in textual form to support further \nanalysis and implementation, independent of any systems engineering (SE) tool that may be \nused to capture and manage those needs and requirements throughout the system lifecycle.  \nClear, concise needs and requirements will be less taxing to interpret as well as simpler to \nverify, validate, and to identify defects.  This, in turn, helps avoid costly rework, schedule slips, \nand needs and requirements not being realized. \nThe aim is to draw together advice from existing standards such as ISO/IEC/IEEE 15288 and \nISO/IEC/IEEE 29148 along with best practices from the authors, contributors, and reviewers into",
  "The aim is to draw together advice from existing standards such as ISO/IEC/IEEE 15288 and \nISO/IEC/IEEE 29148 along with best practices from the authors, contributors, and reviewers into \na single, comprehensive set of characteristics and rules for well-formed need and requirement \nstatements using a structured, natural language.   \nAs shown in Figure 1, this Guide complements and is aligned with the INCOSE Needs and \nRequirements Manual (NRM) in support of the INCOSE Systems Engineering Handbook \n(INCOSE SE HB).  \n  \n \nFigure 1:  Relationships Among  RWG Products  \nTo better understand the context of the material presented in this Guide, the reader is \nencouraged to review the underlining concepts and activities within the NRM as well as the \nrelated guides: Guide to Needs and Requirements (GtNR) and the Guide to Verification and \nValidation (GtVV).  The quality of need and requirement expressions, and the quality of their",
  "related guides: Guide to Needs and Requirements (GtNR) and the Guide to Verification and \nValidation (GtVV).  The quality of need and requirement expressions, and the quality of their \nsubsequent verification and validation, are highly dependent on the understanding of the \nunderlying concepts and successful implementation of activities described in the Needs and \nRequirements Definition and Management (NRDM) the NRM, GtNR and GtVV.   \nGuide to \nWriting \nRequirements\nGuide to \nNeeds and \nRequirements\nGuide to \nVerification and \nValidation\nINCOSE RWG Whitepaper: \nIntegrated Data as a Foundation of \nSystems Engineering\nNeeds and Requirements Manual\nINCOSE Systems \nEngineering Handbook\n SEBok\nOther Domain \nSpecific Guides\nOriginal figure created by L. Wheatcraft.  Usage granted per the INCOSE Copyright Restrictions. All other rights reserved.",
  "Guide to Writing Requirements  8 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n1.2 Scope  \nThis Guide: \n• Provides practical, cross domain guidance, with examples, which will enable project \nteams to define well-formed need and requirement statements, need and requirement \nexpressions, and sets of needs and requirements.  \n• Provides a definitive source that organizations can reference when developing and \ndocumenting a set of rules, guidelines, processes, methods, and templates that are \ntailored to their specific organizational needs, unique culture, domain, and product line. \n• Defines a set of characteristics that should be possessed by well-formed needs, \nrequirements, sets of needs, and sets of requirements to give design teams the best \nbasis to create an architecture and resulting design that will satisfy, as fully as possible, \nthe baselined sets of needs and associated requirements.",
  "basis to create an architecture and resulting design that will satisfy, as fully as possible, \nthe baselined sets of needs and associated requirements. \n• Provides a set of rules for writing needs and requirements that will result in the relevant \nneed and requirement statements having the desired characteristics. \n• Addresses the concept of a boilerplate, template, or pattern for need and requirement \nstatements. \nThis G uide is not about the discovery, capture, or elicitation of requirements; nor is it about \nneeds and requirements analysis, needs and requirements management, and the development \nof models or design outputs. Those key activities are discussed in the NRM and the GtNR .   \nFurthermore, although this G uide focuses on textual statements, it does not presume to \npreclude the use of other means of addressing needs and requirements and their attributes, \nsuch as the use of visual models. Approaches such as those contained in SysML diagrams or",
  "preclude the use of other means of addressing needs and requirements and their attributes, \nsuch as the use of visual models. Approaches such as those contained in SysML diagrams or \nMBSE tools can be powerful; however, the details of graphical requirements (in or outside a \ngiven tool) are outside the scope of this G uide. \nThe characteristics and rules for needs and requirements discussed in this Guide apply to \nneeds and requirements for any entity no matter the level within an organization or system \narchitecture.  As such, they also apply to the business requirements and stakeholder needs and \nrequirements resulting from the ISO/IEC/IEEE 15288 and INCOSE SE HB  technical processes: \nBusiness and Mission Analysis, Stakeholder Needs and Requirements Definition, and System \nRequirements Definition.   \n1.3 Audience \nThis G uide is intended for those whose role is to solicit, write, review, implement, and manage",
  "Requirements Definition.   \n1.3 Audience \nThis G uide is intended for those whose role is to solicit, write, review, implement, and manage  \ntextual needs and requirements throughout the system development lifecycle process activities, \nas well as those who  verify that the realized System of Interest (SOI) meets the requirements \nand those who validate that the realized SOI meets the needs in the intended operational \nenvironment when used by the intended users.  \nMajor user groups who will benefit from the use of this Guide include systems engineers, \nrequirements engineers, business analysts, product developers, system architects, \nconfiguration managers, designers, testers, verifiers, validators, manufacturers, coders, \noperators, users, disposers, course developers, trainers, tool vendors, project managers, \nacquisition personnel, lawyers, regulators, and standards organizations. \nThis G uide is addressed to practitioners of all levels of experience.  Someone new to systems",
  "acquisition personnel, lawyers, regulators, and standards organizations. \nThis G uide is addressed to practitioners of all levels of experience.  Someone new to systems \nengineering should find specific guidance through the characteristics and rules and associated",
  "Guide to Writing Requirements  9 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nexamples provided herein to be useful, and those more experienced should be able to find new \ninsights through the characteristics and rules discussed in this Guide, often absent from other \ntexts, guides, or standards.  \nThis Guide may also assist tool vendors who are applying Artificial Intelligence (AI) and Natural \nLanguage Processing (NLP) to the evaluation of needs and requirement statements.  Given the \nnumber of characteristics and rules, it may be overwhelming for systems engineers to apply \nthem all simultaneously—that is not the intent of this Guide.  The goal of these NLP/AI based \ntools is to be invaluable as a “digital assistant”, helpful in the crafting of higher quality, well-\nformed needs and requirements—which is the ultimate goal of this Guide. \n1.4 Approach  \nThis G uide presents the underlying characteristics of individual need and requirement",
  "formed needs and requirements—which is the ultimate goal of this Guide. \n1.4 Approach  \nThis G uide presents the underlying characteristics of individual need and requirement \nstatements as well as the characteristics of sets of needs and requirements. Practical rules and \npatterns are then presented that can be followed when writing need and requirement \nstatements. An understanding of the underlying characteristics and reasons for those \ncharacteristics then informs the adaptation of practical rules and patterns which, when followed, \nwill result in quality sets of needs and requirements. \nEffective systems engineering transforms the design inputs into design outputs. Figure 2 \nillustrates the logic flow, leading to the definition of well-formed needs and requirements.  In this \nfigure, the needs are contained within an Integrated Set of Needs and the requirements are \ncontained within a set of Design Input Requirements.  Together, the Integrated Set of Needs",
  "figure, the needs are contained within an Integrated Set of Needs and the requirements are \ncontained within a set of Design Input Requirements.  Together, the Integrated Set of Needs \nand resulting set of Design Input Requirements are considered inputs into the ISO/IEC/IEEE \n15288 Architecture Definition and Design Definition processes which transform the Design Input \nRequirements into sets of design output specifications (outputs of the design activity) to which \nthe System Element is realized. \n \nFigure 2:  Needs and Requirements in Context \nDesign Outputs\nDesign Inputs\nArchitecture &\nDesign\nTransformation\nTransformation\nDesign Input \nRequirements\nDesign-to\n“What”\nSystem \nElement\nTransformation\nFocus on design inputs, \npreliminary logical & physical \narchitectures\nFocus on design outputs, maturing \nthe logical & physical \narchitectures, design, design \noutput specifications, realized \nsystem element\nBuild-to/Code-to \n“How”\nTransformation\nDesign Output \nSpecifications",
  "the logical & physical \narchitectures, design, design \noutput specifications, realized \nsystem element\nBuild-to/Code-to \n“How”\nTransformation\nDesign Output \nSpecifications\nDesign Output Specifications \ncan include requirements, \nspecifications, algorithms, \nformulations, drawings, & \nother design output artifacts\nIntegrated Set of \nNeeds\nOriginal figure created by M. Ryan and  L. Wheatcraft. Usage granted per the INCOSE Copyright Restrictions. All other rights reserved.",
  "Guide to Writing Requirements  10 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n1.5 Why use the Textual Form of C ommunication ? \nFor many ideas and concepts that need to be communicated, well-formed, textual need and \nrequirement statements are an effective form of communication that covers the wide variety of \nconcepts that must be communicated throughout a system lifecycle. Text is the enduring \nmethod to capture the conversation that is the negotiation between stakeholders in an \nengineering project. \nHowever, a potential flaw in the use of textual needs and requirement statements is the inherent \nambiguity in the use of an unstructured, natural language.  English and other natural languages \ninclude many synonyms and words with slightly different shades of meaning dependent upon \ncontext and culture.  Because of this, it can often be difficult to be clear and precise, which is a",
  "include many synonyms and words with slightly different shades of meaning dependent upon \ncontext and culture.  Because of this, it can often be difficult to be clear and precise, which is a \nmajor concern when the statements are the basis of communication, particularly in a contractual \ncontext. \nTo help avoid the ambiguity of an unstructured natural language, this Guide imposes a rule-\nbased structure—a “structured, natural language” to develop “well-formed” need and \nrequirement statements, which have the characteristics, employ the templates, and follow the \nrules discussed in this Guide.   \nOf course, text is not the only medium by which needs and requirements can be expressed.  \nAlternative methods used to discover and express needs and requirements include: \n• operational scenarios, use cases, and user stories (as used as part of Agile development \nmethodologies), or epics, features and stories in a Scaled Agile Framework (SAFe ® ));",
  "• operational scenarios, use cases, and user stories (as used as part of Agile development \nmethodologies), or epics, features and stories in a Scaled Agile Framework (SAFe ® )); \n• prototypes, such as used in production-driven and rapid application development \nmethodologies;  \n• language-based modeling approaches and tools; and \n• models and diagrams as part of a modeling approach with well-defined semantics, such \nas UML for software and Systems Modeling Language (SysML ) for generic systems.  \nRefer to the NRM for a detailed discussion concerning the complementary use of these \nmethods to discover, analyze, and express needs and requirements.   However, just as there \nare issues with any form of technical communication, these other approaches can also be \nimperfect as they have their own presentational, understandability, traceability, and \nmanagement challenges. No single tool will, by itself, fix ill-formed needs or requirements.",
  "imperfect as they have their own presentational, understandability, traceability, and \nmanagement challenges. No single tool will, by itself, fix ill-formed needs or requirements.  \nThe key is that the textual form of needs and requirements in conjunction with operational \nscenarios, use cases, diagrams, and other types of models can support the analysis and \ndevelopment of an integrated data and information model of the SOI.  This underlying data and \ninformation model captures not only the needs and requirements but also their relationships to \neach other and to other SE artifacts developed across the SOI lifecycle.  This enables all \nstakeholders to view the data and information in whichever form is best for what they are trying \nto observe, analyze, communicate, or achieve.   \n1.5.1 A DVANTAGES O F TEXT -B ASED N EEDS A ND R EQUIREMENTS  \nFor many ideas and concepts that need to be communicated, well-formed, text-based needs",
  "1.5.1 A DVANTAGES O F TEXT -B ASED N EEDS A ND R EQUIREMENTS  \nFor many ideas and concepts that need to be communicated, well-formed, text-based needs \nand requirements expressed in a structured, natural language have been proven to be the most \neffective approach (particularly in formal contracting) with a number of advantages.",
  "Guide to Writing Requirements  11 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n1.5.1.1 C OMMUNICATION  \nDespite the increased emphasis on the use of language-based models in systems engineering, \nthere remains a sizable audience who cannot interpret, who do not understand, or who are not \nwilling to work with, diagrammatic or other non-textual representations of need or requirement \nstatements, especially when the formal technical aspects of such representations are not \nintuitively obvious to the reader.   \nIn particular, some  managers, customers, regulators, and users of the system or other non-\ntechnical stakeholders, may not have been trained in language-based models or find the \nterminology used in some diagrams and models confusing and non-intuitive. Even engineers \nwho create visual models (SysML or other) need to be trained on the tool and technique, which \nmay not be a trivial expense.",
  "who create visual models (SysML or other) need to be trained on the tool and technique, which \nmay not be a trivial expense. \nForcing stakeholders to learn a specific detailed technical language to describe their needs and \nrequirements may well have them lose interest in the critical definition activities (for additional \ninsight, see NRM, Section 2.10).  Consequently, diagrammatic or model representation must be \nsupported by well-formed, textual statements and descriptions for the representations to be \nunderstood unambiguously by all stakeholders.  \nThe combination of well-formed need and requirement statements, with visual models can be \nextremely powerful during analysis and in communicating abstract or hard-to-describe concepts \nand features. The use of both is encouraged; however, the use of textual statements at some \npoint in the design input definition activities is mandatory. \n1.5.1.2 POWER OF EXPRESSION",
  "and features. The use of both is encouraged; however, the use of textual statements at some \npoint in the design input definition activities is mandatory. \n1.5.1.2 POWER OF EXPRESSION  \nThere is a wide variety of types of needs and requirements that must be expressed.  Use cases, \nuser stories, scenarios, diagrams, and models tend to focus on the functional architecture and \nbehaviors expressing functional, performance, and interactions. However, these forms of \nexpression are not presently well suited to expressing non-functional needs and requirements \nthat deal with the physical system elements associated with quality (-ilities), regulations, \nstandards, and physical characteristics.  Textual forms using a structured, natural language \ncarry the universal power of expression for all types of needs and requirements outside of \nphysical \"build-to-print\" drawings and other design representations included in the set of design \noutput specifications.",
  "physical \"build-to-print\" drawings and other design representations included in the set of design \noutput specifications. \nTwo other points illustrate the enduring importance of textual-based need and requirement \nstatements: \n• Problem statements, operational scenarios, use cases, user stories should be written from \nthe perspective of the user’s (actor’s) interaction with other actors in the context of the \nsystem under development. In contrast, many models describe the system from the \nperspective of what the system under development must do in order for the users to \ninteract with the SOI in the way they expect.  While those forms of expression are \nexcellent conceptual tools for stakeholder expectation elicitation and management, helping \nto understand the features and associated functionality and performance expected by the \nstakeholders, they do not always effectively replace well-formed, text-based needs and",
  "to understand the features and associated functionality and performance expected by the \nstakeholders, they do not always effectively replace well-formed, text-based needs and \nrequirements for the various ideas and concepts that must be communicated, especially \nwhat is sometimes referred to as “non-functional” needs and requirements.  \n• Use cases, diagrams, models, and other alternate forms may not be able to communicate \nstakeholder needs and stakeholder requirements as effectively as can be done using a \ntext-based, structured language that can be clearly understood by all stakeholders over",
  "Guide to Writing Requirements  12 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \ntime. While these alternate forms are useful tools, they are not sufficient by themselves, \nwithout also defining a set of textual needs and requirement statements. \n1.5.1.3 M ANAGING SETS OF N EEDS AND R EQUIREMENTS  \nTextual needs and requirements lend themselves to the presentation of large numbers of \ndifferent types of needs and requirements in an easily digestible form.  In contrast, SysML \nrequirement diagrams can present individual requirement expressions but are not well suited to \nrepresenting multiple or large sets of requirements associated with all the parts of the system \narchitecture.     \nIn addition, the requirement statements defined within modeling tools, often do not have the \ncharacteristics of well-formed requirements discussed in this Guide.  This limitation of the \nSysML to enable the visualization of the sets of requirements contained in the system model",
  "characteristics of well-formed requirements discussed in this Guide.  This limitation of the \nSysML to enable the visualization of the sets of requirements contained in the system model \nrequires alternate, textual visualizations of requirements expressions as well as sets of \nrequirements.  Note: currently SysML does not include an entity type “need”, nor corresponding \nneeds diagrams.   \nNote: Tool vendors are now providing tools that allow the linking of requirements contained \nwithin language-based models with the same requirements defined and managed within a \nRequirement Management Tool (RMT).  This enables the requirements to remain consistent \nbetween tools and allows practitioners to view needs and requirements in whichever form is \nneeded for what they are doing. This also enables the capability for the requirements \ncontained within the language-based models to be well-formed. \n1.5.1.4 A CCESSIBI LITY",
  "needed for what they are doing. This also enables the capability for the requirements \ncontained within the language-based models to be well-formed. \n1.5.1.4 A CCESSIBI LITY   \nEven when stakeholders are willing to spend the time to learn modeling languages such as UML \nand SysML or other language-based modeling tools, these SE tools may not be readily \navailable and assessable to all stakeholders due to a limited number of \"licenses\" or \"seats\" or \n“modeling skills”; while this is a solvable problem, it comes with an increased cost. Obtaining \nand maintaining the necessary skills takes time and is at an additional cost separate from the \ntool.    \nIn contrast, most stakeholders are already well versed in the use of common office applications \nand the natural language used within these applications.  Being able to provide textual needs \nand requirements in an electronic document format (pdf, or common office application formats)",
  "and the natural language used within these applications.  Being able to provide textual needs \nand requirements in an electronic document format (pdf, or common office application formats) \nallows the stakeholders to view the needs and requirements in common office applications that \nhave been installed on their computers without further training or expense.  In addition, there \nare still stakeholders who will still prefer and demand, printed, text-based documents, and will \ncontinue to do so for the foreseeable future.  \n1.5.1.5 A TTRIBUTES   \nBoth the need and requirement expressions include a set of attributes that can be used to \nmanage them as well as the system under development across all lifecycle activities.  While \nmodeling languages allow users to define an entity having the name \"attribute\" and link that \nentity to a need or requirement statement, few practitioners do so, especially when there are",
  "modeling languages allow users to define an entity having the name \"attribute\" and link that \nentity to a need or requirement statement, few practitioners do so, especially when there are \nmultiple attributes that the project team has decided to use and define.  Attributes can be a \npowerful tool to produce meaningful reports and dashboards for use by management \nstakeholders.   \nWhile several MBSE tools are making progress on having a number of attributes for each need \nor requirement statement, and in linking graphical content (use cases, etc.) to attributes, text-\nbased approaches are often far simpler. Appendix E includes a listing of attributes mapping",
  "Guide to Writing Requirements  13 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nthose attributes to the characteristics defined within this Guide to which they contribute.  Refer \nto the NRM, Section 15 for a more detailed discussion concerning the use of attributes.  \n1.5.1.6 FORMAL , BINDING AGREEMENT  \nThe legal profession represents perhaps the greatest barrier to adoption of models and non-\ntextual tools for expressing needs and requirements. Textual need and requirement statements \nare more easily understood in a formal agreement or contract-based system development effort \nby a wider, and often, non-technical group of stakeholders including business management, \nproject management (PM), configuration management (CM), contract administrators, and legal \npractitioners.   \nTo be part of a binding agreement, especially in a legal contract, the sets of needs and \nrequirements must be expressed formally, and configuration managed in a form that 1) makes it",
  "To be part of a binding agreement, especially in a legal contract, the sets of needs and \nrequirements must be expressed formally, and configuration managed in a form that 1) makes it \nclear the statements are binding and 2) have the characteristics of well-formed need and \nrequirement statements and sets of needs and requirements as defined in standards and guides \nsuch as this Guide.   \nUse of “shall” in requirements statements, or another term defined to have the same meaning, \nmakes it clear that what is being communicated is formal, the requirement statement is binding, \nand the system must be verified to meet the requirements.   \nWhile drawings and figures can certainly be part of Statements-of-Work (SOWs), it is currently \ndifficult to include a model file as a contractual obligation. Text statements are far easier to \nenforce legally. Perhaps one day this will evolve; however, until then, the reader is",
  "difficult to include a model file as a contractual obligation. Text statements are far easier to \nenforce legally. Perhaps one day this will evolve; however, until then, the reader is \nrecommended to continue defining well-formed, text-based needs and requirements, particularly \nin support of contract-based developments.  \n1.5.1.7 SYSTEM VERIFICATION AND SYSTEM VALIDATION .   \nMost formal contract-based product development and management processes, as well as the \nhighly regulated products themselves, require evidence of successful system verification and \nsystem validation. These formal processes must occur prior to product acceptance, \nqualification, certification, and approval for use.   \nIn highly regulated, safety-critical industries such as the medical device industry, ground \ntransportation, aviation, and consumer products, formal evidence that the design outputs \n(including the product) meet the design inputs (Integrated Set of Needs and set of Design Input",
  "transportation, aviation, and consumer products, formal evidence that the design outputs \n(including the product) meet the design inputs (Integrated Set of Needs and set of Design Input \nRequirements) is required prior to the product being approved for its intended use in the \nintended operational environment by the intended users and released into the market.   \nCurrently, no form other than textual needs and requirements has been able to meet these \nrequirements.  Even if these textual requirements are entered into a modeling tool, verification is \nperformed against the statement in the requirement-block.  For a detailed discussion on system \nverification and system validation refer to the NRM and GtVV.  \n1.5.2 SUMMARY  \nMore than anything else, textual needs and requirements are a form of communication.  As \nsuch, it is vital that the intended message is clearly, and unambiguously communicated to those \nfor whom the message is intended, over time.",
  "such, it is vital that the intended message is clearly, and unambiguously communicated to those \nfor whom the message is intended, over time.   \nThis G uide refers solely to the expression of textual need and requirement statements.  If an \norganization chooses to use alternate forms to define needs and requirements, the \ncharacteristics defined in this guide are still applicable.  It is important to understand that, from a \nlegal perspective, the responsibility of communicating the message is the responsibility of the",
  "Guide to Writing Requirements  14 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nsender, so the onus is on the writer for unambiguous communication of needs and \nrequirements. If the alternate form does not have these characteristics, there is a risk that the \nintent of what is being communicated within the need and requirement statements will not be \nclear to those they are intended; resulting in the needs and requirements of those for whom the \nsystem is being developed will not be met.  \nIf a project has embraced the use of language-based modeling tools to facilitate their approach \nto systems engineering, the characteristics and rules in this guide still apply. The use of \nlanguage-based modeling tools does not provide an exemption from performing the needs and \nrequirements definition and analysis activities required to make a project successful, tool or not. \nIn fact, the use of such tools for doing the necessary underlying analysis, is key to helping",
  "requirements definition and analysis activities required to make a project successful, tool or not. \nIn fact, the use of such tools for doing the necessary underlying analysis, is key to helping \nensure the needs and requirements have the characteristics and rules defined in this Guide.  \n1.6 D efinitions \nThis section defines several fundamental terms (Ryan, Wheatcraft, Dick and Zinni; 2014) \ndefined in the context of how they are used within the RWG products.  For example, the term \n“needs” by itself in the RWG products refer to the needs included in a well-formed Integrated \nSet of Needs and the term “requirements” refer to the requirements contained within a well-\nformed set of Design Input Requirements having the characteristics defined in this Guide. \nWhen describing system development, some form of distinction is commonly made between \nlifecycle concepts, needs, and requirements as shown in Figure 3. Lifecycle concepts, needs,",
  "When describing system development, some form of distinction is commonly made between \nlifecycle concepts, needs, and requirements as shown in Figure 3. Lifecycle concepts, needs, \nand requirements should be developed for entities at all levels of the organization and system \narchitecture. The activities associated with the development and transformations shown in \nFigure 3 are discussed in depth in the NRM and GtNR.  \n \n \nFigure 3:  Entity-relationship D iagram for C ustomers, C oncepts, Entities, N eeds, \nand R equirements Terms  \nNote: In the definitions below, the term “customer” is used to refer to the organizations or \npersons requesting or procuring a work product, and/or will be the recipient of the work product \nwhen delivered.  Customers are key stakeholders that exist at multiple levels of an organization \nand may be internal or external to the enterprise.  As such, there can be multiple customers.   \nProblem or \nOpportunity\nCustomers & \nStakeholders\nEntities\n Integrated",
  "and may be internal or external to the enterprise.  As such, there can be multiple customers.   \nProblem or \nOpportunity\nCustomers & \nStakeholders\nEntities\n Integrated \nSet of Needs\nDesign input \nRequirements\ntransformed \ninto\nhave\ndevelop\nfulfill\ntransformed \ninto\nLifecycle \nConcepts\nfulfill\ntransformed \ninto\nfulfill\nfulfilled\nby\nOriginal figure created by M. Ryan and  L. Wheatcraft. Usage granted per the INCOSE Copyright Restrictions. \nAll other rights reserved.",
  "Guide to Writing Requirements  15 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n1.6.1 ENTITIES \nNeeds and requirements apply to an entity, which could exist at any level of the organization or \nthe system architecture in the context of a problem or opportunity fulfilled by the entity.  Since \nterms such as ‘product’, ‘SOI’, ‘system’, ‘subsystem’, and ‘system element’ are level-specific, a \ngeneral term is needed that can apply at any level of the organization or architecture and to any \nsingle item at that level.  For this, the term ‘entity’ is used which has lifecycle concepts, needs, \nand requirements which the entity fulfills. \nAn entity is a single item to which a concept, need, or requirement applies: an organization, \nbusiness unit, project, supplier, service, procedure, SOI (system, subsystem, system \nelement), product, process, or stakeholder class (user, operator, tester, maintainer, etc.).",
  "business unit, project, supplier, service, procedure, SOI (system, subsystem, system \nelement), product, process, or stakeholder class (user, operator, tester, maintainer, etc.).  \nThere are three general types of entities—physical or software entities such as the \nengineered systems to be developed; process entities such as procedures or work \ninstructions; and business or human entities such as business units, users, customers, \ndevelopers, suppliers, and other stakeholders. \n1.6.2 C ONCEPTS  \nA concept is a textual or graphic representation that concisely expresses how an entity can \nfulfill the problem, threat, or opportunity it was defined to address within specified \nconstraints with acceptable risk that provides a business in terms of people, process, and \nproducts.   \nA set of lifecycle concepts includes multiple concepts across the lifecycle for how the \norganization (and stakeholders within an organization) expects to manage, acquire, define,",
  "products.   \nA set of lifecycle concepts includes multiple concepts across the lifecycle for how the \norganization (and stakeholders within an organization) expects to manage, acquire, define, \ndevelop, build/code, integrate, verify, validate, transition, install, operate, support, maintain, \nand retire an entity.  \nLifecycle concepts can be defined from the perspective of the organization, the SOI, or the \nmacro-system in which the organization and SOI exist.  Refer to the NRM for more details \nconcerning lifecycle concepts. \nAs discussed in the INCOSE SE HB lifecycle stages for a SOI include concept, \ndevelopment, production, utilization, support, and retirement.  From a holistic perspective, \nconcepts concerning the approaches the project team will implement these lifecycle stages \nmust defined early in the project both from a project management perspective as well as a \nsystems engineering perspective. \n1.6.3 N EEDS",
  "must defined early in the project both from a project management perspective as well as a \nsystems engineering perspective. \n1.6.3 N EEDS  \nNeeds are well-formed textual statements of expectations for an entity stated in a structured, \nnatural language from the perspective of what the stakeholders need the entity to do, in a \nspecific operational environment, communicated at a level of abstraction appropriate to the level \nat which the entity exists.  \nA need statement is the result of a formal transformation of one or more sources or \nlifecycle concepts into an agreed-to expectation for an entity to perform some function or \npossess some quality within specified constraints with acceptable risk.  \nBased on the sources and set of lifecycle concepts, through formal needs analysis, needs \nare defined using a formal transformation process involving decomposition, derivation, \nelaboration, diagrams, and architectural and analytical/behavioral models.",
  "Guide to Writing Requirements  16 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nNote: The use of the term “needs” as used in this Guide refers to the needs contained \nwithin an Integrated Set of Needs defined for the SOI as discussed in Sections 1.8. \n1.6.4 R EQUIREMENTS  \nRequirements are well-formed textual “shall” statements that communicate in a structured, \nnatural language what an entity must do to realize the intent of the needs from which they were \ntransformed.  \nA requirement statement is the result of a formal transformation of one or more sources, \nneeds, or higher-level requirements into an agreed-to obligation for an entity to perform \nsome function or possess some quality within specified constraints with acceptable risk. \nR equirements definition is an activity which, through formal requirements analysis, determines \nspecifically what the entity must do to meet the sources, needs, or higher-level requirements",
  "R equirements definition is an activity which, through formal requirements analysis, determines \nspecifically what the entity must do to meet the sources, needs, or higher-level requirements \nthey are being transformed from using a formal transformation process involving decomposition, \nderivation, elaboration, diagrams, and architectural and analytical/behavioral models.  \nNote: The use of the term “requirements” as used in this Guide refers to the requirements \ncontained within a set of Design Input Requirements defined for the SOI as discussed in \nSections 1.8.  \n1.6.5 A TTRIBUTES  \nAs illustrated in Figure 4, need and requirement statements are supported by associated \nattributes that aid in the definition and management of a need, sets of needs, a requirement, \nand sets of requirements.  These attributes also aid in achieving many of the characteristics \ndefined in this Guide.   \n \nFigure 4: Entity-Relationship Diagram for Needs and Requirements Terms  \nRequirement \nStatement",
  "defined in this Guide.   \n \nFigure 4: Entity-Relationship Diagram for Needs and Requirements Terms  \nRequirement \nStatement\nCharacteristics\nRequirement\nExpression\nRequirement \nSet\nAttributes\nhas\nRulesResult\nin\nIncluded in\ninform\nIncluded in\nCharacteristics\nhas\nRulesResult \nin\ninform\nVerification \nAttributes\nhas\nhas\nIncluded in\nIncluded in\nDesign input Requirements\nNeed \nStatement\nCharacteristics\nNeed\nExpression\nNeed \nSet\nAttributes\nhas\nRulesResult\nin\nIncluded in\ninform\nIncluded in\nCharacteristics\nhas\nRulesResult \nin\ninform\nValidation \nAttributes\nhas\nhas\nIncluded in\nIncluded in\nIntegrated Set of Needs\nTransformed into\nOriginal figure created by M. Ryan and  L. Wheatcraft. Usage granted per the INCOSE Copyright Restrictions. All other rights reserved.",
  "Guide to Writing Requirements  17 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nAn attribute is additional information associated with an entity which is used to aid in its \ndefinition, understanding, and management. \nWell-chosen attributes, properly defined and tracked, can make the difference in being able to \ncorrectly interpret and manage needs and requirements definition throughout the system \nlifecycle and adjust accordingly—or finding out late in the program the needs or requirements \nwere defective in the first place.  When errors in the needs and requirements—or errors in their \ninterpretation—are discovered late in the program, they can be expensive and time-consuming \nto fix.     \nAppendix E includes a listing of attributes mapping those attributes to the characteristics defined \nwithin this Guide to which they contribute.  Refer to the NRM for a more detailed discussion on \nattributes as applied to needs and requirements.",
  "within this Guide to which they contribute.  Refer to the NRM for a more detailed discussion on \nattributes as applied to needs and requirements. \n1.6.6 N EEDS AND R EQUIREMENT EXPRESSIONS  \nAlthough each need statement and requirement statement are individually important, needs \nexpressions and requirements expressions are more than just well-formed textual \nstatements that are written succinctly in a standard format having the characteristics \ndefined in this Guide. The full expression comprises a statement and its associated \nsupporting attributes. \nA need expression includes a need statement and a set of associated attributes.  \nA requirement expression includes a requirement statement and a set of associated \nattributes.  \n1.6.7 PATTERNS  \nPatterns represent the structure that every well-formed need or requirement statement \nshould conform with. \nA requirement pattern or need pattern is represented by a series of building blocks (also",
  "Patterns represent the structure that every well-formed need or requirement statement \nshould conform with. \nA requirement pattern or need pattern is represented by a series of building blocks (also \ncalled pattern slots) including all the elements envisioned to represent a well-formed, \nsingular, and complete need or requirement. \nSeveral rules, especially R1, are related to the necessity, for needs and requirements, to \nconform with one and only one pattern. Appendix C provides more information on the concept of \npattern and includes some well-known examples. \n1.6.8 SETS  OF  N EEDS AND SETS OF R EQUIREMENTS  \nAlthough each individual need and requirement expression is important, it is ultimately the set of \nneeds and resulting sets of requirements that will describe what the entity must do and be, and \nit is the set of needs and/or set of requirements that most often will be agreed-to as a \ncontractual obligation.",
  "it is the set of needs and/or set of requirements that most often will be agreed-to as a \ncontractual obligation.   \nA need set is a well-formed set of agreed-to need expressions for the entity \n(enterprise/business unit/system/subsystem/system element/process) and its external \ninterfaces.  \nWithin the NRM, GtNR, GtVV, and this Guide this set of needs is referred to as an \nIntegrated Set of Needs as shown in Figures 2 and 3. This Integrated Set of Needs is well-",
  "Guide to Writing Requirements  18 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nformed, having the characteristics defined in this Guide, communicating the scope of effort \nto which the system of interest will be validated against. \nA requirement set is a well-formed set of agreed-to requirement expressions for the entity \n(enterprise/business unit/system/subsystem/system element/process) and its external \ninterfaces.   \nWithin the NRM, GtNR, GtVV, and this Guide this set of requirements is referred to as a set \nof system Design Input Requirements as shown in Figures 2 and 3. This set of system \nDesign Input Requirements is well-formed, having the characteristics defined in this Guide \nand against which the SOI will be verified. \n1.7 Needs, Requirements, and the Entity to Which They Apply \nWhen defining needs and requirements it is important to understand the significance of the use \nof the word “entity”.",
  "1.7 Needs, Requirements, and the Entity to Which They Apply \nWhen defining needs and requirements it is important to understand the significance of the use \nof the word “entity”.  \nIn terms of need and requirement statements, the entity that is the object of a need statement \n(“The <stakeholders> need the <entity> to ........”) which, in turn, will be the subject of a \nsubsequent requirement statement (“The <entity> shall ......”) transformed from that need.   \nFor example, the need for an entity called a bicycle may incorporate the constraint, \"The \ncustomers need the bicycle to transport the rider using non-motorized power.\" This would be \ntransformed into one or more requirements on the bicycle system that would result in the need \nbeing met, one such requirement could be, \"The bicycle shall transport a rider using the \npropulsion force supplied by the rider.”   \nSystems engineers must make clear the applicability of needs and requirements based on the",
  "propulsion force supplied by the rider.”   \nSystems engineers must make clear the applicability of needs and requirements based on the \nentity they apply.   For example: \nThere will be project needs and requirements on a project or organizational elements within the \nenterprise that will be recorded in a Project Authorization Document (PAD), Project \nManagement plan (PMP), other plans and procedures that may take the form:   \nThe <stakeholders> need the <project> to ……. \nThe <stakeholders> need the <xxxx team> to ……. \nThe <project> shall …….  \nThe <xxxxx team> shall…….   \nThere will be supplier needs and requirements on a supplier, vendor, or contractor that will be \nrecorded in Statements of Work (SOW) and Supplier Agreements (SA) that may take the form:   \nThe <stakeholders> need the <supplier/contractor> to ……. \nThe <supplier/contractor> shall ……. \nThere will be procedural needs and requirements concerning actions the person or organization",
  "The <stakeholders> need the <supplier/contractor> to ……. \nThe <supplier/contractor> shall ……. \nThere will be procedural needs and requirements concerning actions the person or organization \nresponsible for conducting steps within a procedure resulting in those actions (for example, a \nsystem verification or system validation procedure or a test procedure), such as the following: \nThe <stakeholders> need the <operator, technician, engineer> to verify the SOI meets \n<this requirement> per the defined success criteria using the defined system verification \napproach using the defined system verification method. \nThe <operator, technician, engineer> shall <stimulate the SOI in some manner>. \nThe <operator, technician, engineer> shall <record the results of the stimulation>.",
  "Guide to Writing Requirements  19 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nThere will be system needs and requirements on the SOI that are recorded within the SOI set of \nDesign Input Requirements or design output specifications as shown in Figures 2 and 4, which \nprovide expectations concerning the design and production of a SOI: \nThe <stakeholder> needs the <SOI > to provide the capability to <do something in a given \noperational environment with a required performance of xxxxx>.   \nThe <SOI> shall <perform some function with the desired performance under some \noperating condition>.  (Design input) \nThe <SOI component> shall be manufactured to <the physical dimensions shown in \ndrawing xyz?>.  (Design output). \nNeeds and requirements for the different entities must not be mixed together within a single set \nof needs and a single set of requirements.  Each set of needs and each set of requirements",
  "Needs and requirements for the different entities must not be mixed together within a single set \nof needs and a single set of requirements.  Each set of needs and each set of requirements \nmust only include statements that relate to the single entity to which the set applies.  This is \nimportant because for each entity there is an expectation that objective evidence can be \nobtained which can be used to assess, with some level of confidence, that the entity has met \nthe requirements (system verification) or needs (system validation) of that entity.   If the sets are \nblended system verification and system validation can be much harder, which can lead to \nconfusion among project staff. See also R3. \n1.8 Needs vs Requirements \n1.8.1 STAKEHOLDER EXPECTATIONS , N EEDS , A ND R EQUIREMENTS  \nVarious guides, textbooks, and standards refer to stakeholder “expectations, needs, and \nrequirements”, “stakeholder needs and requirements”, or “user needs and requirements” as if",
  "Various guides, textbooks, and standards refer to stakeholder “expectations, needs, and \nrequirements”, “stakeholder needs and requirements”, or “user needs and requirements” as if \nthey are the same; often combining them in a single document, such as a User Requirements \nDocument (URD), Program [or Project] Requirements Document, or Stakeholder Requirements \nDocument (StRD)—communicating the needs and requirements in the form of “shall” \nstatements.   \nThis can result in confusion as to their scope, in terms of what an is “expectation” versus what is \na “need” as opposed to what is a “requirement”.  All three can have different contractual \nmeanings—and the end SOI can be different than what the customer expected if all three are \nnot clarified and agreed to, as to what idea, function, capability, feature, or concept is in which \ncategory.  Some organizations communicate stakeholder expectations in terms of user stories,",
  "not clarified and agreed to, as to what idea, function, capability, feature, or concept is in which \ncategory.  Some organizations communicate stakeholder expectations in terms of user stories, \nuse cases, user scenarios, operational scenarios, Concepts of Operation (ConOps) or \nOperational Concepts (OpsCon). \nFor some practitioners, “stakeholder expectations” are communicated in terms of stakeholder \nneeds and requirements; for example, ISO/IEC/IEEE 29148 [25] defines “stakeholder \nrequirements” in terms of “stakeholder needs.”   \nISO/IEC/IEEE 29148 states that stakeholder needs concentrate on the system’s purpose and \nbehavior and are described in the context of the operational environment and conditions.  \nISO/IEC/IEEE 29148 does not specify any particular form for communicating stakeholder \nneeds—indeed, it states that they often lack definition, analysis, and possibly consistency and \nfeasibility.",
  "ISO/IEC/IEEE 29148 does not specify any particular form for communicating stakeholder \nneeds—indeed, it states that they often lack definition, analysis, and possibly consistency and \nfeasibility.   \nStakeholder requirements are defined as a more formal form of stakeholder needs, \ntransformed from the stakeholder needs, no matter their form, refining and evolving the \nstakeholder needs using a ConOps  to aid the understanding of the stakeholder concerns at the \norganizational level and system OpsCon  from the system perspective.  Ideally, this",
  "Guide to Writing Requirements  20 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \ntransformation results in a set of objectively adequate, structured, and more formal statements \nof stakeholder needs, goals, and objectives.  As requirements, ISO/IEC/IEEE 29148, states that \nthe stakeholder requirements should be well-formed having the characteristics of well-formed \nrequirements.    \nThe purpose of stakeholder needs and requirements is to represent a user-oriented view of the \nsystem as viewed externally; what do the stakeholders need from the system, what do they \nneed the system to do, how do they plan to interact with the system, and what interactions the \nsystem has with its external environment.   \nAs the phrases suggest, stakeholder needs and stakeholder requirements are defined, \nmanaged and owned by the stakeholders or their representatives.  This can be confusing in that \ncustomers, users, operators, regulators, and developers are all potential stakeholders.",
  "managed and owned by the stakeholders or their representatives.  This can be confusing in that \ncustomers, users, operators, regulators, and developers are all potential stakeholders.   \nWhenever the phrase “stakeholder, user, or customer needs or requirements” is used, the \nreader should assume what is meant are needs or requirements owned by the stakeholders that \ndefined them.  In some domains, “user needs and requirements” and “customer needs and \nrequirements” are specifically addressed instead of, or in addition to, the more generic \n“stakeholder needs and requirements” designation.  Different organizations may use slightly \ndifferent terms for what may or may not be the same concept or entity. \n1.8.2 SYSTEM R EQUIREMENTS  \nISO/IEC/IEEE 29148 states that system requirements specify, in a way that is measurable, \nfrom the supplier’s perspective, what characteristics, attributes, and functional and performance",
  "ISO/IEC/IEEE 29148 states that system requirements specify, in a way that is measurable, \nfrom the supplier’s perspective, what characteristics, attributes, and functional and performance \nrequirements the system is to possess, to satisfy stakeholder requirements [needs].  Unless the \ncustomer has placed a constraint on the system, the system requirements should be defined in \nlogical terms and not imply any specific physical implementation.   \nThe system requirements are transformed from the stakeholder, user-oriented view of desired \ncapabilities into a technical view of a solution that meets the operational needs of the user.  \nThe system requirements are system-level technical requirements defined and owned by the \nstakeholders responsible for the transformation, communicating what the system of interest \nmust do to meet the needs.   W ho the stakeholders are can vary depending on the \norganization’s development concept.  They could be the customer (internal or external -",
  "must do to meet the needs.   W ho the stakeholders are can vary depending on the \norganization’s development concept.  They could be the customer (internal or external - \ndepending on perspective) or the developing organization (internal or external - again \ndepending on perspective). If the system requirements are defined by the customer, these \nrepresent the customer-owned system requirements. If defined by the developing organization, \nthese represent the developer-owned system requirements. \nThe customer-owned or developer-owned system requirements are meant to be the system \nrequirements that are inputs into the system architecture and design process activities.  \nIn some cases, the customer may have done the design and what are referred to as customer \nrequirements are in fact the customer-owned design output specifications to which the SOI is to \nbe manufactured or coded to. \nThis distinction is important in that “stakeholder, user, or customer needs” and associated",
  "be manufactured or coded to. \nThis distinction is important in that “stakeholder, user, or customer needs” and associated \nstakeholder, user, or customer requirements represent a stakeholder, user, or customer \nperspective of what they need the SOI to do as viewed externally, while the “customer-owned” \nor “developer-owned system requirements are a technical perspective that communicates what \nthe stakeholders, users, or customers require the SOI to do to meet their needs.",
  "Guide to Writing Requirements  21 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nOften, the requirements from the customer included in a contract with a supplier are “customer-\nowned system requirements” or “customer-owned design output specifications”.  \n1.8.3 C OMMON ISSUES  \nBelow are common issues frequently observed within sets of stakeholder needs and \nrequirements and sets of customer-owned system requirements: \n• Stakeholder needs and requirements are treated as the same thing, including both in the \nsame set—for example, User Needs Document or User Requirements Document or \nStakeholders Requirements Document. \n• While stakeholder needs are referred to as a “thing”; the form in which they are \ncommunicated is not defined.  Some forms used by stakeholders to communicate their \nneeds include text, use cases, user stories, operational scenarios, and voice (during \nelicitation). There is currently no defined standard form for documenting stakeholder needs",
  "needs include text, use cases, user stories, operational scenarios, and voice (during \nelicitation). There is currently no defined standard form for documenting stakeholder needs \nin existing standards. \n• There are multiple stakeholders as well as different sets of stakeholders at different levels of \nthe organization and system architecture, resulting in multiple sets of stakeholder needs and \nstakeholder requirements. The different sets can contain needs and requirements that \nconflict, or at least be inconsistent with, other sets of stakeholder needs and stakeholder \nrequirements. \n• As stated in ISO/IEC/IEEE 29148, stakeholder needs are often not well formed, and there is \nno standard for the form in which the stakeholder needs are communicated.  With this in \nmind, what are stakeholder requirements transformed from the stakeholder needs validated \nagainst? \n• Customer/stakeholder requirements, and customer/stakeholder-owned system requirements",
  "mind, what are stakeholder requirements transformed from the stakeholder needs validated \nagainst? \n• Customer/stakeholder requirements, and customer/stakeholder-owned system requirements \nare often poorly formed and do not have the have the characteristics of well-formed \nrequirements. In addition, the sets are often incomplete not including all system \nrequirements that reflect the stakeholder needs and requirements of the developing \norganization. \n• Not all stakeholders transform their needs into stakeholder requirements and may use \nalternate forms to communicate their expectations. \n• Often stakeholder needs, stakeholder requirements, and stakeholder-owned system \nrequirements have not undergone sufficient analysis to determine feasibility. \n• Stakeholder requirements and system requirements communicate different perspectives yet \nare expected to have the same characteristics of well-formed requirements; which means",
  "• Stakeholder requirements and system requirements communicate different perspectives yet \nare expected to have the same characteristics of well-formed requirements; which means \nthat it is often difficult to determine the differences among the various sets, what role they \nplay, and expectations for system verification and system validation. In this case it is difficult \nto tell the difference if both start with “The <system> shall …….” \n• As requirements, it is common for organizations to not understand and not make a \ndistinction between stakeholder requirements and system requirements, including them in \nthe same set.  To them they are both “requirements”.  This is problematic in that \nISO/IEC/IEEE 29148 and ISO/IEC/IEEE 15288 state that the system is verified against the \nsystem requirements and validated against the stakeholder requirements.  If the stakeholder \nrequirements are in the same set with the system requirements, and indistinguishable from",
  "system requirements and validated against the stakeholder requirements.  If the stakeholder \nrequirements are in the same set with the system requirements, and indistinguishable from \nthe system requirements, what the system validated against. \n• Formal lifecycle concepts and needs definition activities are sometimes avoided or \nabbreviated. Skipping lifecycle concepts and needs definition before defining system \nrequirements put an engineering organization at risk of misconstruing the intent of the SOI",
  "Guide to Writing Requirements  22 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nwhich may result in development of a system that fails system validation and creates \npotential rework.  \n• When recording needs, the need statements are written as “shall” statements and calling \nthese “stakeholder requirements” rather than needs.  \n• Stating stakeholder needs and stakeholder requirements that are too vague to verify or \nvalidate against.  \n• Often “stakeholder requirements” do not have the characteristics of well-formed \nrequirements as defined in this Guide, even though ISO/IEC/IEEE 29148 says they should.   \nExamples:  \n“The <stakeholders> need the <SOI> to be compliant with government safety standards \nand regulations.”  \nThis stakeholder need is communicated as a stakeholder requirement: \n“The <SOI> shall be compliant with government safety standards and regulations.”   \nAlthough well-intended, both statements are too vague to verify or validate the system against",
  "“The <SOI> shall be compliant with government safety standards and regulations.”   \nAlthough well-intended, both statements are too vague to verify or validate the system against \nbecause each is ambiguous as to which specific standards and regulations.  Restating a poorly \nformed stakeholder need as a stakeholder requirement with a “shall” does not result in a well-\nformed requirement.    \nFor a well-formed stakeholder need statement and resulting stakeholder requirement, the \nproject team would need to complete an engineering analysis to determine which specific \nstandards and regulations apply and to determine and communicate their needs concerning \nwith which specific standards and regulations the SOI must comply. \nAn example resulting stakeholder need and corresponding stakeholder requirement [need] \nwould then state:  \n“The <stakeholders> need the <SOI> to be compliant with government safety regulation \n<xyz, section 1.2.3.”",
  "would then state:  \n“The <stakeholders> need the <SOI> to be compliant with government safety regulation \n<xyz, section 1.2.3.”  \n“The <SOI> shall be compliant with government safety regulation <xyz, section 1.2.3.” \nHowever, what often happens is that this stakeholder requirement is copied and pasted into the \nset of system requirements as written. \nAnother common issue is when needs are written using a “shall”, but the entity is a stakeholder \nrather than the SOI.   For example, there may be a need:  \n“The <stakeholders> need the <SOI> to provide the capability to enable <users> to \n<perform a given function >.”   \nA common error is to rewrite the need statement as a system requirement without changing the \nsubject of the statement (the appropriate entity) stating that:  \n“The <user> shall be able to <perform a given function>.”   \nThis is not an appropriate form for a requirement on the SOI, in that the entity in the subject of",
  "“The <user> shall be able to <perform a given function>.”   \nThis is not an appropriate form for a requirement on the SOI, in that the entity in the subject of \nthe revised statement is the user, rather than the SOI.  In addition, there is no mention of the \nconditions in which the function is to be performed, nor the required performance characteristics \nassociated with the performance of the function. \nAlternatively, another common issue is to “transform” the stakeholder need into a stakeholder \nrequirement by simply making the SOI the subject of the statement:",
  "Guide to Writing Requirements  23 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n“The <SOI> shall provide the capability to enable <users> to <perform a given function \n>.” or \n“The <SOI> shall enable <users> to <perform a given function >.”  or \n“The <SOI> shall be able to <perform a given function>.”  \nWhile the form may be acceptable from a need perspective, in each case, the resulting \nstakeholder requirement does not have the characteristics of well-formed requirements - much \nmore analysis is required to write an appropriate well-formed requirement statement than to \nsimply change the subject of the need statement.  \nThe project team would need to undertake an engineering analysis to determine what the \nsystem must to do such that the intended users will have the capability to perform the given \nfunction, under the given conditions, with the required performance.   \nBased on that analysis, the project team would then write one or more system requirements on",
  "function, under the given conditions, with the required performance.   \nBased on that analysis, the project team would then write one or more system requirements on \nthe SOI that, when implemented by the design, would result in the user being able to perform \nthe function stated in the need statement under the stated conditions with the required \nperformance. \n1.8.4 TERMINOLOGY U SED IN THIS G UIDE  \nBecause of the above issues, stakeholder real-world expectations in the form of stakeholder \nneeds and requirements (or other forms of expression), problem, mission statement, goals, \nobjectives defined within the Business or Mission Analysis Process and the Stakeholder Needs \nand Requirements Definition Process activities described in ISO/IEC/IEEE15288 and the \nINCOSE SE HB  are treated as inputs into the lifecycle concepts analysis and maturation and \nneeds definition activities conducted at the project/system level as discussed in the NRM and \nGtNR  as shown in Figure 5.",
  "needs definition activities conducted at the project/system level as discussed in the NRM and \nGtNR  as shown in Figure 5. \n \nFigure 5: Inputs to the Lifecycle Concept and Needs Definition Activities \nStakeholders\nExpress\nTransformed \ninto\nCost & \nSchedule\nConstrain\nRisks Mitigated by\nMission \nGoals, \nObjectives\nDefine\nRealized\nBy\nIterate\nProblem/ \nOpportunityidentify\nAddressed \nBy\nIterate\nHigher \nLevel \nNeeds\nExisting \nSystems\nInform\nStakeholder \nNeeds, \nRequirements, \nExpectations\nInform\nIterate\nConstrain\nConstrain\nStandards & \nRegulations\nDrive\nConstrain\nTechnology\nConstrain\nLifecycle \nConcepts \nAnalysis &\nMaturation\nInform\nHigher \nLevel \nConcepts\nConstrain\nIntegrated set \nof Needs\nHigher \nLevel \nRqmts\nConstrain\nTraceability is \ncritical to managing \nrelationships\nNeeds\nAnalysis\nTransformed \ninto\nDesign input \nRequirements\nRequirements\nAnalysis\nOriginal figure created by M. Ryan and  L. Wheatcraft. Usage granted per the INCOSE Copyright Restrictions. All other rights reserved.",
  "Guide to Writing Requirements  24 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nStakeholder/customer-owned system requirements are also treated as higher level \nrequirements that are inputs into the lifecycle concepts analysis and maturation and needs \ndefinition activities. \nBy performing the activities discussed in the NRM and GtNR, the result is a set of feasible \nlifecycle concepts.  The set of lifecycle concepts and the other sources are transformed into an \nIntegrated Set of Needs that are correct, consistent, complete, and feasible.  The Integrated Set \nof Needs is then transformed into a set of system level Design Input Requirements that are \ncorrect, consistent, complete, and feasible.  \n1.8.4.1 N EEDS AND  R EQUIREMENTS  PERSPECTIVES  \nThe approach taken in the NRM, GtNR, and this Guide, which is consistent with ISO/IEC/IEEE \n29148, is that the Integrated Set of Needs is written from the perspective of the what the",
  "The approach taken in the NRM, GtNR, and this Guide, which is consistent with ISO/IEC/IEEE \n29148, is that the Integrated Set of Needs is written from the perspective of the what the \nstakeholders need to do using the SOI, while the Design Input Requirements that are \ntransformed from the needs are written from the perspective of what the SOI must do to meet \nthe need(s) from which they were transformed. Figure 6. illustrates these different perspectives.   \n \nFigure 6: Needs vs Requirements - Different Perspectives  \n1.8.4.2 INTEGRATED SET OF N EEDS  \nThe Integrated Set of Needs represents an integrated stakeholder, customer / acquirer view of \nthe SOI, communicating the perspective of the SOI as viewed externally by the stakeholders \n(black box).  \nThe Integrated Set of Needs communicates the agreed-to, baselined, and configuration-\nmanaged stakeholder real-world expectations concerning the system’s intended use, intended",
  "(black box).  \nThe Integrated Set of Needs communicates the agreed-to, baselined, and configuration-\nmanaged stakeholder real-world expectations concerning the system’s intended use, intended \nusers, and intended operating environment against which the system will be validated.  It is this \nwell-formed Integrated Set of N eeds that defines the scope of the project.  While the \nindividual need statements do not include the word “shall”, the Integrated Set of Needs, as a \nWhat must  the \nsystem do to \nmeet the \nneeds?\nWhat do we \nneed the \nsystem to \ndo?\nTwo Different Perspectives\nVs.\nStakeholders Customer and/or \nDeveloping Organization\nIntegrated Set of \nNeeds\nDesign Input \nRequirements\nWhat do we \nneed to do \nwhen using \nthe system?\nWhat quality \ndo we need \nthe system to \nhave?\nWhat do we \nneed the system \nto comply with?\nWhat external \nsystems do we need \nthe system to \ninteract with?",
  "need to do \nwhen using \nthe system?\nWhat quality \ndo we need \nthe system to \nhave?\nWhat do we \nneed the system \nto comply with?\nWhat external \nsystems do we need \nthe system to \ninteract with?\nOriginal figure created by L. Wheatcraft. Usage granted per the INCOSE Copyright Restrictions. All other rights reserved.",
  "Guide to Writing Requirements  25 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nset, is invoked on the project as a “shall” within the project authorization document or statement \nof work, as applicable. \nThis Integrated Set of Needs is transformed into the system-level Design Input Requirements by \nthe organization responsible for doing so. Who the organization is can vary depending on the \norganization’s development concept—customer (internal or external—depending on \nperspective) or the developing organization (internal or external—again depending on \nperspective). \nUnlike the stakeholder needs discussed earlier, the Integrated Set of Needs is well formed \nhaving the characteristics described in this Guide. \nA key point is that the Integrated Set of Needs is owned and managed  by the customer (the \nperson or organization that owns the problem and is paying for the SOI).  It is only the \ncustomer that has a right to define their needs — not the suppliers nor the",
  "person or organization that owns the problem and is paying for the SOI).  It is only the \ncustomer that has a right to define their needs — not the suppliers nor the \ndevelopers.  However, the definition of the Integrated Set of Needs is an iterative process \ninvolving the stakeholders— including the users, operators, suppliers, developers, and other key \nstakeholders as appropriate. Although in many cases this is subcontracted to a third-party or \neven the supplier, in all cases the customer must retain responsibility for agreeing the needs. \nProject success and system acceptance and approval for its intended use is dependent on the \nsystem passing system validation as defined by the Integrated Set of Needs. \n1.8.4.3 SYSTEM D ESIGN INPUT R EQUIREMENTS  \nBecause the Design Input Requirements are transformed from the Integrated Set of Needs, \ntheir quality is dependent on the quality of the needs from which they are transformed.  If the",
  "Because the Design Input Requirements are transformed from the Integrated Set of Needs, \ntheir quality is dependent on the quality of the needs from which they are transformed.  If the \nIntegrated Set of Needs does not have the characteristics defined in this Guide, nor will the \nresulting Design Input Requirements. \nTo avoid ambiguity, when writing needs and requirements, the reader is cautioned to be aware \nof the differences between terms, gain agreement among the stakeholders including the \ndeveloping organization, and clarify the role each has in the SOI lifecycle activities.   \nThis is important because, if the project makes changes in any way midstream—either to get \nback on schedule, incorporate new needs from the stakeholders, or descoped to reduce cost or \nschedule—it will be much easier to do this when the Integrated Set of Needs is clearly defined \nseparate from the requirements.  Deleting a requirement is one thing—but accidentally",
  "schedule—it will be much easier to do this when the Integrated Set of Needs is clearly defined \nseparate from the requirements.  Deleting a requirement is one thing—but accidentally \nremoving a need that looks like a requirement can be far more serious, resulting in failed system \nvalidation. \nTo help distinguish needs from requirements, the needs statements should not include the word \n“shall”.  Using “shall” in need statements results in confusion as to whether the statement is a \nneed, or whether it is a requirement transformed from a need.    \nWhen communicating needs, one approach to avoid this confusion is to use the format:  \n“The <stakeholders> need the system to …” or “The <stakeholders> need to …” \nSome organizations may use other verbs such as “would like”, “prefer”, “should”, or “may” to \nconvey priority or criticality—it may be better, however, to always use “need or need to” in the",
  "Some organizations may use other verbs such as “would like”, “prefer”, “should”, or “may” to \nconvey priority or criticality—it may be better, however, to always use “need or need to” in the \nneed statement and use the attributes of the need expression to convey priority or criticality and \nto make clear what is mandatory and against which the realized system will be validate against.",
  "Guide to Writing Requirements  26 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nWhen communicating requirements, the requirements have the same  general form but use a \ndifferent verb phrase, which always includes the word “shall” for a requirement statement: \n“The <SOI> shall …”    \nRequirement statements use the word “shall” to make clear they are requirements.  Some \norganizations may use other verbs such as “must”, “will”, or ‘should”, “may” to convey priority or \ncriticality—it may be better, however, to always use “shall” in the requirement statement and use \nthe attributes of the requirement expression to convey priority or criticality and to make clear \nwhat is mandatory, binding, and against which the system will be verified.  \nUsing these distinct formats helps make clear what is a need statement and what is a \nrequirement statement.   \nAn example of the approach taken in the RWG products is to include in the Integrated Set of",
  "requirement statement.   \nAn example of the approach taken in the RWG products is to include in the Integrated Set of \nNeeds, agreed-to, well-formed need statements such as:   \n“The <stakeholders> need the <SOI> to comply with <government safety regulation xyz, \nsection 1.2.3>.”  \nIn the past, rather than defining and getting alignment and agreement on the Integrated Set of \nNeeds, many would communicate this need as a requirement “shall” statement and include it in \nthe set of system level Design Input Requirements.    \n“The <SOI> shall comply with <government safety regulation xyz, section 1.2.3>.” \nHowever, this is not a good practice because 1) it is not well-formed, not having the \ncharacteristics defined in this Guide and 2) an analysis must be done, and resulting \nrequirements defined, concerning what the system must do to meet the intent of the need.  \nWhat should happen when transforming the need into corresponding system level requirements,",
  "requirements defined, concerning what the system must do to meet the intent of the need.  \nWhat should happen when transforming the need into corresponding system level requirements, \nis that the responsible project team for the transformation would do an engineering analysis \nassessing each requirement in the standard:  \n• Which standards and regulations are applicable for the SOI (as opposed to the organization \ndeveloping the SOI). \n• Which requirements within these standards and regulations apply to the specific SOI under \ndevelopment. \n• Whether the requirements within these standards and regulations are design inputs or \nrequirements on the design team. \nBased on that analysis, the project team would then: \n• Derive specific Design Input Requirements that, when implemented by the design, will result \nin the intent of the parent requirements within the regulation referenced in the need to be \nmet.",
  "• Derive specific Design Input Requirements that, when implemented by the design, will result \nin the intent of the parent requirements within the regulation referenced in the need to be \nmet.  \n• For those standard or regulatory requirements that are design outputs, derive specific \ndesign output specifications that when implemented by the realized system, will result in the \nintent of the parent requirement within the regulation or standard referenced in the need to \nbe met. \n• Ensure there is traceability to the needs concerning the standard as well as traceability as \nthe design input requirement is allocated to lower-level system elements for implementation. \n• Define system verification attributes (success criteria, method, approach).",
  "Guide to Writing Requirements  27 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nRefer to the NRM and GtNR for additional guidance on defining needs and requirements that \naddress requirements within standards and regulations. \nFurther examples concerning the differences between how needs and requirements are \ncommunicated are included in the descriptions of the characteristics and rules in this Guide as \nwell as the NRM.  \nRefer to the NRM Section 4 for a detailed discussion on the activities associated with defining \nan Integrated Set of Needs for an SOI, and Section 6 for a detailed discussion on transforming \nthose needs into a well-formed set of Design Input Requirements.  Figure 5 shows a graphical \nrepresentation of this transformation. \n1.9 Quality of Needs and Requirements  \nDefining needs and requirements is not an exercise in writing, but an exercise in engineering.",
  "representation of this transformation. \n1.9 Quality of Needs and Requirements  \nDefining needs and requirements is not an exercise in writing, but an exercise in engineering.  \nWell-formed needs and requirements having the characteristics defined in this Guide will result \nfrom following the rules defined in this Guide as well as performing the activities associated with \nthe definition of the needs and requirements and inclusion of attributes as discussed in the NRM \nand GtNR.   \nThe underlying analysis from which a need or requirement was derived is as important as how \nwell the need or requirement statement is formed. Each is necessary, but not sufficient on its \nown, both are necessary to achieve the characteristics defined in this Guide.   \nA requirement can be well-formed following the rules in the GtWR, yet not have the \ncharacteristics defined in the GtWR—it may not be correct nor feasible. \n1.9.1 VERIFICATION O F THE N EEDS A ND R EQUIREMENTS",
  "characteristics defined in the GtWR—it may not be correct nor feasible. \n1.9.1 VERIFICATION O F THE N EEDS A ND R EQUIREMENTS    \nAs discussed in Section 1.10, needs verification and requirements verification involves verifying \nthat the need statements and requirement statements and sets of needs and sets of \nrequirements have the characteristics of well-formed statements and sets of statements \nresulting from following the rules such as those in this Guide or similar organizational guide or \nstandard.  This may differ from the common misconception that \"verifying requirements” \ninvolves ensuring that a requirement is satisfied by a realized SOI— however, that activity is \nreferred to as “system verification” rather than “requirements verification”. \nVerification of needs and requirements is what is commonly referred to as assessing the quality \nof the need and requirement statements and sets of needs and requirements.  Refer to the",
  "Verification of needs and requirements is what is commonly referred to as assessing the quality \nof the need and requirement statements and sets of needs and requirements.  Refer to the \nNRM, Section 5 for a more detailed discussion on needs verification and the NRM Section 7 for \na more detailed discussion on requirements verification. Some would call this a \"quality \nassurance” check on the needs and requirements statements (and their sets). \nWhile some needs verification and requirements verification activities must be done manually, \nothers may be able to be automated depending on the capabilities of the applications in the \nproject toolset.   To what extent the project can rely on automated verification depends on a \ntradeoff between effort and risk.  The need for, and importance of, using automation for needs \nand requirements verification will increase as systems become more complex and the number \nof needs and resulting requirements increase.",
  "and requirements verification will increase as systems become more complex and the number \nof needs and resulting requirements increase.  \nNLP/AI applications provide the capability to automate needs and requirements verification to \nsome extent.  Many of these tools use a subset of the rules defined in this Guide as a basis for \nassessing the quality of the need and requirement statements and integrated sets of needs and",
  "Guide to Writing Requirements  28 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nrequirements.  These tools can be used as both a “digital assistant” to aid in the writing of need \nand requirement statements as well as to assess the quality of individual need and requirement \nstatements and set of needs and requirements based on the subset of rules used.   \nCurrently many of these tools focus on the quality of requirement statements and not on the \nquality of need statements.  Hopefully, in the future, the tools will address both need statements \nand requirement statements and understand the differences between the two. Another current \nlimitation is that some of these tools require the requirements be transferred over to the \nvendor's servers, which may limit their application on government or military programs. \nMa ny of the NLP/AI applications provide a “score” concerning the quality of the requirement",
  "vendor's servers, which may limit their application on government or military programs. \nMa ny of the NLP/AI applications provide a “score” concerning the quality of the requirement \nstatements and sets of requirements based on criteria defined by the project team, as well as \nidentify specific defects based on the subset of rules implemented within the tool or selected by \nthe user.  The project team will determine how this score will be used in the definition and \nmanagement of the requirements and requirements verification activities, including whether \ncertain gated entry criteria will include a certain score for passing the gate or review.   \nWhile these applications can identify defects, the project team still must do the analysis to \naddress and correct these defects.  Given these applications do not address all the \ncharacteristics and rules within this Guide, the project team will still need to address defects",
  "address and correct these defects.  Given these applications do not address all the \ncharacteristics and rules within this Guide, the project team will still need to address defects \nassociated with the other rules not addressed by the NLP/AI applications within their toolset.  In \naddition, many of the needs verification and requirements verification activities discussed in the \nNRM and GtNR are more activity based (such as analysis, traceability, and allocation), and thus \nmust be done manually by the project team to ensure correctness, completeness, and \nconsistency and to give the team a head start to address defects associated with these \nactivities. \n1.9.2 VALIDATION O F THE N EEDS A ND R EQUIREMENTS  \nValidation of a need statement determines whether a need statement clearly communicates the \nintent of the lifecycle concepts or source from which it was derived or transformed.  Validation of",
  "Validation of a need statement determines whether a need statement clearly communicates the \nintent of the lifecycle concepts or source from which it was derived or transformed.  Validation of \na requirement statement determines whether the requirement statement clearly communicates \nthe intent of the need, higher-level requirement, or source from which it was derived or \ntransformed.  In short, the correct need or requirement statement was authored, regardless of \nits grammatical correctness, such that it has the characteristics defined in this Guide. \nA need or requirement statement can be well-formed but can speak to the wrong need or \nrequirement.  The need or requirement may contain incorrect values, it may not be feasible, or it \nmay not communicate the true intent of the lifecycle concept, need, or higher-level requirement \nfrom which it was derived or transformed.  This would be a defect, which could result in a",
  "may not communicate the true intent of the lifecycle concept, need, or higher-level requirement \nfrom which it was derived or transformed.  This would be a defect, which could result in a \ndefective set of implementing requirements as well as in failed system validation.  Refer to the \nNRM Section 5 for a more detailed discussion on needs validation and Section 7 for a more \ndetailed discussion on requirements validation. \nUnlike needs verification and requirements verification, needs validation and requirements \nvalidation confirm that the intent of the source is effectively communicated.  This cannot be \ndone without the project team doing the analysis manually—currently none of the NLP/AI \napplications have the capability to do this type of analysis.",
  "Guide to Writing Requirements  29 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n1.10 Needs and Requirements in the C ontext of Verification and Validation \n  \nFigure 7: Needs and Requirements in the Context of Verification and Validation \nWhen formulating needs and requirements it is important to understand the role of those \nstatements within the context of verification and validation across the lifecycle. \nOnce the Integrated Set of Needs is verified and validated, all subsequent artifacts are validated \nagainst the needs, as shown in the top part of Figure 7.  In turn, once the resulting Design Input \nRequirements are verified and validated, all subsequent artifacts are verified against those \nDesign Input Requirements, as shown in the lower part of Figure 7. \nRefer to the NRM Section 2 for a detailed discussion concerning verification and validation \nacross the lifecycle and the context in which the terms are used.",
  "Refer to the NRM Section 2 for a detailed discussion concerning verification and validation \nacross the lifecycle and the context in which the terms are used. \n1.11 Conditional Clauses and Ubiquitous Requirements \nAs defined in ISO/IEC/IEEE 29148, a requirement is a statement which translates or expresses \na need and its associated constraints and conditions.  Where a condition is “a measurable \nqualitative or quantitative attribute that is stipulated for a requirement and that indicates a \ncircumstance or event under which a requirement applies.”  Conditions further qualify a \nrequirement, enabling a well-formed requirement to be defined in a manner that supports \nverifiability, and may limit the implementation in design. \nISO/IEC/IEEE 29148 provides the following examples: \n• When signal x is received [condition], the <system> [subject] shall set [action] the signal \nreceived bit [object] within 2 seconds [constraint of action].",
  "• When signal x is received [condition], the <system> [subject] shall set [action] the signal \nreceived bit [object] within 2 seconds [constraint of action]. \n• At sea state 1 [condition], the Radar System [subject] shall detect [action] targets [Object] at \nrange out to 100 nautical miles [constraint of action]. \nRequirements without a conditional clause are referred to as “Ubiquitous” requirements which \nare requirements that do not require a condition or context which triggers the desired <system> \nresponse and which are always applicable (for example, physical characteristics and quality \nrequirements (-ilities)).   \nWhen defining requirements describing an action to be performed by a system, subsystem or \nsystem element, it is a common error to treat all requirements as ubiquitous; failing to clearly \ncommunicate the condition in which the requirement applies or context which triggers the \nTransformation\nDesign Input \nRequirements \nDefinition\nArchitecture & \nDesign\nDefinition",
  "communicate the condition in which the requirement applies or context which triggers the \nTransformation\nDesign Input \nRequirements \nDefinition\nArchitecture & \nDesign\nDefinition\nOrganizational \nRequirement \nDefinition \nRequirements\nTransformation\nSystem\nImplementation, \nIntegration\nProduction\nVerification\nRequirements\nVerification\nDesign\nVerification\nSystem Validation\nDesign Validation\nRqmts Validation\n“Are we building the \nright thing?”\n“Do we have the \nright design?”\nOrganizational \nArchitecture & \nDesign\nDefinition \nRequirements\nDesign \nVerification\n“Did we build the \nright thing?” \n“Did we build \nit right?” \n“Did we design \nit right?” \n“Are the requirements \ndefined correctly?” “Did we design it \ncorrectly?” \n“Did we build it \ncorrectly?” \nSystem\nVerification\nDrive\nDrive\nDesign \nInputs\nDesign\nOutputs\nTransformation\nDesign Input \nRequirements\nDrive\nOrganizational \nSystem \nRealization\nRequirements\n“Did we build it \nright?” \nProduction\nVerification\nDesign Output\nSpecifications",
  "Inputs\nDesign\nOutputs\nTransformation\nDesign Input \nRequirements\nDrive\nOrganizational \nSystem \nRealization\nRequirements\n“Did we build it \nright?” \nProduction\nVerification\nDesign Output\nSpecifications\nRealized \nSystem \nElement\nLifecycle Concepts \nand Needs \nDefinition\nStakeholder \nReal-World\nExpectations\nOrganizational \nLifecycle Concept \n& Needs \nDefinition \nRequirements\nNeeds\nVerification\n“Are the needs \ndefined correctly?” \nDrive\nIntegrated Set \nof Needs\nNeeds Validation\n“Are we building the \nright thing?”\nTransformation\nOriginal figure created by M. Ryan and  L. Wheatcraft. Usage granted per the INCOSE Copyright Restrictions. All other rights reserved.",
  "Guide to Writing Requirements  30 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \ndesired system response. Even some physical properties, such as the power consumption, \nmight vary from one state/mode to another (the power consumption in the power-saving mode \nwould invariably be lower than the consumption in nominal mode), resulting in non-ubiquitous \nrequirements. This can result in requirements that are not Unambiguous (C3), Complete (C4), \nCorrect (C8), nor Verifiable/Validatable (C7). \nIn many cases at the system level the focus is on general capabilities the system is to provide.  \nThe use of ubiquitous requirements in this context is often appropriate at this level.  However, \nas these requirements flow down (are allocated) to lower-level subsystems and system \nelements, the inclusion of specific conditional statements is warranted addressing states and \nmodes in which requirements are applicable as well as triggering events to which a requirement \nis responding.",
  "modes in which requirements are applicable as well as triggering events to which a requirement \nis responding. \nW henever states, modes , and trigger definitions or transitions are involved, they must be \ndefined in a project dictionary (or ontology, or m odel) ensuring their consistent use throughout \nthe sets of requirements and other SE artifacts.   \nIn this context, to ensure consistency, the terminology used in the sets of requirements must be \nthe same as is used within the models and design output artifacts.  The use of only defined \nterminology in conditional clauses aids in consistency of requirements and the models they \nwere derived. Refer to appendix D for a summary of those rules in this guide that require, to \nsome extent, a project dictionary to be evaluated. \nAddressing state definitions and transitions within the conditional clauses also enables the \ndevelopment of simulations of the system behavior.",
  "some extent, a project dictionary to be evaluated. \nAddressing state definitions and transitions within the conditional clauses also enables the \ndevelopment of simulations of the system behavior. \nThis concept has been commercialized in approaches such as “EARS” (Easy Approach to \nRequirements Syntax) (Mavin 2009) and within several NLP/AI tools that are used to assess \nrequirements quality. \nThis Guide addresses the use of conditional clauses in several of the rules: \n• R1 – Structured Statements \n• R11 – Separate Clauses \n• R18 – Single-Thought Sentence \n• R27 – Explicit Conditions \n• R28 – Multiple Conditions  \nAppendix C on Requirement Patterns also addresses the use of conditional clauses. \n1.12 Organizing and Managing Needs and Requirements \n1.12.1 THE PROBLEMS OF C OMPLEXITY  \nModern systems are becoming increasingly complex and software-intensive, which presents \nmajor challenges for an organization’s ability to effectively manage all the data, information, and",
  "Modern systems are becoming increasingly complex and software-intensive, which presents \nmajor challenges for an organization’s ability to effectively manage all the data, information, and \nartifacts across the lifecycle for these types of systems.   \nHistorically, organizations defined and recorded needs and requirements in the form of \n“documents”.  As systems become more complex and regulated, the sheer volume of \ndocumentation has become overwhelming, especially in terms of configuration management, \nchange control, completeness, correctness, maintenance, and consistency.  Due to this \nincreasing complexity, there are more people involved in the development of these systems,",
  "Guide to Writing Requirements  31 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \noften spread over different geographical locations.  This may result in many of the documents \nbeing developed and managed within silos with limited collaboration. \nDue to these issues, it is nearly impossible to keep all the needs and requirements, distributed \nacross the various documents in sync with each other as well as in sync with other SE artifacts \nacross the lifecycle.  In addition, it is difficult to keep the needs and requirements within these \ndocuments current, correct, and consistent, leading to the situation in which there is no real \nauthoritative source of truth (ASoT ).   \nFor highly regulated systems, the amount of documentation that must be developed, \nmaintained, and supplied to regulators to show compliance has become overwhelming.  \nInconsistencies in these documents can result in a system that fails system validation and is not",
  "maintained, and supplied to regulators to show compliance has become overwhelming.  \nInconsistencies in these documents can result in a system that fails system validation and is not \napproved for its intended use by the regulatory agencies. \n1.12.2 M ANAGING C OMPLEXITY  \nTo address these issues, the trend is to move from a document-centric to a data-centric practice \nof SE.  As such, some organizations are moving away from legacy documents associated with \nneeds and requirements such as Stakeholder Needs Document, User Requirement Document, \nProgram Requirements Document, System Requirements Document, Software Requirements \nDocument, Functional Requirements Document, etc., as the source of ground truth.  In a data-\ncentric practice of SE, needs and requirements are defined, recorded, and managed \nelectronically in sets within the project’s SE toolset.  Traditional documents such as those listed \nabove would then, if necessary, be generated as reports from within the toolset.",
  "electronically in sets within the project’s SE toolset.  Traditional documents such as those listed \nabove would then, if necessary, be generated as reports from within the toolset. \nAs shown in Figure 7, for each SOI there is an Integrated Set of Needs, a set of Design Input \nRequirements, and a set of design output specifications (the \"design\") for the SOI.   As \ndiscussed in the NRM, there is a set of lifecycle concepts, Integrated Set of Needs and set of \nDesign Input Requirements for not only the integrated system, but also for each subsystem and \nsystem element within the integrated system architecture.  These sets are managed within the \nSE toolset to allow both horizonal traceability across the lifecycle as well as vertical traceability \nbetween levels.  This traceability is not just to ensure all the needs and requirements are \ncaptured in the design, but also is critical to help ensure the individual needs and requirements",
  "between levels.  This traceability is not just to ensure all the needs and requirements are \ncaptured in the design, but also is critical to help ensure the individual needs and requirements \nand sets of needs and requirements have many of the characteristics defined within this Guide. \nAs recommended within several of the rules (R29, R39, R41 , and R42 ) defined in this Guide, \nwithin the sets it is a best practice for organizations to organize their needs and requirements \nwithin the sets by type or category to aid in the definition and management of the sets.   \nRefer to the NRM and GtNR for a more in-depth discussion concerning the data-centric practice \nof SE, traceability, organizing needs and requirements, and managing needs and requirements \nacross the lifecycle. \n1.13 G uide Organization \nThis guide focuses on the writing of need and requirement statements and addresses the \nfollowing aspects of needs and requirements:",
  "across the lifecycle. \n1.13 G uide Organization \nThis guide focuses on the writing of need and requirement statements and addresses the \nfollowing aspects of needs and requirements:  \n• C haracteristics of individual need and requirement statements. \n• C haracteristics of sets of needs and requirements. \n• R ules for individual need and requirement statements that help to formulate statements \nthat have these characteristics. \n• R ules for sets of needs and requirements that help to formulate sets that have these \ncharacteristics.",
  "Guide to Writing Requirements  32 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n• Activities and concepts from the NRM that aid in the definition of need and requirement \nstatements that have these characteristics.  \n• Attributes from the NRM that aid in the definition and management of need and \nrequirement statements.  \n• Patterns that each well-formed need and requirement statement should follow. \nThis guide is organized as follows: \n• Section 2 defines the characteristics of well-formed individual need and requirement \nstatements, provides rationale for the characteristics, and provides guidance for helping \nunderstand the characteristics. \n• Section 3 defines the characteristics of well-formed sets of needs and requirements, \nprovides rationale for the characteristics, and provides guidance for helping understand \nthe characteristics. \n• Section 4 defines the rules for individual need and requirement statements and sets of",
  "the characteristics. \n• Section 4 defines the rules for individual need and requirement statements and sets of \nneeds and requirements that help to formulate need and requirement statements and sets \nof needs and requirements that have the characteristics defined in this Guide.  Included \nwith each rule is an explanation of the rule and examples of the application of the rule.   \n• Appendix A lists the sources and references used to write this document. \n• Appendix B lists acronyms and abbreviations used in this document. \n• Appendix C  provides an overview of the concept of patterns and lists examples of patterns \nthat can be used for different types of requirement statements. \n• Appendix D contains a mapping table showing the applicability of each rule to need \nstatements and requirement statements; it also classifies the rules in the guide into those \nrequiring a data dictionary to be assesses and those not needed such a dictionary.",
  "statements and requirement statements; it also classifies the rules in the guide into those \nrequiring a data dictionary to be assesses and those not needed such a dictionary. \n• Appendix E contains cross reference matrices mapping the rules to the characteristics \ndiscussed in this Guide as well as mapping concepts and activities discussed in the NRM \nto the characteristics, and mapping the attributes discussed in the NRM, Section 15 to the \ncharacteristics they aid in achieving. \n• Appendix F includes a comment form.",
  "Guide to Writing Requirements  33 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nSection 2: Characteristics of Individual Need and Requirement \nStatements \n \nIn defining needs and requirements, care should be exercised to ensure the need or \nrequirement statement is well-formed.  This section defines the characteristics of well-formed \nindividual need and requirement statements, provides rationale for the characteristics, and \nprovides guidance for helping to understand and achieve the characteristics.   \nIn some cases, the characteristics can be achieved by following the rules, however in most \ncases the achievement of the characteristics is dependent on not only following the rules, but \nalso doing the activities and analysis discussed in the NRM and GtNR  and through the use of \nattributes defined in the NRM. \nAppendix E contains cross reference matrices mapping the rules to the characteristics",
  "attributes defined in the NRM. \nAppendix E contains cross reference matrices mapping the rules to the characteristics \ndiscussed in this Guide as well as mapping concepts and activities and attributes discussed in \nthe NRM to the characteristics. \n2.1 Grouping Characteristics \nThe characteristics defined in this Guide are in harmony with those listed in the INCOSE SE \nHandbook, the SEBoK, and ISO/IEC/IEEE 29148 and only slightly different to those in \nISO/IEC/IEEE 15288.   \nThe authors acknowledge there are dependencies and apparent overlap among several of the \ncharacteristics (Carson 2018). Such issues are addressed within either the rationale or \nguidance provided for each characteristic.   \nGiven the definition for need statements and requirement statements include the phrases \n“formal transformation” and “agreed-to obligation”, the characteristics for individual need and \nrequirement statements discussed in this guide can be grouped as follows:",
  "“formal transformation” and “agreed-to obligation”, the characteristics for individual need and \nrequirement statements discussed in this guide can be grouped as follows: \nFormal Transformation. Given the need and \nrequirement is a result of a formal transformation, \nthe following characteristics of a well-formed need \nor requirement have been derived: \n• C1 - Necessary  \n• C2 - Appropriate  \n• C5 - Singular  \n• C8 - Correct  \n• C9 - Conforming  \nAgreed-to Obligation. Since the need and \nrequirement is to be a part of a fair agreement \nto meet an obligation, the following \ncharacteristics of a need or requirement have \nbeen derived. \n• C3 - Unambiguous  \n• C4 - Complete  \n• C6 - Feasible  \n• C7 - Verifiable/Validatable \nThe number of characteristics may seem overwhelming.  To address this, slightly different, \nshorter groupings of characteristics have been proposed and are in use by some organizations.   \n2.1.1 SMART",
  "shorter groupings of characteristics have been proposed and are in use by some organizations.   \n2.1.1 SMART   \nOriginally SMART was defined to apply to goals and objectives, and over time has been used to \ndescribe key characteristics of individual need and requirement statements.  The original form \nwas \"specific, measurable, assignable, realistic, and time-related\" (Doran 1981). The following",
  "Guide to Writing Requirements  34 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nis an adaptation of SMART that is more appropriate for defining well-formed needs and \nrequirements. \n• Specific - Singular (C5), concise, simple, clear, Complete (C4 individual), Consistent \n(C11 Set use of terms), Unambiguous (C3), Understood one way, Conforming (C9) \n• M easurable - Singular (C5), concise, simple, clear, Complete (C4 individual), Consistent \n(C11 Set use of terms), Unambiguous (C3), understood one way, Conforming (C9) \n• Appropriate (C2) - appropriate to level. \n• R ealistic - Feasible (C6 Individual) and (C12 - Set), Achievable within constraints (cost, \nschedule, technology, ethics, legal, regulatory, resources, risk).  \n• Traceable - Necessary (C1), Complete (C10 set), identifiable, linked, sufficient, \nConsistent (C11 with other related requirements). \n2.1.2 C 3F \nC 3F used frequently within the NRM when referring to well-formed sets of needs and \nrequirements.",
  "Consistent (C11 with other related requirements). \n2.1.2 C 3F \nC 3F used frequently within the NRM when referring to well-formed sets of needs and \nrequirements. \n• C orrect (C15) - Appropriate (C2), Unambiguous (C3), Complete (C4), Singular (C5), \nVerifiable/validatable (C7), Correct (C8 - individual), Conforming (C9), Comprehensible \n(C13), and Able to be Validated (C14).  \n• C omplete (C10) - N ecessary (C1) - needed, traceable, sufficient. \n• C onsistent (C11) - use of terminology and with other related requirements. \n• Feasible (C12) - Feasible (C6 Individual), Achievable within constraints (cost, schedule, \ntechnology, ethics, legal, regulatory, resources, risk) \nCorrectness, completeness, and consistency are the three most common characteristics used \nto assess requirements quality by NLP/AI applications, while feasibility is more likely to be \nassessed by engineers. \n2.1.3 VAN   \nVAN represents a condensed listing reflecting three main characteristics that needs and",
  "assessed by engineers. \n2.1.3 VAN   \nVAN represents a condensed listing reflecting three main characteristics that needs and \nrequirements must have. \n• Verifiable - (C7) - Appropriate (C2), Unambiguous (C3), Complete (C4 individual), \nSingular (C5), Correct (C8 - Individual), Conforming (C9), Consistent (C11 Set), \nComprehensible (C13 - Set), and Able to be Validated (C14 - Set), Correct (C15 - Set). \n• Achievable - Feasible (C6 Individual) and (C12 - Set) within constraints (cost, schedule, \ntechnology, ethics, legal, regulatory, resources, risk).   \n• N ecessary (C1) - needed, traceable, sufficient, Complete (C10 set) \n2.1.4 VA NS   \nVANS is derived from (Carson 2018) representing four main characteristics, making a \ndistinction between “necessary” and “sufficient”.  These four characteristics take into \nconsideration the dependencies and overlap of the 15 characteristics discussed in this \nGuide.   \n• Verifiable/Validatable (C7) - Appropriate (C2), Unambiguous (C3), Complete",
  "consideration the dependencies and overlap of the 15 characteristics discussed in this \nGuide.   \n• Verifiable/Validatable (C7) - Appropriate (C2), Unambiguous (C3), Complete \n(C4), Singular (C5), Conforming (C9), Consistent (C11), Comprehensible (C13), \nand Able to be Validated (C14).",
  "Guide to Writing Requirements  35 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n• Achievable - Feasible (C6 and C12) within constraints (cost, schedule, \ntechnology, ethics, legal, regulatory, resources, risk) \n• N ecessary (C1) - needed, traceable, Complete (C10) (set) \n• Sufficient - Complete (C4 and C10). \nCarson proposes that these four characteristics result in need and requirement \nstatements that are Correct (C8).   Carson also proposes that, collectively, if each need \nand requirement statement is C orrect (C8), then the Integrated Set of Needs and set of \nrequirements in which it is a part will be both Complete (C10) and C orrect (C15) as \nshown in Figure 8. It should be noted, however, that it is quite possible for all needs or \nrequirements in a set to each be correct but for the set to not be complete. \n \n  \nFigure 8: Complete and Correct Sets of Needs and Requirements.",
  "requirements in a set to each be correct but for the set to not be complete. \n \n  \nFigure 8: Complete and Correct Sets of Needs and Requirements. \nEven though there are dependencies and overlap between characteristics, it is instructive to \naddress each of the individual 15 characteristics of needs and requirements elaborated in this \nGuide.  Organizations can then choose how they will address each of these characteristics best \nsuited to their culture, processes, domain, and product line. \n2.2 C1 - Necessary \nDefinition: \nThe need statement or requirement statement defines capability, characteristic, constraint, or \nquality factor needed or required to satisfy a lifecycle concept, need, source, or higher-level \nrequirement.   \n \nComplete and correct set \nof needs or requirements\nNeeds or Requirements \nthat are correct\nVerifiable/\nValidatable\nAchievable\nNecessary\nSufficient\nDerived from Carson 2018 –Figure 2. Usage granted per the",
  "of needs or requirements\nNeeds or Requirements \nthat are correct\nVerifiable/\nValidatable\nAchievable\nNecessary\nSufficient\nDerived from Carson 2018 –Figure 2. Usage granted per the \nINCOSE Copyright Restrictions. All other rights reserved.",
  "Guide to Writing Requirements  36 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nRationale: \nIf the statement under review is not included in the set of needs or set of requirements, a \ndeficiency in capability or characteristic will exist which cannot be fulfilled by implementing other \nneeds or requirements in the set.   \nRealization of every need and requirement requires resources, effort, and cost in the form of \ndevelopment, review, management, implementation, design verification, design validation, system \nverification, system validation, maintenance, and disposal.   \nUnnecessary needs and requirements can lead to non-value-added work, additional cost, and \nunnecessary risk.  U nnecessary needs or requirements inappropriately constrain the available \nsolution space and cause extra program expense for developing, managing, implementing, \nverifying the unnecessary requirements, and validating the unnecessary needs.  In the worst",
  "solution space and cause extra program expense for developing, managing, implementing, \nverifying the unnecessary requirements, and validating the unnecessary needs.  In the worst \ncase, unnecessary needs or requirements may over-constrain and compromise the overall SOI \nperformance, leading to infeasible solutions which fail to satisfy necessary needs and resulting \nrequirements.  Including unnecessary needs and requirements may also result in a set of needs \nor set of requirements that is not Feasible (C12). \nA need or requirement is not necessary (not needed in the set of needs or set of requirements) if \nthe:  \n• need or requirement can be removed, and the remaining set will still result in the entity’s \nlifecycle concept or needs being satisfied;  \n• intent of the need or requirement will be met by the implementation of other needs or \nrequirements;  \n• need or requirement cannot be traced back to a source, need, or higher-level requirement; or",
  "requirements;  \n• need or requirement cannot be traced back to a source, need, or higher-level requirement; or \n• author cannot communicate a valid reason (rationale) for the need or requirement. \n \nGuidance: \nThe formal transformation of a lifecycle concept into a need must result in a need addressing a \nspecific aspect of the lifecycle concept that is necessary to meet the mission, goals, objectives, \nstakeholder expectations, regulatory requirements, drivers, constraints, and risks that are \naddressed in the lifecycle concepts.  \nEach need, individually or in combination with other needs in the set, must be sufficient to satisfy \nthe intent of a specific aspect of the of the lifecycle concept or other source from which it was \nderived.  “Sufficient” encompasses both the characteristics “Correct” (C8 and C15) and enhances \nit to ensure the need is not only an “accurate” representation of the specific aspect of the lifecycle",
  "it to ensure the need is not only an “accurate” representation of the specific aspect of the lifecycle \nconcept or other source, but it is also sufficient to ensure the specific aspect of the lifecycle \nconcept or other source that will be satisfied when the SOI realizes the needs. \nThe formal transformation of a need into a one or more requirements that individually or in \ncombination with other requirements, must be both necessary and sufficient (Carson 2018) to \nsatisfy a specific stakeholder need, source, or higher-level requirement from which it was \ntransformed.   \nA requirement is considered sufficient if it, along with any siblings (common children of a single \nparent requirement), satisfies its parent requirement with acceptable margin (as determined by \nthe program/project).  For example, if the parent is a functional/performance requirement, \ncompliance with the required functionality and performance level described by the set of sibling",
  "the program/project).  For example, if the parent is a functional/performance requirement, \ncompliance with the required functionality and performance level described by the set of sibling \nrequirements should ensure conformance to the parent requirement by the integrated product.   \n“Sufficient” both encompasses the characteristic “Correct” (C8 and C15) and enhances it to \nensure the requirement is not only an “accurate” representation of the entity need from which it",
  "Guide to Writing Requirements  37 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nwas transformed but it is also sufficient to ensure the need is satisfied by the resulting \nrequirement or child requirement when the SOI fulfills the requirements. \nThe development of child requirements via either decomposition, derivation, or elaboration must \nresult in child requirements that are both necessary and sufficient to meet the intent of the need \nor source from which it is transformed or the allocated parent requirement in response to which \nthe child requirement is being defined.  The resulting child requirements can exist in different \nrequirement sets for each subsystem or system element to which the parent requirement was \nallocated.   \nIn many cases these child requirements have a dependency, where a change in one could \nrequire a change in one or more of the others.  This is true when the child requirements are in",
  "allocated.   \nIn many cases these child requirements have a dependency, where a change in one could \nrequire a change in one or more of the others.  This is true when the child requirements are in \nresponse to a budgeted quantity (performance or quality characteristic) as well as interface \nrequirements.  It is important to link these dependent child requirements together (establish \ntraceability between the dependent child requirements).  Refer to the NRM Section 6 concerning \nallocation/budgeting and interface requirements. \nOnly necessary needs and the resulting requirements should be included in the need and \nrequirement sets.  Once each need or requirement is proven to be necessary, the set of needs \nmust then be a sufficient solution for the agreed-to lifecycle concepts and the set of requirements \nmust then be a sufficient solution to the set of needs.  Together, the sets of needs and \nrequirements form the design inputs against which the design outputs will be verified and",
  "must then be a sufficient solution to the set of needs.  Together, the sets of needs and \nrequirements form the design inputs against which the design outputs will be verified and \nvalidated. See characteristic (C10 - Complete) concerning completeness of sets of needs and \nrequirements) \nCaution should be taken to avoid gold plating, needs creep, and requirements creep.   Refer to \nthe NRM, Sections 4.6.3.4 and 6.2.6.3 for advice on avoiding gold plating and Section 14.2.51 on \nmanaging needs and requirements creep. \nThere is no such thing as a “self-derived” need or requirement.  A need must always be able to \nbe traced to a source such as a lifecycle concept, driver or constraint, system need, or mission \nstatement, goal, objective, risk, trade study, or stakeholder expectation defined during lifecycle \nconcept and needs definition activities discussed in the NRM and GtNR. Similarly, each \nrequirement must be able to be traced to a need, higher-level requirement, or source.",
  "concept and needs definition activities discussed in the NRM and GtNR. Similarly, each \nrequirement must be able to be traced to a need, higher-level requirement, or source. \nWhile all requirements in the set should be demonstrated that they are necessary, that does not \nmean they are all equal.  To address this, the NRM defines the attributes of Priority (A34), \nCriticality/Essentiality (A35), Risk (of implementation) (A36), and Key Driving Requirement (A38) \nto help manage the set of requirements over time, especially if the project must descope the \nrequirements to address schedule and cost issues.   The NRM provides a more detailed \nexplanation of each of these and how they can be used. \nOne approach used by some organizations to limit the number of requirements to only those that \nare necessary and sufficient is to take a “zero based” or “minimum viable product” (MVP) \napproach.  Such approaches start by only including needs and requirements that are high priority",
  "are necessary and sufficient is to take a “zero based” or “minimum viable product” (MVP) \napproach.  Such approaches start by only including needs and requirements that are high priority \nand are critical or essential for an MVP.  Then additional requirements are only included if they \nadd value in the context of the mission, goals, and objectives as well as drivers, constraints, risks, \nlifecycle concepts, and scenarios defined for the entity.   \nFor market focused product development, many companies will aim to elicit as much information \nas possible from stakeholders to help define the product being built.  A process of stakeholder \nneeds and requirements analysis is used where they are considered based on their priority, \ncriticality, prevalence, urgency, and the value realized by satisfying that need or requirement.  \nThrough the process of product management, a market can be defined consisting of stakeholders",
  "Guide to Writing Requirements  38 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nwith similar product needs.  At this point, a decision can be made on which needs and \nrequirements to include as necessary to satisfy the market needs.   \nIn some cases, organizations will include goals within a need or requirement set that are not \nmandatory nor binding but do add value for some stakeholders.  In the Integrated set of needs \nthere would be a statement such as “The <stakeholders> would like the <SOI> to …….  If the \nstakeholders agree to fund this goal, then it would be turned in to a binding need statement “The \n<stakeholders> need the <SOI name> to ……>.  In the set of Design Input Requirements goals \nare sometimes included in the set expressed as “should” statements that are not binding but \nhighly desirable.   In some cases, a requirement statement will be written as “The <SOI> shall",
  "are sometimes included in the set expressed as “should” statements that are not binding but \nhighly desirable.   In some cases, a requirement statement will be written as “The <SOI> shall \n<perform some function> with a <performance of “x” and a goal of “y”>.  Where “y” is a better \nperformance than x.  In this case “x” is a minimum threshold, with a desire to achieve “y” if \nfeasible.   The inclusion and management of goals is beyond the scope of this Guide. \nTo summarize, if the need or requirement cannot be traced to a source or rationale cannot be \narticulated, it is not necessary.  The inclusion of rationale and other attributes defined in the NRM, \nSection 15, such as trace to source or higher-level, for each need and requirement also aids in \ncomm unicating the necessity and intent of the need or requirement. \n \n2.3 C2 - Appropriate \nDefinition: \nThe specific intent and amount of detail of the need or requirement statement is appropriate to",
  "2.3 C2 - Appropriate \nDefinition: \nThe specific intent and amount of detail of the need or requirement statement is appropriate to \nthe level (the level of abstraction, organization, or system architecture) of the entity to which it \nrefers.   \n \nRationale: \nThe wording of needs is often stated at a higher level of abstraction than is appropriate for a \nrequirement.  See the example under R 31. \nAs shown in Figure 9, levels can also refer to levels within an organization or levels within an \narchitecture—system, subsystems, or system elements.  Needs and requirements may be \ndefined at any level of the organization or system architecture; however, as a rule, a need or \nrequirement should be expressed at the level of the entity to which it refers, and that entity must \nbe able to be validated or verified to have met the need or requirement at that level.   \nRequirements for lower-level entities stated within the requirements set for a higher-level entity",
  "be able to be validated or verified to have met the need or requirement at that level.   \nRequirements for lower-level entities stated within the requirements set for a higher-level entity \nmay seem like implementation.  When design details are stated as design inputs, there is often \nno definition of the “why” and what the parent requirement is that the design detail requirement is \naddressing. In this case, the real higher-level entity requirement may not be stated and thus not \nproperly allocated to the next lower-level entities.  When this is the case, the requirement should \nbe moved down to the appropriate level entity set of requirements and the missing parent \nrequirement added to the higher-level entity’s set of requirements.   \nConversely, higher level entity requirements stated improperly within a lower-level entity’s set of \nrequirements may not have been allocated properly to the other entities at the next level of the",
  "Conversely, higher level entity requirements stated improperly within a lower-level entity’s set of \nrequirements may not have been allocated properly to the other entities at the next level of the \narchitecture, resulting in missing child requirements for those entities. \nA need or requirement stated at the wrong level for an entity is either not C orrect (C8) or may not \nbe verifiable/ validatable (C7) at that level. \nRefer to the NRM for an in-depth discussion on levels.",
  "Guide to Writing Requirements  39 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n  \nFigure 9: Levels of Lifecycle Concepts, Needs, and Requirements \n \nGuidance: \n \nFigure 10: Levels of a System – Hierarchical View \nOrganizational\nLevel View\nStrategic\nLevel View\nBusiness \nOperations\nLevel View\nSystem\nLevel View\nSubsystem\nLevel View\nLifecycle Concept \nView\nRequirements\nView\nEnterprise\nStrategies\nBusiness\nNeeds\nBusiness \nOperations\nNeeds\nSubsystem\nRequirements\nSubsystem \nNeeds\nRequirements \nAnalysis\nMission \nNeeds \nAnalysis\nNeeds \nAnalysis\nNeeds\nAnalysis\nNeeds \nAnalysis\nBusiness \nOperations\nRequirements\nBusiness\nRequirements\nSystem\nRequirements\nNeeds \nView\nBusiness\nAnalysis\nLevels and \nViews\nMission \nRequirements \nAnalysis\nRequirements \nAnalysis\nRequirements \nAnalysis\nConcept of Operations\n(ConOps) or Strategic \nBusiness Plan (SBP)\nPreliminary Lifecycle Concepts:\nDevelopment, Production, \nAcquisition, Deployment, \nOperations, Support, Retirement\nLifecycle Concepts:",
  "(ConOps) or Strategic \nBusiness Plan (SBP)\nPreliminary Lifecycle Concepts:\nDevelopment, Production, \nAcquisition, Deployment, \nOperations, Support, Retirement\nLifecycle Concepts:\nDevelopment, Production, \nAcquisition, Deployment, \nOperations, Support, Retirement\nSystem Lifecycle Concepts:\nDevelopment, Production, \nAcquisition, Deployment, \nOperations, Support, Retirement\nSubsystem Lifecycle Concepts: \nDevelopment, Production, \nAcquisition, Deployment, \nOperations, Support, Retirement\nSystem\nNeeds\nSystem\nElement\nLevel View\nSystem \nElement\nRequirements\nSystems \nElement \nNeedsNeeds \nAnalysis\nRequirements \nAnalysis\nSystem Element Lifecycle \nConcepts: Development, \nProduction, Acquisition, \nDeployment, Operations, Support, \nRetirement\nStakeholder \nreal-world \nexpectations Lifecycle \nAnalysis & \nMaturation\nStakeholder \nreal-world \nexpectations Lifecycle \nAnalysis & \nMaturation\nStakeholder \nreal-world \nexpectations Lifecycle \nAnalysis & \nMaturation\nStakeholder \nreal-world",
  "Analysis & \nMaturation\nStakeholder \nreal-world \nexpectations Lifecycle \nAnalysis & \nMaturation\nStakeholder \nreal-world \nexpectations Lifecycle \nAnalysis & \nMaturation\nStakeholder \nreal-world \nexpectations Lifecycle \nAnalysis & \nMaturation\nStakeholder \nreal-world \nexpectations Lifecycle \nAnalysis & \nMaturation\nOriginal figure created by M. Ryan and  L. Wheatcraft. Usage granted per the INCOSE Copyright Restrictions. All other rights reserved.\n16\nSystem\nC | N | R\nAnalysis\nSpec\nSystem \nElement\nC | N | R\nDesign\nSpec\nSystem \nElement\nC | N | R\nDesign\nSpec\nSystem \nElement\nC | N | R\nDesign\nSpec\nSystem \nElement\nC | N | R\nDesign\nSpec\nSystem \nElement\nC | N | R\nDesign\nSpec\nSystem \nElement\nC | N | R\nDesign\nSpec\nSystem \nElement\nC | N | R\nDesign\nSpec\nSystem \nElement\nC | N | R\nDesign\nSpec\nSystem \nElement\nC | N | R\nDesign\nSpec\nSystem \nElement\nC | N | R\nDesign\nSpec\nSystem \nElement\nC | N | R\nDesign\nSpec\nSystem \nElement\nC | N | R\nDesign\nL1\nL2\nL3\nL4\nL5\nC|N|R: Concepts | Needs | Rqmts\nSubsystem\nC | N | R",
  "C | N | R\nDesign\nSpec\nSystem \nElement\nC | N | R\nDesign\nSpec\nSystem \nElement\nC | N | R\nDesign\nSpec\nSystem \nElement\nC | N | R\nDesign\nL1\nL2\nL3\nL4\nL5\nC|N|R: Concepts | Needs | Rqmts\nSubsystem\nC | N | R\nAnalysis\nDecomp\nSubsystem\nC | N | R\nAnalysis\nDecomp\nSubsystem\nC | N | R\nAnalysis\nDecomp\nSpec\nSystem \nElement\nC | N | R\nDesign\nSpec\nSystem \nElement\nC | N | R\nDesign\nSystem \nElement\nC | N | R\nAnalysis\nDecomp\nSystem \nElement\nC | N | R\nAnalysis\nDecomp\nSystem \nElement\nC | N | R\nAnalysis\nDecomp\nSystem \nElement\nC | N | R\nAnalysis\nDecomp\nSystem \nElement\nC | N | R\nAnalysis\nDecomp\nOriginal figure created by M. Ryan and  L. Wheatcraft. Usage granted per the INCOSE Copyright Restrictions. All other rights reserved.",
  "Guide to Writing Requirements  40 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nUnless there is a good reason, a subject of the need or requirement statement should refer to the \nentity at the level at which the statement is being expressed (not higher or lower). Referring to \nFigure 10, needs and requirements for an architectural entity should be expressed within each \narchitectural entity’s set of needs or requirements.  \nA key consideration when writing and reviewing need and requirement statements is whether the \nsubject (entity) of the statement is the subject (entity) of the set of statements at that level. \nRefer to Section 1.7 for a discussion concerning needs and requirements and the entity to which \nthey apply.  Refer to Section 1.8 concerning the differences between needs and requirements.   \nDesign input, design-to “what” requirements must not be any more detailed or specific than is",
  "they apply.  Refer to Section 1.8 concerning the differences between needs and requirements.   \nDesign input, design-to “what” requirements must not be any more detailed or specific than is \nappropriate for the level of the entity at which they are stated, not “how” the requirement should \nbe met via design.  However, design output, build-to/code-to “how” requirements purpose is to \ncommunicate to the builders/coders the agreed-to design, so they will reflect implementation.  \nTo avoid confusion, many organizations refer to design output requirements as “specifications” \nthat often include parts lists, drawings, wiring diagrams, plumbing diagrams, labeling diagrams \nand requirements, logic diagrams, algorithms, Computer-aided Design (CAD) files, or STL files \n(for 3D printing).  For the purposes of this Guide, the focus is on design input needs and \nrequirements as shown in Figure 2. \nThe Design Input Requirements avoid placing unnecessary constraints on the design at the given",
  "requirements as shown in Figure 2. \nThe Design Input Requirements avoid placing unnecessary constraints on the design at the given \nlevel.  The goal for Design Input Requirements is to be implementation independent.  There may \nbe cases where there is good rationale for stating implementation.  When this happens, the \nrationale must be included to make it clear why the specific implementation needs to be stated as \na constraint to the design.  \nA useful question to ask of a requirement is “for what purpose?” or “why?” If the requirement is \nexpressed in implementation terms (design output), the answer to this question may be the real \nrequirement (design input).  \nIn the first example (how), verification could be by “inspection” counting the number of engines.  \nIn the second example (what), by asking the question “Why?”, the real requirement is stated, and \nverification would be done by “test”, disabling one engine during flight and ensuring the",
  "In the second example (what), by asking the question “Why?”, the real requirement is stated, and \nverification would be done by “test”, disabling one engine during flight and ensuring the \noperational requirements for the aircraft can still be met. (Note: missing from this example are the \noperational conditions to which this requirement applies.) \nAnother useful question is to ask of a requirement is “what do you want to verify?”  For example: \nThe <aircraft> shall include Flight_Performance Instrumentation.” as opposed to: \nThe <aircraft> shall measure <xxxx Flight_Performance parameter> having the characteristics \ndefined in <Flight_Performance Data Dictionary yyyy> during operations. \nIn the first example, there could be instrumentation (how), but it may not obtain the needed flight \nperformance parameters.  Verification could be by “inspection” indicating instrumentation can be \nobserved.  In the second example (what), verification would be done by “test” observing each",
  "performance parameters.  Verification could be by “inspection” indicating instrumentation can be \nobserved.  In the second example (what), verification would be done by “test” observing each \nflight performance parameter has the characteristics defined in the Flight_Performance Data \nDictionary. \nIt is good practice, once the next level entity requirements are written, for the project team to do a \n“leveling” exercise, to look at each requirement for the entity and determine whether it is at the \nappropriate level or should be moved down to a lower-level entity’s set of requirements or moved \nup to a higher-level entity’s set of requirements.",
  "Guide to Writing Requirements  41 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nAs noted earlier, an indication when writing and reviewing statements is whether the subject of \nthe statement is the subject of the set of statements for that entity at that level. \n \n2.4 C3 - Unambiguous  \nDefinition: \nN eed statements and requirement statements must be stated such that their intent is clear and \ncan be interpreted in only one way by all the intended audiences. \n \nRationale: \nA need statement and a requirement statement must lend itself to a single interpretation of intent.   \nThese statements are effectively an agreement between two parties communicating intent from \none to the other and forming the basis of verification and validation that the intent was met. An \nagreement is difficult to enact unless both parties are clear on the exact obligation.   \nAs shown in Figure 11, the intent of a need or requirement must be understood, in the same way,",
  "agreement is difficult to enact unless both parties are clear on the exact obligation.   \nAs shown in Figure 11, the intent of a need or requirement must be understood, in the same way, \nby all intended audiences across the lifecycle.  \n  \nFigure 11: Needs and R equirements Understood in the Same Way  \nAmbiguity leads to interpretations of a need or requirement not intended by the author leading to \nproblems such schedule slips, budget overruns, or a failure of the SOI to pass system validation \nand not be accepted for its intended use; which could result in litigation and financial loss. \nAn ambiguous need or requirement is neither C orrect (C8) nor Verifiable/Validatable (C7).   \n \nGuidance: \nWhen writing a need or requirement statement, ask whether it could be interpreted more than one \nway.  It is common for people to interpret words based on their own set of filters, biases, and \nassumptions.  For example, if a person states: “I need a cream for wrinkles.” - what was the",
  "way.  It is common for people to interpret words based on their own set of filters, biases, and \nassumptions.  For example, if a person states: “I need a cream for wrinkles.” - what was the \nintended meaning of the word “for” – to “give”, “remove”, or “prevent”?   If someone goes to a \nbarber and states: “I need my hair shorter – I want it over my ears.” – what was the intended \nmeaning of the word “over” - “cover” or “above”? \nOften, people will use common words by themselves without using a modifier that helps the \nreceiver understand the context, and thus the intended meaning of the word used. It is a bad \npractice to assume that the meaning of the words used are understood the same way by all \nintended audiences. \n(Note: Refer to the NRM, Section 2.10, on a more detailed discussion on effective \ncommunications.) \nCustomers\nUsers\nProviders\n Verifiers/\nValidators\nOriginal figure created by L. Wheatcraft. Usage granted per the INCOSE Copyright Restrictions. All other rights reserved.",
  "Guide to Writing Requirements  42 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nFor needs, ask whether the need is Validatable (C7), that is, whether it is stated in such a way \nthat sufficient evidence can be obtained that the need has been met based on the wording of the \nneed statement without having to interpret the stakeholder intent or make assumptions of that \nintent.  \nFor a requirement ask whether the requirement is Verifiable/Validatable (C7), that is, whether it is \nstated in such a way that sufficient evidence can be obtained that the requirement has been met \nbased on the wording of the requirement without having to interpret the intended meaning or \nmake assumptions as to the intended meaning.  \nIt is useful for the stakeholders who are involved in the implementation of the needs and resulting \nrequirements or system verification and system validation to be involved in the definition, review,",
  "requirements or system verification and system validation to be involved in the definition, review, \nand baseline of the needs and resulting requirements.  When they see needs or requirements \nthat are ambiguous and the stakeholder’s intent is not clearly communicated, they can identify the \nissue and suggest an alternate, unambiguous wording of the need or requirement statement.   \nAs a minimum, it is recommended that the need or requirement owner(s) along with the \ndevelopment team and those involved in system verification and system validation do a \nwalkthrough of the need set or requirement set to ensure that needs and requirements are \nunderstood as intended, individually and as a set.  As discussed in Section 1.9, this activity is \nreferred to as needs validation or requirement validation. \nBecause a need expression or requirement expression includes both the statement and a set of",
  "referred to as needs validation or requirement validation. \nBecause a need expression or requirement expression includes both the statement and a set of \nattributes, attributes can be used to help address any ambiguities that may still exist even in the \nmost carefully worded need statement or requirement statement.   \nDue to the limitations of language, it may prove difficult to completely remove all ambiguity.  In \nthis case, the use of the Attribute, A1- Rationale, can be used to include contextual information to \nbetter understand the reason and source of the requirement and may provide additional insight of \nthe intent, helping to reduce ambiguity and provide some increased ability to apply the \n“reasonable person” test.  Supporting information or commentary on how and why the \nrequirement was formed can be included in the rationale.  By including rationale in each need and \nrequirement expression, readers do not have to assume this information—it is clearly stated for",
  "requirement was formed can be included in the rationale.  By including rationale in each need and \nrequirement expression, readers do not have to assume this information—it is clearly stated for \nall to see and understand in the same way. \nIn addition, Attribute, A39 - Additional Comments, may be used to add additional information \nbeyond what was included in the rationale.  Additional comments can be used to document \npossible issues with the need or design input requirement, any conflicts, status of negotiations, \nactions, design notes, implementation notes, etc.  Further, evaluation and prototyping of the \nsystem concept may have identified important guidelines for the implementation of the need or \nrequirement.  This information may be useful as the need or requirement is being reviewed and \nserves as a place to document information not addressed by other attributes. \nNote that the information contained within the attributes is meant to be informative in a",
  "serves as a place to document information not addressed by other attributes. \nNote that the information contained within the attributes is meant to be informative in a \ncontractual sense (not normative), because of this, the word 'shall' must not be used in any of the \ntext contained in attributes to help ensure the amplifying information is not inadvertently \ninterpreted to be an additional requirement. \nWhen text only makes it difficult to communicate the intent of complex requirement, the inclusion \nof a diagram or trace to a model may help remove the ambiguity.  See R23. \nAmbiguity of individual need and requirement statements can be assessed during early system \nverification and design verification activities discussed in the NRM and GtVV.",
  "Guide to Writing Requirements  43 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n2.5 C4 - Complete \nDefinition: \nThe need statement sufficiently describes the necessary capability, characteristic, constraint, \nconditions, or quality factor to meet the lifecycle concept or source from which it was transformed. \nThe requirement statement sufficiently describes the necessary capability, characteristic, \nconstraint, conditions, or quality factor to meet the need, source, or higher-level requirement from \nwhich it was transformed. \n \nRationale: \nAn agreement is not useful unless the obligation is complete and does not need further \nexplanation.   \nA well-formed need statement needs no further amplification to implement its intent and to define \nsystem validation success criteria, method, and approach. \nA well-formed requirement statement needs no further amplification to implement its intent and to",
  "system validation success criteria, method, and approach. \nA well-formed requirement statement needs no further amplification to implement its intent and to \ndefine system verification success criteria, method, and approach.  Examples include: \n• Functional requirements must include a performance characteristic to be complete and \nverifiable.  This can result in multiple requirements for a function, each with a different \nperformance characteristic. \n• Interface requirements should include a reference to the location of the agreement that \ndefines how the entity needs to interact with the entity to which it interfaces (for example, an \nInterface Control Document (ICD).   \n• Terms used within a need statement or requirement statement must be defined uniquely and \nunambiguously within the project glossary or Data Dictionary. \n• Requirements based on a standard or regulation must clearly communicate what the system",
  "unambiguously within the project glossary or Data Dictionary. \n• Requirements based on a standard or regulation must clearly communicate what the system \nmust do to meet the intent of the standard or regulation requirement from which it was \nderived.  \nAn incomplete need statement or requirement statement is not Verifiable/Validatable (C7) nor \nC orrect (C8) due to missing information (the need or requirement fails to address either “what”, \n“how well”, or “under what conditions”). \n \nGuidance: \nTo be complete, functional/performance requirements must have observable functions (“what”), \nmeasurable performance (“how well”) and a statement of conditions (“under what conditions” - for \nexample, triggering events, environments, states and modes).  Such requirements m ay be \ninsufficient to satisfy the need or higher-level requirement because of the omissions of these \ntypes of information that are needed to make clear the intent.",
  "insufficient to satisfy the need or higher-level requirement because of the omissions of these \ntypes of information that are needed to make clear the intent. \nWhile fully appreciating that a need or requirement may require some context, the need \nstatement or requirement statement itself should be a complete sentence that does not require \nreference to other need or requirement statements to be understood in its basic form.   \nIn another aspect of completeness, requirements should not refer to one another, nor should the \nunderstanding of the requirement assume the existence of a previous or subsequent requirement, \nnor the fact that the need or requirement is contained within a specific section of a document (that \nis, despite the content of the heading of the section containing a need or requirement, a complete \nstatement shall include or repeat the name of the SOI, even if it is already mentioned in the",
  "Guide to Writing Requirements  44 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nheading—see R25).  This is especially important when requirements are managed within an \napplication or database.  \nA need or requirement can refer to other documents that elaborate on the “how well” or “under \nwhat conditions” (for example an ICD, or data dictionary, or another external source).   \nReferring to these types of documents within a requirement statement is warranted in that when \ndealing with interactions between systems, it is critical that all parties involved are consistent and \nrefer to the same, agreed to definition on how the systems will interact across an interface \nboundary.   It would be dangerous if each party included their interpretation of the interaction \nwithin their requirements, which may be inconsistent to another party’s interpretation as it \nappears in their interface requirements. If they each include their own interpretation, they may not",
  "within their requirements, which may be inconsistent to another party’s interpretation as it \nappears in their interface requirements. If they each include their own interpretation, they may not \nbe able to interact as needed. \nIn the case of data dictionaries, the same logic applies.   When parameters, messages, and \ncommands have a role in an interaction, it is critical that all parties involved in the interactions \nunderstand the agreed-to characteristics of each entity involved in the interaction. \nW hen making referrals to other documents, requirements must refer specifically to the sections \nwithin the documents that apply.   \nIncomplete needs and requirements can be prevented through the use of patterns for the need or \nrequirement statement.  By following a specific pattern or template for a requirement statement, \nrequirements tend to be “more complete”, since these patterns provide guidance for specific",
  "requirement statement.  By following a specific pattern or template for a requirement statement, \nrequirements tend to be “more complete”, since these patterns provide guidance for specific \ninformation the requirement statement should include.  Even if there is a pattern defined for \nubiquitous needs and requirements, most requirements will not be ubiquitous.  Refer to R1 on the \nuse of a pattern or template and Appendix C for more detailed discussion on patterns and \ntemplates. \nExcept under exceptional circumstances, baselined requirement statements must not contain To \nBe Defined (TBD), To Be Specified (TBS), or To Be Resolved (TBR) clauses.  TBx should only be \nused during the analysis and definition process to indicate ongoing work but should not be in the \nfinal requirement set, particularly when that set is to be contained as a baseline in a contractual \narrangement.  Resolution of the TBx designation may be iterative, in which case there should be",
  "final requirement set, particularly when that set is to be contained as a baseline in a contractual \narrangement.  Resolution of the TBx designation may be iterative, in which case there should be \nan acceptable period for the TBx item to be resolved, determined by risks and dependencies.  If \nthe baselined set of requirement contains requirements with a TBx item, it must be made clear in \nsupplier or vendor agreements (for example, SOWs) who is responsible to resolve these items \nand when.  Refer to the NRM Section 14.2.4 for a detailed discussion concerning TBx \nmanagement and managing unknowns. It should be noted that this requires NLP/AI tools to be \nflexible and tailorable; that is, a rule that must be reinforced at other later stages must be able to \nbe ignored in the early stages. \nCompleteness of individual need and requirement statements can be assessed during early \nsystem verification and design verification activities discussed in the NRM and GtVV. \n \n2.6 C5 - Singular",
  "Completeness of individual need and requirement statements can be assessed during early \nsystem verification and design verification activities discussed in the NRM and GtVV. \n \n2.6 C5 - Singular \nDefinition: \nThe need statement or requirement statement should state a single capability, characteristic, \nconstraint, or quality factor.",
  "Guide to Writing Requirements  45 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nRationale: \nThe formal transformation from a lifecycle concept into a need can be a many -to-one, one-to-one \nor a one-to-many transformation, however, the resultant need statement(s) must each represent \na single thought, aspect, or expectation.  \nSimilarly, the formal transformation of a need, source, or allocated parent requirement into a \nrequirement can be a many -to-one, one-to-one, or a one-to-many transformation so the resultant \nrequirement statement(s) must each represent a single thought, aspect, or expectation.  \nThe effectiveness of several process activities associated with needs and requirements \ndefinition—such as decomposition, derivation, allocation, traceability, verification, and \nvalidation—depend on being able to identify singular statements.  For instance, the system \nverification information defined for a requirement can be far more precise when that requirement",
  "validation—depend on being able to identify singular statements.  For instance, the system \nverification information defined for a requirement can be far more precise when that requirement \naddresses a single capability, characteristic, constraint, or quality factor.   \nAdditionally, when verifying/validating the SOI against a need or requirement with multiple \naspects, if one aspect passes, but others fail, it is difficult to assess the verification/validation \nstatus of the SOI against that need or requirement as a whole. A need or requirement with \nmultiple thoughts is difficult to allocate and to trace to a higher-level requirement or source. \nA nonsingular need or requirement is neither Verifiable/Validatable (C7) nor C orrect (C8). \nRequirements patterns are useful ways to ensure singularity since each need or requirement \nshould conform with one and only one pattern (see Appendix C ). \n \nGuidance:",
  "Requirements patterns are useful ways to ensure singularity since each need or requirement \nshould conform with one and only one pattern (see Appendix C ). \n \nGuidance: \nKeep the need statement or requirement statement limited to one quality, characteristic, \ncapability, function, or constraint that is appropriate to the level at which the statement refers.   \nUnderstand how the statements fit into the allocation, traceability, verification, and validation \nphilosophy for the project.  \nUse the project standard patterns or templates for writing singular need and requirement \nstatements. \nAlthough a single need or requirement should consist of a single function, quality or constraint, it \nmay have multiple conditions under which the requirement is to be met. \nAvoid the use of the word “and”, R19, when it ties together multiple thoughts (phrases in the \nsentence), each of which may be allocated, and the SOI verification and validation success",
  "Avoid the use of the word “and”, R19, when it ties together multiple thoughts (phrases in the \nsentence), each of which may be allocated, and the SOI verification and validation success \ncriteria, method and approach are different for each.  The presence of the conjunction “and” in a \nneed or requirement statement (out of the condition block, where the AND should be understood \nas logical connector) should always prompt the writer to consider whether or not the statement is \nsingular – if not, then multiple needs or requirements should be defined, each addressing a \nsingular thought. \nThere are exceptions to the use of “and”.  Some organizations allow the use of “and” to join two \nactions that will always be allocated, traced, and verified or validated together.  For example, \nthere may be a requirement for a lit match to be extinguished and disposed into a container.  \nGiven that these two actions need to always be performed together (one action is never to be",
  "there may be a requirement for a lit match to be extinguished and disposed into a container.  \nGiven that these two actions need to always be performed together (one action is never to be \ncompleted without the other), organizations may allow both actions to be communicated within a \nsingle requirement.  In that case, however, it would be best to combine the two actions with a \nlogical “AND”—see R15.",
  "Guide to Writing Requirements  46 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n2.7 C6 - Feasible \nDefinition: \nThe need or requirement can be realized within entity constraints (for example: cost, schedule, \ntechnical, legal, ethical, safety) with acceptable risk. \n \nRationale: \nThere is little point in agreeing to an obligation for a need or requirement that is not feasible.  \nAgreeing to a need or requirement that cannot be realized with acceptable risk within constraints \noften results in project cost overruns and schedule slips.  Inherently unachievable needs and \nrequirements, such as 100% reliability, are at best a waste of time, and at worst lead to \nneedlessly expensive solutions. \nThe need or requirement is considered feasible if, when considered along with other needs or \nrequirements for a single system element (that is, a set of entity needs or requirements), it does \nnot cause an unacceptable cost, schedule, or risk impact during the entity’s lifecycle.",
  "requirements for a single system element (that is, a set of entity needs or requirements), it does \nnot cause an unacceptable cost, schedule, or risk impact during the entity’s lifecycle. \nAn infeasible need or requirement cannot be satisfied because it: \na. breaks the laws of physics,  \nb. violates laws or regulations in an applicable jurisdiction,  \nc. conflicts with another requirement and cannot be concurrently satisfied, or \nd. leads to excessive program risk because of technical immaturity or inadequate margin with \nrespect to program cost and schedule as a function of lifecycle phase. \nAn infeasible need or requirement is neither verifiable (C7) nor correct (C8). \n \nGuidance: \nFeasible implies the existence of a possible solution to satisfying a concept, need, or \nrequirement.   \nAs stated in the definitions for needs and requirements, requirements are transformed from \nneeds.  With this in mind, if the organization has not defined a feasible set of lifecycle concepts",
  "As stated in the definitions for needs and requirements, requirements are transformed from \nneeds.  With this in mind, if the organization has not defined a feasible set of lifecycle concepts \nand assessed the maturity of the critical technologies, then the needs derived from those \nconcepts may not be feasible, nor will the requirements transformed from those needs be \nfeasible.  \n \nFigure 12: Needs or Requirements Feasibility Bucket \nCost Schedule\nTechnology\nReserves\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nAdd Remove\nRisk\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nRqmts\nOriginal figure created by L. Wheatcraft. Usage granted per the INCOSE Copyright Restrictions. All other rights reserved.",
  "Guide to Writing Requirements  47 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nTherefore, in most cases determining whether the need or requirement is feasible is difficult \nwithout an underlying assessment and analysis of the proposed lifecycle concepts from which the \nneeds are derived, and requirements transformed.   \nAs shown in Figure 12, before allowing a need into the set, an assessment of the feasibility of the \nchosen lifecycle concepts must be made in terms of the drivers and constraints including the \nmaturity of critical technologies, cost, schedule, resources, regulations, higher level requirements, \nand risk.   \nIf not feasible within the stated constraints with acceptable risk, the need and resulting \nrequirement should not be included in the set.  Doing so can negatively impact cost and schedule \nand can result in a requirement that the entity cannot be verified to meet. The measurement of",
  "requirement should not be included in the set.  Doing so can negatively impact cost and schedule \nand can result in a requirement that the entity cannot be verified to meet. The measurement of \nfeasibility is not always easy to assess as it is based on the degree of risk in successfully \nimplementing the requirement within program constraints. See the NRM for a more detailed \ndiscussion of the feasibility bucket shown in Figure 12. \nA useful tool for assessing risk is the use of Technology Readiness Levels (TRLs) to determine \nand compute the maturity of an essential technology—a lower TRL represents more risk to the \nproject than a higher TRL.  As discussed in the NRM, as part of risk assessment and during \nlifecycle concept analysis and maturation, essential technologies are identified, their TRL and \nAdvancement Degree of Difficulty (AD2) assessed, and a technology maturation plan developed",
  "lifecycle concept analysis and maturation, essential technologies are identified, their TRL and \nAdvancement Degree of Difficulty (AD2) assessed, and a technology maturation plan developed \nthat will result in the essential technology maturity to advance such that it will be feasible in time \nconsistent with the system development schedule.  Low technical maturity technologies needed \nfor required performance represent a risk to the project and as such this risk must be managed \nclosely. \nOther useful tools include modeling and prototyping to evaluate the feasibility of individual needs \nand requirements and subsets of needs and requirements.  This means that the design team \nmust be included in an integrated, multidiscipline, collaborative team responsible for the lifecycle \nconcept and needs definition activities to assess the feasibility of a lifecycle concept in terms of \nphysical implementation of the functional or conceptual model as discussed in the NRM and \nGtNR .",
  "physical implementation of the functional or conceptual model as discussed in the NRM and \nGtNR . \nIn some cases, we can recognize and avoid needs and requirements that are clearly impossible \nor unrealistic (see R26).  More often, feasibility must be examined for sets of needs or \nrequirements associated with a single entity to ensure there is no conflict within the set of \nrequirements (C12 ).  \nFeasibility of individual need and requirement statements can also be assessed during early \nsystem verification and design verification activities discussed in the NRM and the GtVV. \n \n2.8 C7 – Verifiable/Validatable \nDefinition: \nThe need statement is structured and worded such that its realization can be validated to the \napproving authority’s satisfaction. \nThe requirement statement is structured and worded such that its realization can be verified to \nthe approving authority’s satisfaction.",
  "Guide to Writing Requirements  48 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nRationale: \nUnless a need statement is written in a way that allows requirement validation, design validation, \nand system validation, there is no way to tell whether it has been satisfied and that the \nexpectation has been met.  \n• Each need statement must include the necessary information such that validation success \ncriteria can be defined, and the SOI can be validated such that sufficient evidence can be \ngathered to determine whether the success criteria have been met, that is, there is no \nambiguity regarding what the need statement communicates and there are no missing \ncharacteristics within the need statement, that is, it has the characteristics for well-formed \nneed statements as defined in this Section.  \n• An unvalidatable need can result in multiple, objective observers (for example, requirement",
  "need statements as defined in this Section.  \n• An unvalidatable need can result in multiple, objective observers (for example, requirement \nwriters, architects, designers, or testers) interpreting the need differently making it difficult to \nvalidate that the requirement, design, and SOI meets the need.  \nUnless a requirement statement is written in a way that allows design verification and system \nverification, there is no way to tell if it has been satisfied and that the obligation has been met.  \n• Each requirement statement must include the necessary information such that verification \nsuccess criteria can be defined, and the SOI can be verified such that sufficient evidence can \nbe gathered to assess whether the success criteria has been met, that is, there is no \nambiguity regarding what the requirement statement communicates and there are no missing \ncharacteristics within the requirement statement, that is, it has the characteristics for well-",
  "ambiguity regarding what the requirement statement communicates and there are no missing \ncharacteristics within the requirement statement, that is, it has the characteristics for well-\nformed requirement statements as defined in this Section.  \n• An unverifiable requirement can result in multiple, objective observers (for example, designers \nor testers) interpreting the requirement differently, making it difficult to verify the design and \nSOI meets the requirement.  \nVerifiability and validatability is a necessary condition for establishing the other characteristics of \nneed and requirement statements defined in this Section.  Therefore, verifiability and validatability \nshould be addressed as the initial criterion and a basis for ensuring these other characteristics. \n \nGuidance: \nIt is important not to confuse the phrases “need verification”, “need validation”, “requirement \nverification”, and “requirement validation” as opposed to “design verification”, “design validation”",
  "It is important not to confuse the phrases “need verification”, “need validation”, “requirement \nverification”, and “requirement validation” as opposed to “design verification”, “design validation” \n“system verification”, or “system validation” as shown in Figure 7 and discussed in Section 1.9.   \nThis characteristic, verifiable/validatable, is about design and system verification and \nrequirement, design, and system validation—showing that a requirement can be validated against \nthe need from which it was transformed, the design can be verified/validated such that, when \nrealized, will result in a SOI that meets a requirement/need, and verifying/validating that the \nrealized SOI meets a requirement/need. \nWrite each requirement/need statement in a way that allows the design or system to be \nverified/validated that the requirement/need has been met by one of the four standard \nverification/validation methods (inspection, analysis, demonstration, or test).  Essentially, this",
  "verified/validated that the requirement/need has been met by one of the four standard \nverification/validation methods (inspection, analysis, demonstration, or test).  Essentially, this \nmeans ensuring that each need and requirement statement is well-formed having all the other \ncharacteristics defined in this Section.",
  "Guide to Writing Requirements  49 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n2.9 C8 - Correct \nDefinition: \nThe need statement must be an accurate representation of the lifecycle concept or source from \nwhich it was transformed.   \nThe requirement statement must be an accurate representation of the need, source, or higher-\nlevel requirement from which it was transformed. \n \nRationale: \nCorrect implies “no errors” both from the perspective of the inclusion of incorrect information, the \nomission of required information, and avoidance of ambiguous wording. These aspects are very \nsimilar to those in other disciplines such as NLP  with the classical human filters of generalization, \ndeletion, and distortion. \nIncorrect information can mean having the wrong: \n• values, \n• functions, \n• conditions, or  \n• other characteristics identified in the need or requirement. \nAn incorrect need can result in a need that does not reflect the intent of the lifecycle concept or",
  "• functions, \n• conditions, or  \n• other characteristics identified in the need or requirement. \nAn incorrect need can result in a need that does not reflect the intent of the lifecycle concept or \nsources from which it was transformed.  An incorrect need can result in incorrect requirements \ntransformed from that need. An incorrect requirement can result in a requirement that does not \nreflect the intent of the need, source, or higher-level requirement from which it was transformed.   \nThe need or requirement cannot be correct if it does not have the characteristics: Necessary \n(C1), Unambiguous (C3), Complete (C4), Feasible (C6), Verifiable/Validatable (C7), and \nConforming (C9). \n \nGuidance: \nNeeds are transformed from a source (such as lifecycle concepts, stakeholder expectations, \ndrivers and constraints, goals, objectives, and risks) defined as part of the lifecycle concept and \nneeds definition activities discussed in the NRM and GtNR.    \n \nFigure 14: Needs Validation",
  "drivers and constraints, goals, objectives, and risks) defined as part of the lifecycle concept and \nneeds definition activities discussed in the NRM and GtNR.    \n \nFigure 14: Needs Validation \nImplemented by\nLifecycle Concept \nAnalysis \nMaturation\nOrganizational \nRequirements  for \ndefining\nlifecycle  concepts\nDrive\nTransformation\nNeeds Analysis\n• Problem or opportunity\n• MGOs\n• Measures\n• Stakeholder real-world \nexpectations\n• Use cases, user stories, \nsystem concepts, OpsCon, \nConOps\n• Higher-level Needs\n• Higher-level Requirements\n• Higher-level lifecycle concepts\n• Drivers & constraints,\n• External systems\n• Standards\n• Regulations\n• Technology\n• Operating Environment \n• Risks \nOrganizational \nRequirements for \ndefining needs\nNeeds\nVerification\nDrive\nConcept\nVerification\nLifecycle \nConcepts\nDo the lifecycle concepts and integrated \nset of needs represent a system of interest \nthat can accomplish its intended use in its \noperational environment when operated",
  "Lifecycle \nConcepts\nDo the lifecycle concepts and integrated \nset of needs represent a system of interest \nthat can accomplish its intended use in its \noperational environment when operated \nby its intended users?\nNeeds\nValidation\nNeeds\nValidation\nConcept\nValidation\nIntegrated Set \nof Needs\nBusiness & Mission Analysis and \nStakeholder Needs and \nRequirements Definition Processes\nINCOSE SE Handbook \nDesign Input \nRequirements \nDefinition\n“Are the needs defined \ncorrectly?” “Are the lifecycle \nconcepts defined \ncorrectly?” \n“Do the needs communicate \nthe intent of the lifecycle \nconcepts?”\n“Do the needs communicate the \nintent of the stakeholders?”\n“Do the lifecycle concepts \nreflect the intent of the \nstakeholders?”\nTransformation\nOriginal figure created by M. Ryan and  L. Wheatcraft. Usage granted per the INCOSE Copyright Restrictions. All other rights reserved.",
  "Guide to Writing Requirements  50 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nAs shown in Figure 14, the resulting needs transformed from these sources must be validated to \nensure that the need statement communicates the right thing (intent) and reflects an accurate and \nunambiguous: \n• interpretation of the concept, stakeholder expectation, drivers and constraints, goals, \nobjectives, risks, and other sources from which it was transformed; \n• understanding of the problem or opportunity and underlying goals and objectives; \n• representation of any model or diagram from which the need was extracted so the need \ntraces to the model; and \n• representation of any underlying analysis and assumptions that were part of the \ntransformation. \nUse a defined development and management process to ensure accuracy of the transformation \nin the context of the individual need as well as the other needs in the set.",
  "transformation. \nUse a defined development and management process to ensure accuracy of the transformation \nin the context of the individual need as well as the other needs in the set.  \nRequirements are transformed from a need, source, or higher-level requirement.  The resulting \nrequirements must be validated to ensure that the requirement statement communicates the right \nthing and that achievement of the requirement, as written, will result in meeting the intent of the \nneed, source, or higher-level requirement from which it was transformed. \n  \nFigure 15: Requirements Validation \nAs shown in Figure 15, validate that the requirement statement reflects an accurate and \nunambiguous: \n• interpretation of the need, source, or higher-level requirement from which it was transformed; \n• representation of the model or diagram from which the requirement was extracted so the \nrequirement traces to the model or diagram; and",
  "• representation of the model or diagram from which the requirement was extracted so the \nrequirement traces to the model or diagram; and \n• representation of the underlying analysis and assumptions that were part of the \ntransformation. \nAs discussed in Section 1.9, perform the needs and requirements validation described in the \nNRM and GtNR to ensure correctness of the transformation in the context of the individual need \nand requirement statements as well as the complete sets of needs and requirements. \nCorrectness of individual need and requirement statements can also be assessed during early \nsystem verification and design verification activities discussed in the NRM and GtVV. \n \nTransformation\nDesign Input \nRequirements \nDefinition\nArchitecture & \nDesign\nDefinition\nOrganizational \nRequirement \nDefinition \nRequirements\nRequirements\nVerification\nRqmts Validation\n“Are we building the \nright thing?”\n“Are the requirements \ndefined correctly?” \nDrive\nDesign Inputs\nTransformation",
  "Requirement \nDefinition \nRequirements\nRequirements\nVerification\nRqmts Validation\n“Are we building the \nright thing?”\n“Are the requirements \ndefined correctly?” \nDrive\nDesign Inputs\nTransformation\nDesign Input \nRequirements\nDesign Output\nSpecifications\nIntegrated Set \nof NeedsLifecycle Concepts & \nNeeds Definition\nOriginal figure created by M. Ryan and  L. Wheatcraft. Usage granted per the INCOSE Copyright Restrictions. All other rights reserved.",
  "Guide to Writing Requirements  51 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n2.10 C9 - Conforming \nDefinition: \nStatements and expressions of individual needs and requirements should conform to an \napproved standard pattern and style guide or standard for writing and managing needs and \nrequirements.   \n \nRationale: \nWhen needs and requirements within the same organization have the same look and feel, each \nneed statement and requirement statement is easier to be written, understood, and reviewed.   \nFurther, when conforming to an approved standard, the quality of the individual need statement \nand requirement statement will improve, as will the quality of the need set, and the requirement \nset. \nFor the derivation of a need from a lifecycle concept to be formal, the structure of the resultant \nneed statement must also be formal.   \n• For example, all needs may be required to be structured according to a specific pattern",
  "need statement must also be formal.   \n• For example, all needs may be required to be structured according to a specific pattern \ndefined by the organization for the type of need statement: “The <stakeholders> need the \n<subject clause> to <action verb clause> <object clause>, <optional qualifying clause>.”   \nFor the transformation from a need statement to a requirement statement to be formal, the \nstructure of the resultant requirement statement must also be formal.   \n• For example, all requirement statements may be required to be structured according to a \nspecific pattern defined by the organization for the type of requirement statement: “When \n<condition clause>, the <subject clause> shall <action verb clause> <object clause>, \n<optional qualifying clause>.”  \nConforming to standards and templates for need statements and requirement statements: \n• provides a template for wording associated with the different types of needs and \nrequirements;",
  "Conforming to standards and templates for need statements and requirement statements: \n• provides a template for wording associated with the different types of needs and \nrequirements; \n• provides consistent wording prevents ambiguity for engineers being exposed to new types of \nneeds and requirements they are managing; and \n• will help to identify missing information resulting in the characteristics of C omplete (C10), \nU nambiguous (C3) and Verifiable/Validatable (C7). \nSee R1 for more detail on need statements and requirement statements formats and Appendix C \nfor more detailed information on the use of templates and patterns. \n \nGuidance: \nOrganizations must have well-defined standards, processes, and methods for needs and \nrequirements definition and management.  These standards and processes must include rules for \ndefining well-formed need statements and requirement statements, checklists to assess the",
  "requirements definition and management.  These standards and processes must include rules for \ndefining well-formed need statements and requirement statements, checklists to assess the \nquality of the need statements and requirement statements, and templates for allowable \nstructures for need statements and requirement statements.  For example, all need statements, \nand requirement statements may be required to have the characteristics and be written in \naccordance with the rules contained in this Guide.   Appendix D provides a matrix that maps the \napplicability of each rule to need statements and requirement statements in order to provide \nreaders with a clearer understanding of the applicability of the guidance provided by each rule. \nIn many instances, there are applicable government and industry standards with which \ncompliance is required.  When developing needs and requirements for a customer, the customer",
  "In many instances, there are applicable government and industry standards with which \ncompliance is required.  When developing needs and requirements for a customer, the customer \nmay have their own process, standards, checklists, and patterns.  The organization responsible",
  "Guide to Writing Requirements  52 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nfor defining the need statements and requirement statements may need to conform to the \ncustomer’s processes and standards.  \nOnce a set of needs or a set of requirements has been defined, the organization must have an \napproval, baselining, and configuration management process defined.  As shown in Figures 16 \nand 17, this process must include verification of the needs and requirements quality per the \norganization’s defined standards.  It is this verification that will help establish this characteristic. \n  \nFigure 16: Needs Verification \n  \nFigure 17: Requirements Verification \nRefer to the GtNR or similar guide for documenting an organization’s standards, processes, \nchecklists, and work instructions for defining lifecycle concepts, needs, and requirements. \nRefer to both the NRM and GtNR for detailed guidance on validation and verification of needs \nand requirements.   \nImplemented by",
  "Refer to both the NRM and GtNR for detailed guidance on validation and verification of needs \nand requirements.   \nImplemented by\nLifecycle Concept \nAnalysis \nMaturation\nOrganizational \nRequirements  for \ndefining\nlifecycle  concepts\nDrive\nTransformation\nNeeds Analysis\n• Problem or opportunity\n• MGOs\n• Measures\n• Stakeholder real-world \nexpectations\n• Use cases, user stories, \nsystem concepts, OpsCon, \nConOps\n• Higher-level Needs\n• Higher-level Requirements\n• Higher-level lifecycle concepts\n• Drivers & constraints,\n• External systems\n• Standards\n• Regulations\n• Technology\n• Operating Environment \n• Risks \nOrganizational \nRequirements for \ndefining needs\nNeeds\nVerification\nDrive\nConcept\nVerification\nLifecycle \nConcepts\nDo the lifecycle concepts and integrated \nset of needs represent a system of interest \nthat can accomplish its intended use in its \noperational environment when operated \nby its intended users?\nNeeds\nValidation\nNeeds\nValidation\nConcept\nValidation\nIntegrated Set \nof Needs",
  "that can accomplish its intended use in its \noperational environment when operated \nby its intended users?\nNeeds\nValidation\nNeeds\nValidation\nConcept\nValidation\nIntegrated Set \nof Needs\nBusiness & Mission Analysis and \nStakeholder Needs and \nRequirements Definition Processes\nINCOSE SE Handbook \nDesign Input \nRequirements \nDefinition\n“Are the needs defined \ncorrectly?” “Are the lifecycle \nconcepts defined \ncorrectly?” \n“Do the needs communicate \nthe intent of the lifecycle \nconcepts?”\n“Do the needs communicate the \nintent of the stakeholders?”\n“Do the lifecycle concepts \nreflect the intent of the \nstakeholders?”\nTransformation\nOriginal figure created by M. Ryan and  L. Wheatcraft. Usage granted per the INCOSE Copyright Restrictions. All other rights reserved.\nTransformation\nDesign Input \nRequirements \nDefinition\nArchitecture & \nDesign\nDefinition\nOrganizational \nRequirement \nDefinition \nRequirements\nRequirements\nVerification\nRqmts Validation\n“Are we building the \nright thing?”",
  "Requirements \nDefinition\nArchitecture & \nDesign\nDefinition\nOrganizational \nRequirement \nDefinition \nRequirements\nRequirements\nVerification\nRqmts Validation\n“Are we building the \nright thing?”\n“Are the requirements \ndefined correctly?” \nDrive\nDesign Inputs\nTransformation\nDesign Input \nRequirements\nDesign Output\nSpecifications\nIntegrated Set \nof NeedsLifecycle Concepts & \nNeeds Definition\nOriginal figure created by M. Ryan and  L. Wheatcraft. Usage granted per the INCOSE Copyright Restrictions. All other rights reserved.",
  "Guide to Writing Requirements  53 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nSection 3: Characteristics of Sets of Needs and Requirements \n \nThis section defines the characteristics of sets of needs and sets of requirements, provides \nrationale for the characteristics, and provides guidance for helping understand the \ncharacteristics.   \nThe achievement of the characteristics in this section is dependent on not only following the \nrules, but also doing the activities and analysis discussed in the NRM and GtNR and through \nthe use of attributes defined in the NRM. \nIn addition to writing individual need and requirement statements that have the characteristics \ndefined in the previous section, the following characteristics of a well-formed set of needs and \nset of requirements must also be considered. \nAppendix E contains cross reference matrices mapping the rules to the characteristics",
  "set of requirements must also be considered. \nAppendix E contains cross reference matrices mapping the rules to the characteristics \ndiscussed in this Guide as well as mapping concepts and activities and attributes discussed in \nthe NRM to the characteristics. \nThe characteristics discussed in this Guide for sets of needs and requirements can be grouped \nas follows: \nFormal Transformation. Given the set of needs \nand requirements is the result of a formal \ntransformation, the following characteristics of the \nneed and requirement set have been derived: \n• C10 - Complete \n• C11 - Consistent  \n• C15 - Correct \nAgreed-to Obligation.  Since the set of need and \nrequirements is to be a result of a fair agreement \nto meet an obligation, the following characteristics \nof the set have been derived: \n• C12 - Feasible \n• C13 - Comprehensible  \n• C14 - Able to be validated \n3.1 C10 - Complete \nDefinition:",
  "to meet an obligation, the following characteristics \nof the set have been derived: \n• C12 - Feasible \n• C13 - Comprehensible  \n• C14 - Able to be validated \n3.1 C10 - Complete \nDefinition: \nThe set of needs and set of requirements for an entity should stand alone such that it sufficiently \ndescribes the necessary capabilities, characteristics, functionality, performance, drivers, \nconstraints, conditions, interactions, standards, regulations, safety, security, resilience, and \nquality factors without requiring other sets of needs or sets of requirements at the appropriate \nlevel of abstraction. \n \nRationale: \nA set of needs or set of requirements is incomplete when  there are needs or requirements \nmissing.  Missing needs or requirements can result in significant shortcomings in the delivered \nproduct pertaining to needed functionality/performance, robustness, quality, or conformance \nresulting in a failure to validate the entity meets its needs and verify the entity meets its",
  "product pertaining to needed functionality/performance, robustness, quality, or conformance \nresulting in a failure to validate the entity meets its needs and verify the entity meets its \nrequirements. \nA set of needs or requirements cannot be complete if any individual need or requirement is not \ncomplete (C4).",
  "Guide to Writing Requirements  54 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nIf the formal derivation of needs from agreed-to lifecycle concepts and other sources results in \nindividual needs that are necessary, the set of needs must be a sufficient and “accurate” \nrepresentation of the lifecycle concepts and other sources from which they were transformed—\nthat is, all the needs that are necessary have been included to implement the lifecycle concepts \nand other sources, and that any needs that are unnecessary have been excluded. \nIf the formal transformation of needs, higher-level requirements, and other sources into \nrequirements results in individual requirements that are necessary, the set of requirements must \nbe a sufficient and “accurate” representation of the set of needs, higher-level requirements, and \nother sources for the entity from which they were transformed — that is, all necessary",
  "be a sufficient and “accurate” representation of the set of needs, higher-level requirements, and \nother sources for the entity from which they were transformed — that is, all necessary \nrequirements have been included and all unnecessary requirements have been excluded.  \nThe resulting set of requirements will not be complete if the set of needs from which they were \ntransformed was not complete. \n \nGuidance: \nThe goal is to clearly communicate the needs for an entity via a minimum set that are necessary \nand sufficient and no more and clearly communicate the requirements for an entity via a minimum \nset that is necessary and sufficient and no more.  This applies no matter the level in the \narchitecture the entity exists. \nNecessity and sufficiency of the requirement set can only be determined with respect to the set of \nneeds and other sources of requirements for the entity, and the higher-level requirements \nallocated to the entity.",
  "needs and other sources of requirements for the entity, and the higher-level requirements \nallocated to the entity.  \nCompleteness must also address the possible conditions a system may experience, including \nanomalies, safety, security, and resilience.  \nCompleteness therefore requires an additional analysis of all possible conditions to ensure that \nthe required behavior, functionality, and capabilities for specific conditions is consistent with \nstakeholder expectations.  These are the kinds of analysis (what if cases, mis-use cases, and \nloss scenarios) that might not be addressed as part of initial analysis because the focus was on \ndesired behavior, functionality, and capabilities under expected conditions.   The resulting needs \nand requirements derived from this additional analysis must be included for the set of needs and \nset of requirements to be complete.   \nO ff-nominal conditions may not arise until the system development is underway (or worse yet -",
  "set of requirements to be complete.   \nO ff-nominal conditions may not arise until the system development is underway (or worse yet - \nafter deployment) and represent risk across the lifecycle and difficulty in ensuring completeness.  \nUnspecified off-nominal conditions can be managed  using an “else” statement in the need \nstatements and requirement statements conditional clauses.  However, the required behavior \nunder these off-nominal scenarios must be validated by the stakeholders. \nFor each entity, the set of needs represents a complete definition of the stakeholder expectations, \nstakeholder needs and requirements, goals, objectives, lifecycle concepts, drivers, constraints, \nand risks to be mitigated whether explicitly stated or undocumented implicit expectations.   \nAddressing implicit stakeholder expectations, needs, and requirements is a key part of lifecycle \nconcept and needs definition activities and transforming the resulting set of needs into a set of",
  "Addressing implicit stakeholder expectations, needs, and requirements is a key part of lifecycle \nconcept and needs definition activities and transforming the resulting set of needs into a set of \nrequirements that when realized will result in an entity that meets those needs, even if not \noriginally stated.  Any implicit needs should be captured and included explicitly in the set of \nneeds.  It is the responsibility of those defining the set of needs, to establish bi-directional \ntraceability between each need and its source. \nA complete set of requirements set represents a complete transformation of the set of needs for \nan entity as well as a complete transformation of higher-level requirements that were allocated to",
  "Guide to Writing Requirements  55 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nthe entity into a necessary and sufficient set of child requirements, that when implemented, will \nresult in the intent of the allocated higher-level requirements being met. \nIt is the responsibility of owners of the allocated requirements to ensure these child requirements \nexist and the responsibility of the owners of the receiving entity to 1) validate the allocations were \ncorrect, 2) develop a necessary and sufficient set of child requirements, 3) provide bi-directional \ntraceability between the child requirements and their parent and 4) notify the owners of the \nhigher-level entity whenever a parent requirement is missing. \nAs an example, a set of software requirements may not be complete because not all relevant \nchild requirements may be considered by the software architect if hardware limitations (for",
  "As an example, a set of software requirements may not be complete because not all relevant \nchild requirements may be considered by the software architect if hardware limitations (for \nexample, bandwidth, reliability, latency) are ignored.  The hardware requirements and limitations \nmay be missing or inconsistent with the assumed software architecture and software \nrequirements.  Therefore, it is important to consider the macro system of which the software is a \npart and include hardware stakeholders that can be the source of these missing needs and \nrequirements. \nStakeholders are a primary source of needs and requirements; leaving out a relevant stakeholder \ncould result in missing or incorrect needs and the resulting requirements, resulting in expensive \nand time-consuming rework. \nWith increasingly complex, software-intensive systems it is almost impossible for a person or \neven a group of people to completely understand and manage every aspect of an entity.  A key",
  "With increasingly complex, software-intensive systems it is almost impossible for a person or \neven a group of people to completely understand and manage every aspect of an entity.  A key \ntool to help define and manage these complex systems is the use of diagrams and modeling to \nensure what is needed is included and what is not needed is excluded. \nIn the case of interactions across interface boundaries, the interface requirements need to refer to \nwhere the interaction between the entity and other entities is defined.  In the case of standards \nand regulations, needs should reference the specific requirements that apply to the SOI, rather \nthan the whole document.  The set of requirements would then include derived requirements \nconcerning what the entity must do to meet the need. \nCompleteness can be facilitated through traceability, allocation, and budgeting. It is the \nresponsibility of those defining the set of and resulting set of requirements to establish bi-",
  "Completeness can be facilitated through traceability, allocation, and budgeting. It is the \nresponsibility of those defining the set of and resulting set of requirements to establish bi-\ndirectional traceability between each need and lifecycle concept and other sources the needs \nwere derived and between each requirement and the need, higher-level requirements, or other \nsource the requirement is being transformed.  \nCompleteness of the sets of needs and requirements can be assessed during early system \nvalidation as well as during design validation activities discussed in the NRM and GtVV. \nCompleteness of the sets of needs and requirements can also be facilitated through the use of \ntemplates for organizing sets of needs and requirement.  Each organization will define types or \ncategories in which a need or requirement fits, based on how they may wish to organize the \nrequirements.  Organizing by type/category is useful because it allows the stakeholders to view",
  "categories in which a need or requirement fits, based on how they may wish to organize the \nrequirements.  Organizing by type/category is useful because it allows the stakeholders to view \nthe sets of needs and requirements from a variety of perspectives.  Each of these perspectives \nrepresents unique needs and requirements.  Completeness can be aided by addressing each \nperspective.   See R42  for examples of use of types/categories of needs and requirements such \nas functional/performance, fit (operational), form (physical attributes), quality (-ilities), and \ncompliance (regulations and standards). \nRefer also to the NRM and GtNR for additional guidance concerning completeness of sets of \nneeds and sets of requirements.",
  "Guide to Writing Requirements  56 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n3.2 C11 - Consistent \nDefinition: \nA set of needs and a set of requirements is consistent if contains individual needs or \nrequirements that are: \n• unique; \n• do not conflict with or overlap with others in the set;  \n• makes use of homogeneous units and measurement systems; and \n• are developed using a consistent language (that is, the same words are used throughout the \nset to mean the same thing); and use terms that are consistent with the architectural model, \nproject glossary, and project data dictionary. \n \nRationale: \nConflicting needs and requirements lead to an infeasible solution space, and, if not identified \nearly in the development process, can lead to expensive rework.  \nFor the transformation to be formal, the resultant set of individual needs and requirements must \nnot conflict and must be consistent with each other.",
  "For the transformation to be formal, the resultant set of individual needs and requirements must \nnot conflict and must be consistent with each other. \nEven if individual needs or requirements are unambiguous, the inconsistent use of terms, \nabbreviations, units, and measurement systems in different requirements results in ambiguity in \nthe set of needs and set of requirements.  \nNeeds and requirements that are inconsistent and conflicting with other needs and requirements \nare not C orrect (C8).  \nNeeds and requirements that are inconsistent and conflicting with other needs and requirements \nalso result in a set of needs or requirements that are not Feasible (C12), are not Comprehensible \n(C13), and that are not Able to be Validated (C14). \n \nGuidance: \nFrequently, customer and other relevant stakeholder expectations or design constraints conflict \nwith one another and need to be reconciled.",
  "Guidance: \nFrequently, customer and other relevant stakeholder expectations or design constraints conflict \nwith one another and need to be reconciled.   \nIt is a challenge to identify conflicts between needs and requirements when the set of needs and \nset of requirements is large, as is often the case in today’s increasingly complex, software-\nintensive systems.  \nIt is important to avoid duplicate needs and requirements.  Given the number of needs and \nrequirements there may be multiple people inputting needs or requirements into the sets.  A \ncommon issue is each of these people may use slightly different words to communicate a need or \nrequirement that is addressing a single intent or action.  This can lead to duplicate needs or \nrequirements in the set.  For example, one person may focus on requirements for an aircraft \nconcerning airspeed, while another my person may add a requirement concerning flight",
  "requirements in the set.  For example, one person may focus on requirements for an aircraft \nconcerning airspeed, while another my person may add a requirement concerning flight \nperformance measures, listing the specific flight performance measures in a data dictionary.  \nSome duplication can be avoided through defining approved terms in a data dictionary or \nglossary and restricting the use of terms used in the various artifacts (including needs and \nrequirements), to only those that are approved.  Using NLP/AI tools to assist in the crafting of \nneed and requirement statements can help enforce the use of only approved terms. \nAs discussed in the NRM  and GtNR, it is important to identify and link dependent needs and \nrequirements that have relationships with other requirements, either directly or indirectly.  This is",
  "Guide to Writing Requirements  57 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nespecially an issue when one need or requirement is changed without making a corresponding \nchange to the other dependent need(s) or requirement(s).   \nC oncepts to help prevent this type of inconsistency include allocation, budgeting, and linking \n(trace) dependent requirements to each other.  When allocating and budgeting functionality, \nperformance, or quality requirements to lower-level entities of the architecture, in many cases the \nresulting child requirements are dependent.  To ensure consistency throughout the development \nlifecycle, these dependent requirements need to be linked together to ensure consistency is \nmaintained when changes occur. \nIt can be difficult to identify conflicts merely through the language used to express individual need \nand requirement statements, but it can be made easier by classifying and grouping like needs",
  "It can be difficult to identify conflicts merely through the language used to express individual need \nand requirement statements, but it can be made easier by classifying and grouping like needs \nand requirements together.  This can be facilitated through the use templates for organizing sets \nof needs and requirement.  G rouping like needs and requirements together will make it easier to \nidentify inconsistencies. \nSee R42  for examples of use of types/categories of needs and requirements such as \nfunctional/performance, fit (operational), form (physical attributes), quality (-ilities), and \ncompliance (regulations and standards).  \nAnother strategy is to have the need statement or requirement statement within a common type \nor category to follow the defined pattern defined for that type or category as discussed in \nAppendix C.  Using the pattern specific for a given type or category of need or requirement will \naid in consistency.",
  "Appendix C.  Using the pattern specific for a given type or category of need or requirement will \naid in consistency. \nAnother key tool is the use of diagrams and other models that show the relationships and \ndependencies within sets of needs and sets of requirements as well as between needs and the \nresulting requirements.  Using a software tool, such as diagraming and modeling, to manage \nrelationships and dependencies can help in identifying conflicts and manage these relationships \nand dependencies. \nConsistency in needs and requirements wording is greatly assisted using a centralized domain \nontology, glossary, and data dictionary that is shared among all stakeholders.  \nUse an NLP/AI supplication to evaluate need and requirement statements within a set using the \ndefied ontology, glossary, data dictionary, patterns, and templates to help establish consistency.  \nSome applications of this type can be used as a digital assistant during the formulation of a need",
  "Some applications of this type can be used as a digital assistant during the formulation of a need \nor requirement statement to both ensure the proper pattern or template for a given need or \nrequirement type is used as well as help ensure consistent use of terminology. \nPay special attention to interface requirements to make sure they are consistent with the interface \nrequirements for other entities with which the subject entity interacts.  Ideally, both entities are \nmanaged  within the same tool allowing interface requirements to be linked in applicable pairs and \ntraced to a common definition concerning the specific interaction addressed within the pair of \ninterface requirements (such as through the use of an ICD or a data dictionary). \nConsistency within and between the sets of needs and requirements can be assessed during \nearly system validation as well as during design validation activities discussed in the NRM and \nGtVV.",
  "Guide to Writing Requirements  58 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n3.3 C12 - Feasible \nDefinition: \nA set of needs and a set of requirements is feasible if it can be realized within entity constraints \n(such as cost, schedule, technical) with acceptable risk. \n \nRationale: \nJust as there is little point in agreeing to an obligation for an individual need or requirement that is \nnot feasible, the set of needs and set of requirements must be achievable within the appropriate \nconstraints including cost, schedule, and risk.    \nIf feasibility is not addressed early in the development process, it can lead to wasted effort and \ncost. \nA set of needs or set of requirements cannot be feasible if any of the individual needs or \nrequirements are not feasible (C6).  Feasibility of a specific need statement or requirement \nstatement must be determined in the context of all needs or requirements for a specific entity set",
  "requirements are not feasible (C6).  Feasibility of a specific need statement or requirement \nstatement must be determined in the context of all needs or requirements for a specific entity set \nand can be evaluated without regard to the sources from which they were derived. \nIf not feasible within the stated constraints with risk appropriated for that lifecycle stage, the set of \nneeds will not be feasible nor will be the resulting set of requirements that are transformed from \nthat set of needs. \nA set of requirements may not be feasible due to inconsistency (C11), physical impossibility, or \nexcessive program risk. \n \nGuidance: \nWhile individual need statements and requirement statements may be feasible, they may not be \nso when placed in combination with others.  That is, the combination of feasible individual needs \nor requirements does not necessarily sum to a feasible set of needs or feasible set of \nrequirements.",
  "or requirements does not necessarily sum to a feasible set of needs or feasible set of \nrequirements.   \nFor example, the following are feasible, individual requirements for a laptop computer: weighs \nless than 0.9 kg, has a storage capacity of 1 TByte, has 4 GByte of RAM, has a wireless network \ninterface, has an Ethernet network interface, has two USB -C  interfaces, has an HDMI interface, \ncan be dropped from 1 meter without damage, can survive in temperatures of ±50°C, and retails \nfor less than $900.  While each of those individual requirements seems perfectly feasible, even at \nfirst glance to a non-expert, we cannot be so readily sure that the set is feasible (that is, all \nrequirements can be met simultaneously).  As soon as we go past a couple of dimensions, our \nhuman intuition quickly deserts us.  \nIf the related individual needs or requirements are distributed throughout the need or requirement",
  "human intuition quickly deserts us.  \nIf the related individual needs or requirements are distributed throughout the need or requirement \nset, it is even more difficult to assess the feasibility of the set.  As was stated for individual need \nstatements and requirement statements, determining feasibility of a set of needs or set of \nrequirements is not always completely known and is often assessed in terms of acceptable risk \nconsistent with the development lifecycle stage. \nIn the solution space, there should be at least one, and preferably multiple, feasible sets of \nlifecycle concepts that will result in the problem being solved or opportunity to be realized that \ndrove the need for the SOI.  The lifecycle concepts should be technically feasible (such as in \nterms of technology maturity level and advancement), and feasible within the constraints of the",
  "Guide to Writing Requirements  59 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nproject (such as cost, schedule, technical, ethical, and regulatory compliance) with a level of risk \nconsistent with the lifecycle stage.   \nAs discussed in the NRM, as part of risk assessment and during lifecycle concept analysis and \nmaturation critical technologies are identified, their TRL and Advancement Degree of Difficulty \n(AD2) is assessed, and a technology maturation plan is developed that will result in the critical \ntechnology maturity to advance such that it will be feasible in time to meet the system \ndevelopment schedule.  These activities represent a risk to the project and as such this risk must \nbe managed closely. \nNeeds within the same entity set of needs are analyzed together with respect to program \nconstraints and technology maturity to determine feasibility.   \nBefore allowing a set of needs to be baselined, an assessment of the feasibility of the chosen",
  "constraints and technology maturity to determine feasibility.   \nBefore allowing a set of needs to be baselined, an assessment of the feasibility of the chosen \nlifecycle concepts should be made in terms of the drivers, project constraints (cost, schedule, \ntechnology), and risk.   \nFeasibility of a specific requirement must be determined in the context of all requirements for a \nspecific entity set and cannot be evaluated without regard to the higher-level requirements and \nother dependent child requirements of that higher-level requirement. \nRequirements within the set of requirements for the same entity are analyzed together with \nrespect to project constraints, technology maturity, and risk to determine feasibility.   \nFeasibility of the sets of needs and requirements can be assessed during early system validation \nas well as during design validation activities discussed in the NRM and GtVV. \nAdditional characteristics mapped to feasible include “Consistent” (C11) and “Able to be",
  "as well as during design validation activities discussed in the NRM and GtVV. \nAdditional characteristics mapped to feasible include “Consistent” (C11) and “Able to be \nvalidated” (C14).  \nAn approach that can be used is to consider the set of needs or requirements to be a “bucket” \nshown in Figure 12 which is bound by cost, schedule, and technology.  When adding individual \nneeds or requirements to the bucket, whether the individual needs or requirements “fit” within \nthese constraints must be determined.  When the bucket is full, the addition of any more needs or \nrequirements puts the project at increased risk.  The bucket analogy is also useful for addressing \nchange.  If a bucket is full, and someone wants to add an additional need or requirement to the \nbucket, the question of feasibility must be addressed.  Can the bucket be made bigger?  Can \nsomething of lower priority be taken out?  Is the project willing to accept more risk?  If the answer",
  "bucket, the question of feasibility must be addressed.  Can the bucket be made bigger?  Can \nsomething of lower priority be taken out?  Is the project willing to accept more risk?  If the answer \nis no, then the project must say no to the change.  Refer the NRM for a more detailed discussion \nconcerning the use of both the needs bucket and requirements bucket when addressing feasibility \nand risk. \nA sensitivity analysis may be a useful tool for the user and requirement writer to determine the \n'realm of the possible\" when aggregating many needs or requirements that may be individually \nfeasible, while not feasible in sum.  Through modeling, the users may be able to vary the needs \nor requirements while analyzing the resulting system performance.  This would allow optimization \nof the need or requirement set, reducing some (or all) to lower but yet acceptable levels, to \nimprove overall system performance.",
  "Guide to Writing Requirements  60 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n3.4 C1 3 - Comprehensible \nDefinition: \nThe set of needs and the set of resulting requirements must each be written such that it is clear \nas to what is expected of the entity and its relation to the macro system of which it is a part. \n \nRationale: \nAn agreement is difficult to enact unless both parties are clear on the exact obligation and the \nexpected outcome(s) as a result of the realization of the entity the set of needs and requirements \nrepresents.   \nThese sets must therefore be written such that the relevant audience can understand what is \nbeing communicated by the individual needs and requirements as well as the sets of needs and \nrequirements. \nTo be comprehensible, the sets of needs or requirements must be Complete (C10), C onsistent \n(C11), Feasible (C12), and Able to be Validated (C14).",
  "requirements. \nTo be comprehensible, the sets of needs or requirements must be Complete (C10), C onsistent \n(C11), Feasible (C12), and Able to be Validated (C14). \nA set of requirements is comprehensible if and only if all individual requirements in the set are \nNecessary (C1), Unambiguous (C3), Complete (C4), Feasible (C6), Verifiable/validatable (C7), \nand Correct (C8). \n \nGuidance: \nInformation needed to understand the context of the needs and requirements should be included \nwithin the set.  This includes useful information attached to the set that defines the context \ndefined during lifecycle concept and needs definition as well as attributes of the needs and \nrequirements such as rationale.   \nIn a document-centric practice of SE, this information is commonly included in the introductory \nmaterial at the beginning of a documented set of needs or requirements. In a data-centric practice",
  "In a document-centric practice of SE, this information is commonly included in the introductory \nmaterial at the beginning of a documented set of needs or requirements. In a data-centric practice \nof SE, this information can be documented with in the tool and linked to the set such that it can be \nincluded when the set is outputted in the form of a document.   \nUsing a data-centric practice of SE, it will be easier for the architects, designers, builders, coders, \nand testers if the underlying analysis (including models) is provided along with the sets of needs \nand requirements, or if the system engineers rely on a defined project data dictionary where the \ninformation can be centralized. \nUsing an integrated, collaborative, multidiscipline project team performing the development \nprocess activities concurrently will help stakeholders comprehend what is expected of the entity \nand its relation to the macro system of which it is a part.",
  "process activities concurrently will help stakeholders comprehend what is expected of the entity \nand its relation to the macro system of which it is a part. \nCoordinating with and getting agreement of the stakeholders and getting their feedback during \ndevelopment activities will help ensure the stakeholders and developers are on the same page. \nHaving a well-defined baseline process and involving the stakeholders in that process helps \nensure comprehensibility of the sets of needs and requirements. \nContinuous validation of artifacts across the lifecycle also will help ensure the artifacts are \ncomprehensible. \nComprehensibility of the sets of needs and requirements can be assessed during early system \nvalidation as well as during design validation activities discussed in the NRM and GtVV.",
  "Guide to Writing Requirements  61 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n3.5 C1 4 - Able to be Validated \nDefinition: \nIt must be possible to validate that the set of needs will lead to the achievement of the product \ngoals and objectives, stakeholder expectations, risks, and lifecycle concepts within the \nconstraints (such as cost, schedule, technical, legal and regulatory compliance) with acceptable \nrisk. \nIt must be possible to validate that the set of requirements will lead to the achievement of the set \nof needs and higher-level requirements within the constraints (such as cost, schedule, technical, \nand regulatory compliance) with acceptable risk. \n \nRationale: \nReferring to Figure 5, the transformation of lifecycle concepts into the Integrated Set of Needs \nand transformation of the Integrated Set of Needs into sets of Design Input Requirements must \nbe formal and able to be validated, not just for individual needs and requirements, but also for the",
  "and transformation of the Integrated Set of Needs into sets of Design Input Requirements must \nbe formal and able to be validated, not just for individual needs and requirements, but also for the \nsets of needs and requirements.   \n   \nFigure 18: Verification and Validation Across the Lifecycle \nAs shown in Figure 18, it must be able to be shown at any lifecycle stage that achievement of the \nIntegrated Set of Needs will result in a SOI that can be validated to meet the stakeholders' real-\nworld expectations. That is, “Are we building the right thing?” \nIt must also be able to be shown at any lifecycle stage that achievement of the set of Design Input \nR equirements transformed from the Integrated Set of Needs will result in a SOI that can be \nvalidated to satisfy those needs - Are we building the right thing? \nFor a set of needs or requirements to be able to be validated, the set must be Complete (C10), \nConsistent (C11), Feasible (C12), Comprehensible (C13), and Correct (C15).",
  "For a set of needs or requirements to be able to be validated, the set must be Complete (C10), \nConsistent (C11), Feasible (C12), Comprehensible (C13), and Correct (C15).   \nRefer to the NRM, GtNR , and GtVV for more details on validating sets of needs and sets of \nrequirements. \n \nGuidance: \nThe system lifecycle operational scenarios, concepts, and use cases—from which the needs \nwere transformed can be used as test cases to validate the sets of needs, sets of requirements, \nthe design, and built or coded SOI.  \nTransformation\nDesign Input \nRequirements \nDefinition\nArchitecture & \nDesign\nDefinition\nOrganizational \nRequirement \nDefinition \nRequirements\nTransformation\nSystem\nImplementation, \nIntegration\nProduction\nVerification\nRequirements\nVerification\nDesign\nVerification\nSystem Validation\nDesign Validation\nRqmts Validation\n“Are we building the \nright thing?”\n“Do we have the \nright design?”\nOrganizational \nArchitecture & \nDesign\nDefinition \nRequirements\nDesign \nVerification",
  "Design Validation\nRqmts Validation\n“Are we building the \nright thing?”\n“Do we have the \nright design?”\nOrganizational \nArchitecture & \nDesign\nDefinition \nRequirements\nDesign \nVerification\n“Did we build the \nright thing?” \n“Did we build \nit right?” \n“Did we design \nit right?” \n“Are the requirements \ndefined correctly?” \n“Did we design it \ncorrectly?” “Did we build it \ncorrectly?” \nSystem\nVerification\nDrive\nDrive\nDesign \nInputs\nDesign\nOutputs\nTransformation\nDesign Input \nRequirements\nDrive\nOrganizational \nSystem \nRealization\nRequirements\n“Did we build it \nright?” \nProduction\nVerification\nDesign Output\nSpecifications\nRealized \nSystem \nElement\nLifecycle Concepts \nand Needs \nDefinition\nTransition, \nOperation, \nMaintenance, & \nDisposal\nStakeholder \nReal-World\nExpectations\nPost Development \nValidation\n“Do we still have the  \nright system?” \nOrganizational \nLifecycle Concept \n& Needs \nDefinition \nRequirements\nNeeds\nVerification\n“Are the needs \ndefined correctly?” \nDrive\nIntegrated \nSet of",
  "“Do we still have the  \nright system?” \nOrganizational \nLifecycle Concept \n& Needs \nDefinition \nRequirements\nNeeds\nVerification\n“Are the needs \ndefined correctly?” \nDrive\nIntegrated \nSet of \nNeeds\nNeeds Validation\n“Are we building the \nright thing?”\nPost \nDevelopment \nVerification“Is the system still right?” \n“Are we operating, \nmaintaining, and \ndisposing it correctly?” \nOrganizational \nOperations, \nMaintenance, \n& Disposal\nRequirements\nOperations, \nMaintenance, & \nDisposal\nVerification\nDrive\nOperational \nSystem; \nMaintained \nSystem; \nDisposed \nSystem\nTransformation\nOriginal figure created by M. Ryan and  L. Wheatcraft. Usage granted per the INCOSE Copyright Restrictions. All other rights reserved.",
  "Guide to Writing Requirements  62 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nIn other words, the needs can be validated to meet the lifecycle concepts and other sources from \nwhich they were derived, and the requirements can be validated to meet the needs, higher-level \nrequirements, and other sources from which they were transformed by running tests based on the \nuse cases or operational scenarios developed during lifecycle concept and needs definition \nactivities discussed in the NRM and GtNR.  Doing so will result in evidence that the intended use, \ngoals, objectives and stakeholder expectations have been met within the agreed-to drivers and \nconstraints with acceptable risk.  \nDesign validation is conducted to ensure the transformation of the Design Input Requirements \ninto the design and resulting design output specifications will result in a system that meets its \nintended purpose/use in its operational environment as defined by the Integrated Set of Needs.",
  "into the design and resulting design output specifications will result in a system that meets its \nintended purpose/use in its operational environment as defined by the Integrated Set of Needs.  \nThus, design validation goes back to the needs to make sure they have been met—as a set.  \nSystem validation is conducted to ensure the built and verified system meets its intended \npurpose/use in its operational environment when operated by its intended users and does not \nenable unintended users to use the system in an unintended way.  Thus, system validation goes \nback to the Integrated Set of Needs, lifecycle concepts, and other sources to make sure they \nhave been met—as a set.   \nRefer to the NRM and GtVV for more details on design and system validation. \nFor the set of needs, ask the questions:  \n“Do the needs and set of needs clearly and correctly communicate the agreed-to lifecycle \nconcepts, drivers, constraints, risks, and stakeholder expectations?”",
  "“Do the needs and set of needs clearly and correctly communicate the agreed-to lifecycle \nconcepts, drivers, constraints, risks, and stakeholder expectations?” \n“Have we correctly and completely captured the needs the system must address?” \n“Are we building the right thing?”   \nFor the set of requirements ask the questions:  \n“Will the entity developed by this set of requirements satisfy the needs?”  \n“Are we building the right thing?” \nThese questions concerning the sets of needs and sets of requirements are a major focus during \nearly system validation as well as during design validation and system validation activities \ndiscussed in the NRM and GtVV. \n \n3.6 C1 5 - Correct \nDefinition: \nThe set of needs must be an accurate representation of the lifecycle concepts or sources from \nwhich it was transformed.   \nThe set of requirements must be an accurate representation of the needs, sources, or higher-\nlevel requirements from which it was transformed. \n \nRationale:",
  "which it was transformed.   \nThe set of requirements must be an accurate representation of the needs, sources, or higher-\nlevel requirements from which it was transformed. \n \nRationale: \nA correct set of needs implies “no errors” both from the perspective of the inclusion of incorrect \ninformation, the omission of required information, and avoidance of incorrect individual need \nstatements.  An incorrect Integrated Set of Needs does not reflect the true intent of the lifecycle \nconcept or sources from which it was transformed. \nA correct set of requirements implies “no errors” both from the perspective of the inclusion of \nincorrect information, the omission of required information, and avoidance of incorrect individual",
  "Guide to Writing Requirements  63 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nrequirement statements.  An incorrect set of requirements does not reflect the intent of the \nIntegrated Set of Needs, sources, or higher-level requirements from which it was derived.   \nThe set of needs or the set of requirements cannot be correct if it does not have the \ncharacteristics for sets of needs and sets of requirements: C10 - Complete, C11 - Consistent, \nC12 - Feasible, C13 - Comprehensible, and C14 - Able to be validated. \n \nGuidance: \nAs shown in Figure 5, the Integrated Set of Needs is transformed from various sources (such as \nlifecycle concepts, stakeholder expectations, drivers and constraints, goals, objectives, and risks), \ndefined as part of the lifecycle concept and needs definition activities discussed in the NRM and \nGtNR.   \nAs shown in Figure 14, validate that the resulting set of needs reflects an accurate and \nunambiguous interpretation of the:",
  "GtNR.   \nAs shown in Figure 14, validate that the resulting set of needs reflects an accurate and \nunambiguous interpretation of the:  \n• concepts, stakeholder expectations, drivers and constraints, goals, objectives, risks, etc. from \nwhich it was transformed; \n• problem or opportunity and underlying goals and objectives;  \n• the models or diagrams from which the individual needs w ere extracted so the needs trace to \nthe models and diagrams; and \n• underlying analysis and assumptions that were part of the transformation. \nAlso validate that the achievement of the set of needs, as written, will result in the realized system \nmeeting the intent of the sources from which it was transformed.  \nAs shown in Figure 15, validate that the resulting set of requirements reflects an accurate and \nunambiguous interpretation of the: \n• need, source, or higher-level requirement from which it was transformed; \n• models or diagrams from which the individual requirements w ere extracted so the",
  "unambiguous interpretation of the: \n• need, source, or higher-level requirement from which it was transformed; \n• models or diagrams from which the individual requirements w ere extracted so the \nrequirements trace to the models or diagram s; and \n• underlying analysis and assumptions that were part of the transformation. \nAlso validate that the achievement of the set of requirements, as written, will result in the realized \nsystem meeting the intent of the needs, sources, or higher-level requirements from which it was \ntransformed.  \nUse a defined development and management process to ensure accuracy of the transformation \nin the context of the individual needs and requirements as well as the set of needs and set of \nrequirements transformed from those needs.  \nPerform the needs and requirements validation described in the NRM and GtNR to ensure \ncorrectness of the transformation in the context of the individual need and requirement",
  "Perform the needs and requirements validation described in the NRM and GtNR to ensure \ncorrectness of the transformation in the context of the individual need and requirement \nstatements as well as the complete sets of needs and requirements. \nCorrectness of integrated sets of needs and sets of requirements can also be assessed during \nearly system verification and design verification activities discussed in the NRM and GtVV.",
  "Guide to Writing Requirements  64 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nSection 4: Rules for Individual Need and R equirement \nStatements and for Sets of Needs and Requirements \n \nThis section defines the rules for individual need statements and requirement statements, needs \nexpressions and requirements expressions, and sets of needs and sets of requirements that \nhelp them to be formulated such that they will be well-formed helping to have the characteristics \ndefined in this Guide.   \nIncluded with each rule is an explanation of the rule, any qualifications or exemptions to the rule, \nfollowed by selected examples of the application of the rule. \nIn addition to the rules outlined in this section, the reader is encouraged to follow the principles \nof good technical writing (as they apply to a need or requirement statement) such as those \noutlined in the Simplified Technical English (STE) specification (ASD-STE100).",
  "of good technical writing (as they apply to a need or requirement statement) such as those \noutlined in the Simplified Technical English (STE) specification (ASD-STE100). \nNote: Because need statements are expressed at a higher level of abstraction, some of the \nrules in this section may not always apply as rigorously to need statements as they do to \nrequirement statements.  The key is that the need statements have the characteristics defined \nearlier that are appropriate to the level of abstraction at which the need statements are written.  \nAppendix D provides a matrix that maps the applicability of each rule to need statements and \nrequirement statements in order to provide readers with a clearer understanding of the \napplicability of the guidance provided by each rule. \nAppendix E contains cross reference matrices mapping the rules to the characteristics \ndiscussed in this Guide as well as mapping concepts and activities and attributes discussed in",
  "Appendix E contains cross reference matrices mapping the rules to the characteristics \ndiscussed in this Guide as well as mapping concepts and activities and attributes discussed in \nthe NRM to the characteristics which also contribute to the quality of the need statements and \nrequirement statements. \n4.1 Accuracy \n4.1.1 R1  – STRUCTURED STATEMENTS  \nDefinition: \nNeed  statements and requirement statements must conform to one of the agreed patterns, thus \nresulting in a well-structured complete statement. \nElaboration: \nOrganizations should provide needs and requirements writers with a catalogue of agreed patterns \nto follow.  Each different type of need or requirement should have, at least, one assigned pattern.  \nFollowing a specific agreed pattern boosts consistency within the sets of needs and sets of \nrequirements, where similar requirements (requirements of a same types) will always follow a \nsimilar structure.",
  "requirements, where similar requirements (requirements of a same types) will always follow a \nsimilar structure. \nWhen one (and only one) pattern is followed for a given need statement or requirement \nstatement, the quality characteristics defined in Section 2 will be leveraged.  Ambiguity will be \nreduced (C3), completeness of each need statement and requirement statement is guaranteed \n(C4), each need statement or requirement statement will be singular (C5), verifiability and",
  "Guide to Writing Requirements  65 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nvalidatability are enforced (C7), and each need statement and requirement statement will be \nconforming (C9).  \nIf a condition that applies to a need or requirement is not stated explicitly within the need \nstatement or requirement statement, the need or requirement will not be Unambiguous (C3), \nComplete (C4), Verifiable/Validatable (C7), nor Correct (C8). \nDetailed information on the different blocks that comprise a need or requirement pattern and \nfurther information about patterns and examples can be found in Appendix C. See also R2, R3, \nR11 , R1 8, and R27 . \n \nExamples: \nSee Appendix C, for examples of need statements and requirement statement patterns. \n \n4.1.2 R2  – A CTIVE VOICE  \nDefinition: \nUse the active voice in the need statement or requirement statement with the responsible entity \nclearly identified as the subject of the sentence. \nElaboration:",
  "Definition: \nUse the active voice in the need statement or requirement statement with the responsible entity \nclearly identified as the subject of the sentence. \nElaboration: \nThe active voice requires that the entity performing the action is the subject of the sentence.   \nThe active voice is important in writing needs and requirements since the onus for satisfying the \nrequirement is on the subject, not the object of the statement.  If the entity responsible for the \naction is not identified explicitly, it is unclear who or what should perform the action making it \ndifficult to determine how to verify/validate the statement since it is unclear as to which entity \nshould be subject to the verification/validation activity.   \nIncluding the entity in the subject also helps ensure the need statement or requirement statement \nrefers to the appropriate level requirement set consistent with the entity name (see R3).",
  "Including the entity in the subject also helps ensure the need statement or requirement statement \nrefers to the appropriate level requirement set consistent with the entity name (see R3).   \nIf the entity is not clearly identified as the subject of the statement, the need or requirement is not \nComplete (C4). \nOften when phrases such as “shall be” are used followed by a main verb, the statement is in the \npassive voice, which is why all the patterns into the agreed catalog of patterns (see R1 and \nAppendix C) shall make use of the active voice. \n \nExamples: \nUnacceptable: The Identity of the Customer shall be confirmed.   \n[This is unacceptable because it does not identify the entity that is responsible/accountable for \nconfirming the identity.] \nImproved by adding the subject: The Identity of the Customer shall be confirmed by the \nAccounting_System.   \n[Although this statement makes the subject clear, it is still unacceptable because the statement",
  "Accounting_System.   \n[Although this statement makes the subject clear, it is still unacceptable because the statement \nis in the passive voice in that the entity that is responsible/accountable for recording the audio \nis at the end of the statement rather than the beginning.] \nImproved: The Accounting_System shall confirm the Customer_Identity.",
  "Guide to Writing Requirements  66 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n[Note that “Accounting_System”, “confirm”, and “Customer_Identity” must be defined in the \nglossary since there are a number of possible interpretations of these terms—see R4. Also \nnote that this statement is improved because it is in the active voice but, before it is \nacceptable, it needs to be further improved through the addition of appropriate condition and \nqualifying clauses]  \nUnacceptable: While in the Operations_Mode, the Audio having the characteristics defined in \n<ICD xxxx> shall be recorded.   \n[This is unacceptable because the entity that is responsible/accountable for recording the \naudio is not stated, which makes it difficult to identify which entity is responsible for the action, \nor how verification is to occur.  In addition, the characteristics of the Audio are not referenced, \nnor are the conditions under which the action specified.]",
  "or how verification is to occur.  In addition, the characteristics of the Audio are not referenced, \nnor are the conditions under which the action specified.] \nImproved by adding the subject: While in the Operations_Mode, the Audio having the \ncharacteristics defined in <ICD xxxx> shall be recorded by the <SOI>.   \n[Although this statement makes the subject clear, it is still unacceptable because the statement \nis in the passive voice in that the entity that is responsible/accountable for recording the audio \nis at the end of the statement rather than the beginning.] \nImproved: While in the Operations_Mode, the <SOI> shall record Audio having the characteristics \ndefined in <ICD xxxx>.   \n[This is improved because it is in the active voice, but appropriate performance parameters \nshould be added before the statement is acceptable. Also note that “Audio” must be defined in \nthe glossary or data dictionary and required performance added for the requirement to be",
  "should be added before the statement is acceptable. Also note that “Audio” must be defined in \nthe glossary or data dictionary and required performance added for the requirement to be \ncomplete. The characteristics of the Audio received from a <xxxx> source is defined in the \nICD.] \n \n \n4.1.3 R3  – A PPROPRIATE SUBJECT -VERB   \nDefinition: \nEnsure the subject and verb of the need or requirement statement are appropriate to the entity to \nwhich the statement refers. \nElaboration: \nSubject \nThe subject of a need or requirement statement must be appropriate to the entity to which the \nstatement refers, as discussed in Section 1.7.   \nRequirements referring to the: \n• business management level have the form “The <business> shall …”;  \n• business operations level have the form “The <business unit> shall …”; \n• system level have the form \"The <SOI> shall …\";  \n• subsystem level have the form \"The <subsystem> shall ...\"; and",
  "• business operations level have the form “The <business unit> shall …”; \n• system level have the form \"The <SOI> shall …\";  \n• subsystem level have the form \"The <subsystem> shall ...\"; and  \n• system element level have the form \"The <system element> shall ...\".  \nAll these different structures (with the different subjects) shall be included in the catalog of agreed \npatterns (see R1 and Appendix C).",
  "Guide to Writing Requirements  67 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nAs a general rule, sets of need statements and sets of requirement statements for a specific \nentity should only contain needs or requirements for that entity—that is: \n• a set of business management requirements would contain only business management needs \nor requirements,  \n• a set of business operations requirements would contain only business operations needs or \nrequirements,  \n• a set of system requirements would contain only needs or requirements that apply to the \nintegrated system,  \n• a set of subsystem requirements would contain only needs or requirements that apply to that \nsubsystem, and \n• a set of system element requirements would contain only needs or requirements that apply to \nthat system element.   \nIn some cases, however, a higher-level entity may wish to prescribe needs and requirements that",
  "that system element.   \nIn some cases, however, a higher-level entity may wish to prescribe needs and requirements that \napply to a lower-level entity.  For example, it may be important for a business to mandate that the \nnew aircraft under development must use a particular engine (perhaps for support reasons) in \nwhich case they may make a statement at the business level that refers to an entity at the \nsubsystem level.   \nTherefore, any set of entity needs or requirements can state, for that entity, needs or \nrequirements that refer to itself, as well a lower-level entity to which the need or requirement \napplies (when  there is a valid reason to do so).  When this is the case, the prescriptive allocated \nneed or requirement is treated as a constraint on the lower-level entity.  In these cases, the lower-\nlevel entity will then include an entity specific child requirement and trace that child requirement to",
  "level entity will then include an entity specific child requirement and trace that child requirement to \nits parent or source. The reason for doing so should be included in the rationale attribute for the \nneed or requirement. \nTo continue our aircraft example above, although many  requirements at the business \nmanagement  level of the ACME Aircraft Company will begin with “The ACME Aircraft Company \nshall …”, the business may therefore wish to state at the business management level a \nrequirement stating that all aircraft developed by the organization shall use an engine with \nspecific characteristics.  For a specific aircraft, child requirements will be written for the \nappropriate entity that implements the intent of the business management generic requirement.  \nFor the entity dealing with the engine specifically, the system level child requirement would begin \n“The Aircraft shall….”; and at the subsystem level the child requirement would begin “The Engine",
  "For the entity dealing with the engine specifically, the system level child requirement would begin \n“The Aircraft shall….”; and at the subsystem level the child requirement would begin “The Engine \nshall …” and trace back to the system level parent requirement, which, in turn, would trace back \nto the business management level constraint as the parent or source. \nWhen talking about a quality or physical characteristic of an entity, some tend to write the \nrequirements on the characteristic rather than the entity that has that characteristic which is not \nconsistent with this rule nor rule and R3.  \n“The <entity characteristic> shall be <verb><value range>.”    \n \nWhile this may be appropriate for a design output, it is not appropriate for a design input.  In \naccordance with this rule, the subject of the requirement should be the entity to which the \nrequirement applies, and the characteristic should be the object.    \n“The <entity> shall <verb><characteristic> <value range>.” \nVerb",
  "requirement applies, and the characteristic should be the object.    \n“The <entity> shall <verb><characteristic> <value range>.” \nVerb \nAs with the subject, the verb of a need statement or requirement statement must be appropriate \nto the subject of the need or requirement for the entity it is stated.  For needs, the verbs such as",
  "Guide to Writing Requirements  68 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n“support”, “process”, “handle”, “track”, “manage”, and “flag” may be appropriate.  However, they \nare too vague for requirement statements which therefore may not be Un ambiguous (C3) nor \nVerifiable/Validatable (C7).   \nFor example, at the business management level the use of a verb such as “safe”, may be \nacceptable if it is unambiguous at that level, decomposed at the lower levels, and is verifiable at \nthose levels.   \nWhen transforming these need statements into requirement statements the functions referenced \nby these verbs would be decomposed into specific functions the <SOI> can be verified to perform \nat stated performance levels and conditions of operations. \n \nExamples: \nSubject examples: \nBusiness management requirements have the form “The <business> shall …”.  For example, \n“ACME_Transport shall …”.",
  "Examples: \nSubject examples: \nBusiness management requirements have the form “The <business> shall …”.  For example, \n“ACME_Transport shall …”. \nBusiness operations requirements on business elements have the form “The <business element> \nshall …”. For example, requirements on personnel roles have the form: “The <personnel role> \nshall …”—such as, “The Production_Manager shall …”; “The Marketing_Manager shall …”. \nSystem level needs have the form “The <stakeholders> need the system to ……” \nSystem requirements have the form \"The <SOI> shall ...\"—for example, “The Aircraft shall …” \nSubsystem level needs have the form “The <stakeholders> need the <subsystem> to ……” \nSubsystem requirements have the form “The <subsystem> shall …\" - for example, once the \nsubsystems are defined: “The Engine shall …”; and “The Landing_Gear shall …”. \n \nVerb examples: \nSystem level stakeholder need: “The <stakeholders> need the <SOI> to process data received \nfrom <other system>.”",
  "Verb examples: \nSystem level stakeholder need: “The <stakeholders> need the <SOI> to process data received \nfrom <other system>.” \nSystem level requirement: “The <SOI> shall [process] data received from <another system>. \nhaving the characteristics defined in <Interface Definition XYZ.>” \nThrough analysis, the verb/function “process” could be decomposed into sub functions such as \n“receive”, “store”, “calculate”, “report”, and “display”.   \nThen a decision needs to be made regarding the specific subsystem or system element in which \nthese sub functions are to be performed.   \nIf more than one subsystem or system element has a role in performing any one of the sub \nfunctions, that requirement should be communicated at the system level and allocated to the \napplicable subsystems or system elements.   \nIf a sub function is to be implemented by a single subsystem  or system element, then the sub \nfunction requirement should be communicated at the subsystem or system element set of",
  "If a sub function is to be implemented by a single subsystem  or system element, then the sub \nfunction requirement should be communicated at the subsystem or system element set of \nrequirements and traced back to the higher-level requirement from which it was decomposed. \nUnacceptable system requirement: “The User shall ...”  \n[As discussed in Section 1.8, this is unacceptable because the requirement should be on the \nsystem, not the user or operator of the system.  This wording is often the result of writing \nrequirements directly from user stories or resulting need statements, without doing the",
  "Guide to Writing Requirements  69 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \ntransformation of the use case or need into a requirement.  Ask, what does the system have to \ndo so that the need can be achieved?] \nImproved: “The <SOI> shall …”. \n \nUnacceptable: The <SOI> shall display the C urrent_Time on the <Display Device> per <Display \nStandard xyz>.   \n[Again, “Current_Time” and “Display_Device” must be defined in the glossary or data \ndictionary. This statement is most likely unacceptable because the Display_Device is either a \nsystem element which is presumably at a level lower than the SOI (and is therefore not \nappropriate to this level), or the Display_Device is a system or system element outside the SOI \n(and therefore should be handled as an interface since requirements cannot be placed on it by \nthis requirement set). The display standard would be developed by the organization that would",
  "(and therefore should be handled as an interface since requirements cannot be placed on it by \nthis requirement set). The display standard would be developed by the organization that would \ndefine standards to be used when displaying all information by all applications the organization \ndevelops including fonts, font sizes, colors, spacing, brightness, human factors, etc.] \nImproved: The <SOI> shall display the Current_Time per <Display Standard xyz>.   \n[This is improved because the action is appropriate to the level of the requirement set. Note \nthat, before being an acceptable statement, appropriate condition and qualifying clauses must \nbe added.] \n \n \n4.1.4 R4  – D EFINE D  TERMS  \nDefinition: \nDefine all terms used within the need statement and requirement statement within an associated \nglossary and/or data dictionary. \nElaboration: \nAs systems become increasingly complex and software intensive, the ability to share data and",
  "glossary and/or data dictionary. \nElaboration: \nAs systems become increasingly complex and software intensive, the ability to share data and \ninformation, including needs and requirements, across organizations both internal and external, is \ncritical to project success.  The definition and documentation of a common ontology by \norganizations and their projects is fundamental to the definition and documentation of a common \nontology.  This ontology includes the formal naming and definition of a set of terms, entities, data \ntypes, and properties as well as defining the relationships among these terms, entities, and data \ntypes that are fundamental to the project and organization of which the project is part.   \nHaving a documented, common ontology and an associated glossary and/or data dictionary, \nhelps ensure consistent use of this data and information across all system lifecycle process",
  "Having a documented, common ontology and an associated glossary and/or data dictionary, \nhelps ensure consistent use of this data and information across all system lifecycle process \nactivities and work products as well as across various groups within and external to the project.  \nThis common ontology is key to tool interoperability and the ability to share sets of data and \ninformation, including needs and requirements.  \nDefinitions of terms used within need statements and requirement statements must be agreed to, \ndocumented, and used consistently throughout the project and all SE artifacts developed during \nall lifecycle activities. \nMost natural languages are rich with words having several synonyms, each with a subtly different \nmeaning based on context.   \nFor example, if a person states: “I need a cream for wrinkles.” - what was the intended meaning \nof the word “for” – to “give”, “remove”, or “prevent”?   If someone goes to a barber and states: “I",
  "Guide to Writing Requirements  70 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nneed my hair shorter – I want it over my ears.” – what was the intended meaning of the word \n“over” - “cover” or “above”? \nIn need statements and requirement statements, shades of meaning will most likely lead to \nambiguity and to difficulty during verification and validation activities across the lifecycle.  Define \nterms in some form of ontology, including a glossary, data dictionary, or similar artifact that allows \nthe reader of a need statement or requirement statement to know exactly what the writer’s \nintended meaning was when the word was chosen.   \nThe meaning of a term should be the same every time the word is used no matter the work \nproduct, SE tool, or artifact being developed across all lifecycle stages. \nA standard format should be agreed within the organization to make the use of glossary terms",
  "product, SE tool, or artifact being developed across all lifecycle stages. \nA standard format should be agreed within the organization to make the use of glossary terms \nidentifiable in the need statements and requirements statements; for example, glossary items \nmay be capitalized and multiple words in single terms joined by an underscore (such as \n“Current_Time”).  This is essential for consistency to avoid using the word with its general \nmeaning without context.  This is the convention used in the examples in this Guide.  This \nstandard should be implemented and enforced within all SE tools used by the project to help \nensure consistency. \nFor cases where needs and requirements will be translated into a different language, it is helpful \nto develop a “translation matrix” where terms in the originating language are listed along with the \nacceptable term to be used in the target language such that the original intent is communicated.",
  "to develop a “translation matrix” where terms in the originating language are listed along with the \nacceptable term to be used in the target language such that the original intent is communicated.  \nThe use of this matrix will help ensure consistency in the translations when multiple people are \ninvolved in the translations over time. \n \nExamples: \nUnacceptable: The <SOI> shall display the current time as defined in <Display Standard xyz>.   \n[This is unacceptable because it is ambiguous. What is “current”? In which time zone? To what \ndegree of accuracy? In which format?] \nImproved: The <SOI> shall display the Current_Time as defined in <Display Standard xyz>.   \n[Note that “Current_Time” must then be defined in the glossary or data dictionary in terms of \naccuracy, format, time zone, and units. Further, appropriate condition and qualifying clauses \nmust be included before the statement is acceptable.  In addition, the organization can define a",
  "accuracy, format, time zone, and units. Further, appropriate condition and qualifying clauses \nmust be included before the statement is acceptable.  In addition, the organization can define a \ndisplay standard that applies to all products developed by the organizations concerning how \ninformation is to be displayed (fonts, colors, size, spacing, human factors, etc.] \n \n4.1.5 R5  – D EFINITE A RTICLES  \nDefinition: \nUse the definite article “the” rather than the indefinite article “a”. \nElaboration: \nThe definite article is “the”; the indefinite article is “a.”  \nWhen referring to entities, use of the indefinite article can lead to ambiguity.  For example, if the \nneed or requirement refers to “a user” it is unclear whether it means any user or one of the \ndefined users for which the system has been designed.   \nThis causes further confusion during verification and validation activities across the lifecycle—for",
  "defined users for which the system has been designed.   \nThis causes further confusion during verification and validation activities across the lifecycle—for \nexample, babies are arguably users of baby food, but the system would fail if the test agency",
  "Guide to Writing Requirements  71 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nsought to verify or validate that a baby could order, receive, open, and serve (or even \nindependently consume) baby food.   \nFrom a medical device perspective who is the user – nurse, doctor, or patient?  Although the \npatient is the one receiving the medical device, it is the nurse or doctor that will order, receive, \nopen, install, and monitor the device after installation.  From a risk perspective it is the patient that \nis of the main concern. \nOn the other hand, if the requirement refers to “the User”, the reference is explicitly to the nature \nof the user defined in the glossary—in the baby food example, the “User” is presumably the adult \nresponsible for feeding the baby.  In the medical device example, the specific intended user \nwould be defined in the glossary to remove ambiguity as to the intended user reference in the \nneed statement or requirement statement.  \n \nExamples:",
  "would be defined in the glossary to remove ambiguity as to the intended user reference in the \nneed statement or requirement statement.  \n \nExamples: \nUnacceptable: The <SOI> shall provide a time display.   \n[This is unacceptable for a requirement because it is ambiguous—is the intent to provide a \ndevice to display the time or to display the time? If a device to display the time, then this is not \nappropriate to level.  If to display a time - will any time displayed do?  Is a one-off display of the \ntime satisfactory?  The writer's intention was most likely that they wanted the system to display \ncontinuously the current time in a format that is readable, yet if the developer provided a \nconstant display of “10:00 am” (or even a one-off display of any time), they could argue (albeit \nunreasonably) that they have met the requirement; yet they would have clearly failed to meet \nthe customer's need and intent.",
  "unreasonably) that they have met the requirement; yet they would have clearly failed to meet \nthe customer's need and intent. \nNote that, as a need statement: “The <stakeholders> need the <SOI> to display the time.”, the \nstatement is arguably acceptable.  However, as part of the transformation process, the \nrequirement writers must remove the ambiguity - resulting in the following requirement \nstatement (amongst others). \nImproved: The <SOI> shall display the Current_Time as defined in <display standard xyz>.   \n[Note that “Current_Time” must be defined in the glossary or data dictionary since there are a \nnumber of possible meanings and formats of the more-general term “current time.” For \ncompleteness, condition and qualifying clauses must also be added before the requirement is \nacceptable. In addition, the organization can define a standard that applies to all products \ndeveloped by the organizations concerning how information is to be displayed (fonts, colors,",
  "acceptable. In addition, the organization can define a standard that applies to all products \ndeveloped by the organizations concerning how information is to be displayed (fonts, colors, \nsize, spacing, human factors, etc.]  \n \nExceptions and relationships: \nThe purpose of this rule is to avoid the ambiguity that arises because “a” or “an” is tantamount to \nsaying, “any one of”.  In some cases, however, the use of an indefinite article is not misleading.  \nFor instance, “… with an accuracy of less than 1 second” allows the phrase to read more \nnaturally and there is no ambiguity because of the accuracy quoted. \n \n4.1.6 R6  – C OMMON  U NITS OF M EASURE  \nDefinition: \nW hen stating quantities, all numbers should have appropriate and consistent units of measure \nexplicitly stated using a common measurement system in terms of the thing the number refers.",
  "Guide to Writing Requirements  72 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nElaboration: \nW hen stating quantities, all numbers should have appropriate and consistent units of measure \nexplicitly stated using a common measurement system in terms of the thing the number refers.  \nThere are three primary measurement systems: British Imperial, US, Metric.  \nFor temperatures, the following are most often used: Celsius, Fahrenheit, or Kelvin. \nWithin a project, a common measurement system must be used consistently.  For example, do \nnot mix both US and metric units of measure within any of the project’s artifacts.  \nDefine precisely and use consistently the same expression for the measurement unit—for \nexample, use consistently either ‘liter’ or the abbreviation ‘l’.  \nOnce the measurement system has been chosen for each system or system element, it is \nfundamental to continue preserving consistency by using the same measurement unit for each",
  "Once the measurement system has been chosen for each system or system element, it is \nfundamental to continue preserving consistency by using the same measurement unit for each \nproperty-element pair. For instance, the length of the screw should always be in mm and the \nlength of the chair always in cm; never mix them within the same property-element pair. \nA word of caution:  When converting from one measurement system to another, state the \nresulting value with a number of significant digits that appropriately preserves the precision of the \noriginal number.  See also R40. \nAppropriate use of units can sometimes be more difficult that it may seem at first glance. For \nexample, it should be noted that “liter” is the US spelling of the unit “litre”, so a choice has to be \nmade as to which spelling to use. Further, “liter/litre” is not an SI unit although it is one of the units \n(such as hours and days) that is accepted for use in the context of SI units—the correct SI unit for",
  "(such as hours and days) that is accepted for use in the context of SI units—the correct SI unit for \nvolume is cubic metres (m3), noting again that a choice has to be made since “meter” is the US \nspelling of “metre”. It is clear, even from this tiny portion of the measurement domain, that care \nmust be taken to avoid ambiguity by defining the unit in the project glossary and then using the \nunit consistently throughout the set of statements. \n \nExceptions and relationships: \nIn rare cases, projects may require integration between systems (or system elements) using \ndifferent units of measure (for example when integrating COTS from one measurement system \ninto an SOI based on another).  If this is unavoidable, artifacts must clearly indicate which units of \nmeasure are used and for which elements. \nExamples: \nUnacceptable: With power applied, The Circuit_Board shall <…> a temperature of less than 30 \ndegrees.",
  "measure are used and for which elements. \nExamples: \nUnacceptable: With power applied, The Circuit_Board shall <…> a temperature of less than 30 \ndegrees.   \n[This is unacceptable because the units used are stated without indicating the specific \nmeasurement system used.] \nImproved: With power applied, The Circuit_Board shall <…> a temperature of less than 30 degrees \nCelsius. \nUnacceptable: The <SOI> shall establish communications as defined in <ICD xyz> with at least 4 \nin less than or equal to 10 seconds.   \n[This is unacceptable because the units used are incomplete.  “4” of what?] \nImproved: The <SOI> shall <establish communications> as defined in <ICD xyz> with at least 4 \nsatellites in less than or equal to 10 seconds",
  "Guide to Writing Requirements  73 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n[Note that the phrase “establish communications” is probably acceptable at the business level \nwhen used in a need statement, but the phrase would need further elaboration at lower levels so \nthat the need is decomposed into verifiable requirements relating to frequency, type of \ncommunications (voice? data?), quality, bandwidth, etc. which would typically be defined in an \nICD that defines the characteristics of the communication signal to be established.] \nUnacceptable:  \n“The Fuel_System shall have a maximum fuel volume of 60 l”.   \n“When the Fuel_System detects the Fuel_Tank volume is less than 500 ml, the Fuel_System shall \nnotify the operator within 1 second.” \n[This is unacceptable because the two requirements use different units of measure (“l” and “ml”). \nImproved:  \n“The Fuel_System shall have a maximum Fuel_Tank volume of 60 l “.",
  "[This is unacceptable because the two requirements use different units of measure (“l” and “ml”). \nImproved:  \n“The Fuel_System shall have a maximum Fuel_Tank volume of 60 l “.   \n“When the Fuel_System detects the Fuel_Tank volume is less than 0.5 l, the Fuel_System shall \nnotify the operator within 1 second.” \n[Now both requirements are written using the same units of measure(liters).] \nAdditional Acceptable: \"The Fuel_System shall have a maximum Fuel_Tank volume of 60 l.” “When \nthe Signal_System detects the Fuel_Tank volume is less than 50 ml, the Signal_System shall light \nthe Low-Fuel_Iindicator within 1 second.\" \n[In this particular case, while the property (“Fuel_Tank volume”) remains the same, the \ncomponent/element is different (\"Fuel_System\" vs \"Signal_System\"). The measurement unit can \nvary because we are dealing with different component–property pairs.] \n[Note that “Fuel_System” and “Fuel_Tank” must be defined in the glossary or data dictionary.]",
  "vary because we are dealing with different component–property pairs.] \n[Note that “Fuel_System” and “Fuel_Tank” must be defined in the glossary or data dictionary.] \n \n4.1.7 R7  – VAGUE TERMS  \nDefinition: \nAvoid the use of vague terms. \nElaboration: \nVague terms can lead to ambiguous, unverifiable needs and requirements where the true intent is \nnot being communicated. \nAvoid words that provide vague quantification, such as “some”, “any”, “allowable”, “several”, \n“many”, “a lot of”, “a few”, “almost always”, “very nearly”, “nearly”, “about”, “close to”, “almost”, \nand “approximate”, \nAvoid vague adjectives such as “ancillary”, \"relevant”, “routine”, “common”, “generic”, “significant”, \n“flexible”, “expandable”, “typical”, “sufficient”, “adequate”, “appropriate”, “efficient”, “effective”, \n“proficient”, “reasonable” and “customary.”  \nAdverbs qualify actions in some way and are particularly troublesome if vague.  Avoid vague",
  "“proficient”, “reasonable” and “customary.”  \nAdverbs qualify actions in some way and are particularly troublesome if vague.  Avoid vague \nadverbs, such as “usually”, “approximately”, “sufficiently”, and “typically”, which can lead to \nambiguous, unverifiable requirements that do not reflect accurately the stakeholder expectations. \nAs a general rule, words that end in “-ly” often result in ambiguity.",
  "Guide to Writing Requirements  74 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nExamples: \nUnacceptable: The <SOI> shall usually be online.   \n[This is unacceptable because “usually” is ambiguous - is availability what is meant?] \nImproved: The <SOI> shall have an Availability of greater than xx% over a period of greater than \nyyyy hours.   \n[Note that “Availability” must be defined in the glossary or data dictionary since there are a \nnumber of possible ways of calculating that measure.  Alternately, the availability could be \nexpressed as a need.  Then the organization responsible for transforming the need into a \nrequirement could develop feasible concepts for meeting the needed availability and derived \none or more well-formed requirements that result in the need being met.] \nUnacceptable: The Flight_Information_System shall display per <Display Standard xyz> the \nTracking_Information for relevant aircraft within <xxxx seconds> of detection.",
  "Unacceptable: The Flight_Information_System shall display per <Display Standard xyz> the \nTracking_Information for relevant aircraft within <xxxx seconds> of detection. \n[This is unacceptable because it does not make explicit which aircraft are relevant.  Additionally, \nthe statement allows the developer to decide what is relevant; such decisions are in the \nprovince of the customer, who should make the requirement explicit.] \nImproved: The Flight_Information_System shall display per <Display Standard xyz> the \nTracking_Information of each Aircraft located less than or equal to 20 kilometers from the Airfield \nwhen in the Operations_Mode within <xxxx seconds> of detection.   \n[Now it is clear for which aircraft the information needs to be displayed.  Note that “Aircraft”, \n“Tracking_Information”, “Airfield”, and “Operations_Mode” must be defined in the glossary or \ndata dictionary.] \n \nExceptions and relationships:",
  "“Tracking_Information”, “Airfield”, and “Operations_Mode” must be defined in the glossary or \ndata dictionary.] \n \nExceptions and relationships: \nR3 points out that the use of a verb such as “safe”, may be acceptable at the business \nmanagement or operations level as long as it is unambiguous at that level, decomposed at the \nlower levels, and is verifiable at the level stated.  Similarly, some vague adjectives may be \nallowable at the business management or operations level, providing they are not ambiguous at \nthat level. NLP/AI tools providing automatic assessment of this rule shall be flexible enough and \ntailorable in order not to identify this issue as an error at a business level, while enforcing the \nabsence of vague terms in other lower-level documents. \n \n4.1.8 R 8 – ESCAPE C LAUSES  \nDefinition: \nAvoid the inclusion of escape clauses that state vague conditions or possibilities, such as “so far as is",
  "4.1.8 R 8 – ESCAPE C LAUSES  \nDefinition: \nAvoid the inclusion of escape clauses that state vague conditions or possibilities, such as “so far as is \npossible”, “as little as possible”, “where possible”, “as much as possible”, “if it should prove \nnecessary”, “if necessary”, “to the extent necessary”, “as appropriate”, “as required”, “to the extent \npractical”, and “if practicable”. \nElaboration: \nEscape clauses give an excuse to the developer of the system at lower levels not to implement a \nneed or requirement.  From a contracting standpoint, needs or requirements with these phrases \ncould therefore be interpreted as being optional even if communicated in a “shall” requirement \nstatement.",
  "Guide to Writing Requirements  75 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nEscape clauses can lead to ambiguous needs that the SOI cannot be validated to meet and are \nopen to interpretation and that do not reflect accurately lifecycle concepts, or other sources, from \nwhich they were transformed. \nEscape clauses can lead to ambiguous, unverifiable requirements that are open to interpretation \nand that do not reflect accurately the needs, source, or higher-level requirements from which they \nwere transformed.   \n \nExamples: \nUnacceptable: The GPS shall, where there is sufficient space, display the User_Location in \naccordance with <Display Standard xyz>.   \n[This is unacceptable because whether there is sufficient space is vague, ambiguous, and \nunverifiable.  The requirement is clearer without the escape clause.]  \nImproved: The GPS shall display the User_Location in accordance with <Display Standard XYZ> .",
  "unverifiable.  The requirement is clearer without the escape clause.]  \nImproved: The GPS shall display the User_Location in accordance with <Display Standard XYZ> . \n[Note that appropriate performance measures must also be specified such as within what time, \nformat, and accuracy.  Also note that “GPS” and “User_Location” must be defined in the \nglossary or data dictionary.]   \n \n4.1.9 R 9 – O PEN -ENDED C LAUSES  \nDefinition: \nAvoid open-ended, non-specific clauses such as “including but not limited to”, “etc.” and “and so \non”. \nElaboration: \nOpen -ended clauses imply there is more required without stating exactly what.   \nOpen -ended clauses can lead to ambiguous, unverifiable needs and requirements that do not \nreflect accurately the stakeholder’s expectations and needs and can create ambiguity in the mind \nof the reader.  \nNeeds or requirements with open-ended clauses are not Complete (C4).",
  "reflect accurately the stakeholder’s expectations and needs and can create ambiguity in the mind \nof the reader.  \nNeeds or requirements with open-ended clauses are not Complete (C4).  \nUse of open-ended clauses also violates the one-thought rule (R18) that leads to the singular \ncharacteristic.  If more cases are required, then include additional needs and requirements that \nexplicitly state those cases. \nDepending on the contract type (fixed price versus level of effort or cost plus) open-ended \nrequirements can lead to serious interpretation problems concerning what is in or out of scope of \nthe contract; possibly resulting in expensive contract changes.  For level of effort or cost-plus \ncontracts, open-ended requirements can be used by the supplier to do and bill the customer for \nadditional work not intended by the customer leading to budget overruns and expensive contract \nchanges. \n \nExamples:",
  "additional work not intended by the customer leading to budget overruns and expensive contract \nchanges. \n \nExamples: \nUnacceptable: The ATM shall display the Customer Account_Number, Account_Balance, and so \non per <Display Standard xyz>.   \n[This is unacceptable because it contains an opened list of what is to be displayed.]",
  "Guide to Writing Requirements  76 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nImproved: [Split into as many requirements as necessary to be complete.  Note that the types of \ncustomer information to be displayed needs to be defined in the glossary.]: \nThe ATM shall display the Customer Account_Number in accordance with <Display Standard \nxyz>. \nThe ATM shall display the Customer Account_Balance in accordance with <Display Standard \nxyz>. \nThe ATM shall display the Customer Account_Type in accordance with <Display Standard \nxyz>. \nThe ATM shall display the Customer Account_Overdraft_Limit in accordance with <Display \nStandard xyz>. \n[Note: Some may feel that a bulleted list or table is acceptable.  While, from a readability \nperspective, this may be true, from a requirement management  perspective, each item in the \nbulleted list is still a requirement.  Because of this requirement statements as in the example",
  "perspective, this may be true, from a requirement management  perspective, each item in the \nbulleted list is still a requirement.  Because of this requirement statements as in the example \nabove should be written as individual statements especially when allocation, traceability, \nverification, and validation activities are specific to the single item.  See also R17, R18 , R22 , \nand R28.] \n[Note the above examples are incomplete in that expected performance and under what \nconditions has not been included in the requirement statements.] \n \n4.2 Concision \n4.2.1 R1 0 – SUPERFLUOUS INFINITIVES \nDefinition: \nAvoid the use of superfluous infinitives such as “to be designed to”, “to be able to”, “to be capable \nof”, “to enable”, “to allow”. \nElaboration: \nAn infinitive is a verbal consisting of the word “to” + “a verb”.  \nUse of infinitives within requirement statements: \nWhen writing a requirement statement, using more verbs than necessary to describe a single",
  "Use of infinitives within requirement statements: \nWhen writing a requirement statement, using more verbs than necessary to describe a single \naction (verb), such as “The <SOI> shall be designed to be able to <do an action> ...” or “The \n<SOI> shall be designed to be capable of  <action>...” rather than simply “The <SOI> shall  \n<action>...”. \nBy forcing conformance with one of the agreed structured statements (See R1), the use of such \nsuperfluous infinitives is avoided. \nNote that at the enterprise and business levels, requirements for an entity to “provide a capability” \nare acceptable.  Where capability is made up of people, processes, and products; these \nrequirements will be decomposed to address the people aspects (skill set, training, roles, etc.), \nprocesses (procedures, work instructions, etc.); and products (hardware and software systems).  \nThe enterprise and business level higher-level requirements will be allocated appropriately to the",
  "processes (procedures, work instructions, etc.); and products (hardware and software systems).  \nThe enterprise and business level higher-level requirements will be allocated appropriately to the \npeople, processes, and products (SOI), as appropriate.  \nWhen the resulting requirement sets are defined for all three areas, the capability will be \ncommunicated by a set of requirements for each (people, process, product) that will result in the \nneeded capability to be provided.",
  "Guide to Writing Requirements  77 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nThe use of “be able to” or “have the capability to” is also ambiguous in terms of defining the \nsuccess criteria for system verification.  For example, if the SOI is tested 100 times, and is only \nsuccessful once, the case could be made that it is “able to” or is “capable of”, but that isolated \nperformance is probably not acceptable to the customer. \nAs another example, the SOI may be capable of a given function provided that the customer buys \nan additional capability.  In this case the SOI could be designed to be expandable to allow \nadditional capabilities to be added. Again, although the SOI is capable of a given feature if \nadditional functionality is acquired, that is probably not what the customer desires. \nIf the intent of wording such as “be able to” or “be capable of” is to communicate the system will",
  "additional functionality is acquired, that is probably not what the customer desires. \nIf the intent of wording such as “be able to” or “be capable of” is to communicate the system will \nonly need to do the required action based on some condition, trigger, or state, then the state the \ncondition, trigger, or state must be included as part of the requirement (see R1  and R11). \nUse of infinitives within need statements: \nThe use of “to be able to”, “to have the capability to”, “to enable the user to”, or “to allow the user \nto” may be acceptable within a need statement.  For example: “The <stakeholders > need the \nsystem “to provide the capability for users to” <do some action>.”   \nThose transforming the need statements into requirements will define a feasible concept that will \nresult in the system being able to provide a capability or allow or enable an action.    As part of \nthe transformation process from need to one or more requirements, the requirement writer will",
  "result in the system being able to provide a capability or allow or enable an action.    As part of \nthe transformation process from need to one or more requirements, the requirement writer will \ndetermine what the SOI is required to do to provide that capability or allow or enable the action.   \nWhen using “allow” or “enable’ in a need statement it is important to understand how the terms \nare interpreted and the intent of the resulting actions.  “Allow” can be interpreted as \"to not \nprohibit something, to let it happen, to remove any constraint that would prevent something from \nhappening\" and “enable” can be interpreted as \"to make something possible\".  Understanding \nthis distinction is important when  deriving the requirements that will meet the intent of the need. \n \nExamples: \nUnacceptable: The Weapon_S ystem shall be able to store the location of each Ordnance.   \n[This is unacceptable because it contains the superfluous infinitive “be able to” which implies the",
  "Unacceptable: The Weapon_S ystem shall be able to store the location of each Ordnance.   \n[This is unacceptable because it contains the superfluous infinitive “be able to” which implies the \nrequirement is ubiquitous in that it can be applied at any time, but it therefore begs the question \nas to the condition under which the feature can be invoked.  However, this is acceptable for the \nstakeholder need: “The stakeholders need the Weapon_System to be able to store the location \nof each Ordnance.”] \nImproved: When <condition>he Weapon_System shall store the Location of each Ordnance.   \n[This is better because the requirement applies only in a particular condition. Note that the \nterms “Weapon_System ”, “Location”, and “Ordnance” must be defined in the glossary or data \ndictionary. To be complete the appropriate performance characteristics would also need to be \ndefined and included within the requirement statement.] \n \n4.2.2 R1 1 – SEPARATE C LAUSES  \nDefinition:",
  "dictionary. To be complete the appropriate performance characteristics would also need to be \ndefined and included within the requirement statement.] \n \n4.2.2 R1 1 – SEPARATE C LAUSES  \nDefinition: \nUse a separate clause for each condition or qualification. \nElaboration: \nEach need or requirement should have a main verb describing a basic function or need.  If \nappropriate, the main sentence may then be supplemented by clauses that provide conditions or",
  "Guide to Writing Requirements  78 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nqualifications (performance values, trigger, or constraints).  A single, clearly identifiable clause \nshould be used for each condition or qualification expressed.  \nAs mentioned in R1 and Appendix C, a need and requirement should match one, and only one, \npattern from the catalog of agreed patterns. \nIf an applicable qualifying clause or condition is not stated explicitly within the need or \nrequirement statement, the need or requirement statement is not Complete (C4), \nVerifiable/Validatable (C7), nor Correct (C8). \nIf a qualifying clause is not stated explicitly within the need or requirement statement, the need or \nrequirement statement is not C omplete (C4)), Verifiable/Validatable (C7), nor Correct (C8)—for \nexample, performance associated with the action verb or for an interface requirement where a \npointer to where the specific interaction is defined (such as in the ICD).",
  "example, performance associated with the action verb or for an interface requirement where a \npointer to where the specific interaction is defined (such as in the ICD). \nWhen using clauses, make sure the clause does not separate the object of the sentence from the \nverb.  See also R1 , R18, R27 and Appendix C . \n \nExamples: \nUnacceptable: The Navigation_Beacon shall provide Augmentation_Data having the \ncharacteristics defined in <ICD xyz> at an accuracy of less than or equal to 20 meters to each \nMaritime_User during Harbor_Harbor_Approach_Maneuvering (HHA M ).   \n[This is unacceptable because it inserts a phrase in such a way that the object of the sentence \nis separated from the verb.] \nImproved: The Navigation_Beacon shall provide Augmentation_Data having the characteristics \ndefined in <ICD xyz> to each Maritime_User engaged in Harbor_Harbor_Approach_Maneuvering \n(HHA M ), at an accuracy of less than or equal to 20 meters.",
  "defined in <ICD xyz> to each Maritime_User engaged in Harbor_Harbor_Approach_Maneuvering \n(HHA M ), at an accuracy of less than or equal to 20 meters.   \n[This rewrite places the basic function in an unbroken clause followed by the sub-clause \ndescribing performance.  Note that: “Navigation_Beacon”, “Maritime_User”, and \n“Harbor_Harbor_Approach_M aneuvering (HHAM )” must be defined in the glossary or data \ndictionary. There is also an issue in that when discussing accuracy, precision needs to also be \naddressed.] \n \n4.3 Non -ambiguity \n4.3.1 R1 2 – C ORRECT G RAMMAR  \nDefinition: \nUse correct grammar. \nElaboration: \nWe interpret language based on the rules of grammar.  Incorrect grammar leads to ambiguity and \nclouds understanding.  This is especially true when the recipient of the need statement or \nrequirement statement is working in a second language relying on specific rules of grammar.  If",
  "clouds understanding.  This is especially true when the recipient of the need statement or \nrequirement statement is working in a second language relying on specific rules of grammar.  If \nthese rules are not followed, that person may misinterpret the meaning of the need statement or \nrequirement statement. \nIncorrect use of grammar may make the true intent unclear resulting in an incorrect requirement \nand thus make it difficult to verify the SOI meets the intent of the requirement. \nCare must be taken when translating need statements and requirement statements from one \nlanguage to another and when sentence structure differs depending on the language in which the",
  "Guide to Writing Requirements  79 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \noriginal need or requirement statement was written.  Punctuation varies from language to \nlanguage and even between dialects of a given language.   \nBe cautious when need statements and requirement statements must be translated.  An \ninteresting exercise is to translate a requirement statement from one language to another and \ntranslate the result back to the original language. \nMany word processing applications are capable of applying a set of grammar rules based on a \nset of built-in rules that are selectable.  When using an application specific set of grammar rules, \nproject-specific grammar items may be flagged as incorrect as they may not be applicable to the \nproject’s use of grammar. Therefore, the application grammar checking can be regarded as a \nproject-specific aspect. Many applications allow the user to “turn off” or “ignore” grammar rules \nthat do not apply to the project.",
  "project-specific aspect. Many applications allow the user to “turn off” or “ignore” grammar rules \nthat do not apply to the project. \nSee also R4 - Define terms. \n \nExamples: \nUnacceptable: The Weapon_System shall storing the location of all ordnance.   \n[This is unacceptable because the grammatical error leads to uncertainty about the meaning.] \nImproved: The Weapon_System shall store the location of all Ordnance.   \n[Note that “Ordnance” must be defined in the glossary to be explicit about the types of weapons \nand ammunition. Also, where the location is to be stored and the format of the data, must be \naddressed. The action “store” needs to be further evaluated to determine if that is an \nappropriate action (verb) for the Weapon_System vs a user interacting with the \nWeapon_System as discussed in R3.  Additionally, to be complete any specific performance \nmeasures and conditions should be included within the requirement statement.]",
  "Weapon_System as discussed in R3.  Additionally, to be complete any specific performance \nmeasures and conditions should be included within the requirement statement.] \n \nUnacceptable: When in the Active_State, the Record_Subsystem shall display each of the \nNames of the Line_Items, without obscuring the User_ID per <Display Standard xyz>. \n[This is unacceptable because the grammatical error involving the inappropriate placement of \n“each of”—it is most likely that a Line_Item has only one name.] \nImproved: When in the Active_State, the Record_Subsystem shall display on <Display Device> \nthe Name of each Line_Item, without obscuring the User_ID per <Display Standard XYZ.>.  \n[This is acceptable the ambiguity has been addressed.  The requirement is now more complete \nin that it references where the information is to be display and the standard to be used \nconcerning the display of the information. If there are any performance measures that apply,",
  "in that it references where the information is to be display and the standard to be used \nconcerning the display of the information. If there are any performance measures that apply, \nthey would also need to be addressed.] \n \nUnacceptable: The <corporate website> shall only use Approved_Fonts. \n[This is unacceptable because it mandates that the website shall only use the designated \nfonts—that is, it is not expected to perform any other function except to use those fonts. This is \nclearly not what is meant but becomes ambiguous by the inappropriate grammar and the \nincorrect placement of the word “only”. What is most likely meant is that the only fonts to be \nused are the approved fonts defined in the organization’s display standard.] \nImproved: The <corporate website> shall display information using Approved_Fonts defined in \n<Display Standard xyz>.",
  "Guide to Writing Requirements  80 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n[This is better because the ambiguity has been addressed.  To be acceptable, any conditions \nand qualifying clauses would also need to be added.  If the organization has a standard for \ndisplaying information that addresses acceptable fonts, font sizes, colors, spacing, human \nfactors, etc., the requirement should refer to that standard.] \n \n4.3.2 R1 3 – C ORRECT SPELLING  \nDefinition: \nUse correct spelling. \nElaboration: \nIncorrect spelling can lead to ambiguity and confusion.  Some words may sound the same but, \ndepending on the spelling, will have entirely different meaning.  For example, “red” versus “read”, \n“ordinance” versus “ordnance”, or “brake” versus “break”.  \nIn other cases, the word could be spelled the same, but have a different meaning or the meaning \nchanges depending on the context of which it is used.  For example, \"clear windscreen\" and",
  "In other cases, the word could be spelled the same, but have a different meaning or the meaning \nchanges depending on the context of which it is used.  For example, \"clear windscreen\" and \n\"clear the screen” contain 2 different meanings for \"clear\", one is an adjective, and the other a \nverb.  In addition, the word “sound” could be ambiguous as it can be a noun, a verb, adverb, or \nadjective.  In these cases, a spell checker cannot distinguish the meaning nor context not finding \nthese kinds of errors. \nA requirement that has spelling errors is not correct (C8) and may not be Verifiable/Validatable \n(C7). \nIn addition to misspelling, this rule also refers to the proper use of: \n• Capital letters in acronyms: avoid “SYRD ” and “SyRD ” in the same set of needs and \nrequirements. \n• Capital letters in other non-acronyms concepts: avoid “Requirements Working Group” and \n“Requirements working group” in the same set of needs and requirements.",
  "requirements. \n• Capital letters in other non-acronyms concepts: avoid “Requirements Working Group” and \n“Requirements working group” in the same set of needs and requirements. \n• Proper use of hyphenation: “non-functional” versus “nonfunctional.” Often hyphenation is used \nwhen two related words are used as adjectives but is not used when used as a noun. \n• Proper form for compound words.  Compound words are when two or more words combine to \nform a new single word or a phrase that acts like a single word. There are three different \ntypes of compound words in grammar: open compound words with spaces between the words \n(ice cream), closed compound words with no spaces (firefighter), and hyphenated compound \nwords (up to date).  The project team needs to agree on how specific compound words are to \nbe formed, define them in the project glossary, and be consistent in their use. \nMany word processing applications are capable of doing a spelling check as text is entered based",
  "be formed, define them in the project glossary, and be consistent in their use. \nMany word processing applications are capable of doing a spelling check as text is entered based \non a built-in dictionary and a user defined dictionary.  When using an application specific spelling \ndictionary, project-specific vocabulary items or terms may be flagged as misspelled words as they \nmay not be included in the application’s internal core dictionary. Therefore, the spellchecking can \nbe regarded as a project-specific aspect. If practical, these terms should be added to a user \ndefined dictionary within the application, if allowed. \n \nExamples: \nUnacceptable: The Weapon_System  shall store the location of each ordinance.   \n[This is unacceptable because the word “ordinance” mean s regulation or law.  It is unlikely that \nthe Weapon_System is interested in the location of ordinance (regulations).  In the context of a",
  "Guide to Writing Requirements  81 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nweapon system, what the authors meant to use is \"ordnance\" as in weapons and ammunition, \nnot “ordinance”.] \nImproved: The Weapon_System shall store the Location of each Ordnance.   \n[Note that “Location” and “Ordnance” must be defined in the glossary or data dictionary to be \nexplicit about the types of weapons and ammunition.  The action “store” needs to be further \nevaluated to determine if that is an appropriate action (verb) for the Weapon_System vs a user \ninteracting with the Weapon_System as discussed in R3.  Additionally, to be complete any \nspecific performance measures and conditions should be included within the requirement \nstatement.] \n \n4.3.3 R1 4 – C ORRECT PUNCTUATION  \nDefinition: \nUse correct punctuation. \nElaboration: \nIncorrect punctuation can cause confusion between sub-clauses in a need or requirement \nstatement.",
  "4.3.3 R1 4 – C ORRECT PUNCTUATION  \nDefinition: \nUse correct punctuation. \nElaboration: \nIncorrect punctuation can cause confusion between sub-clauses in a need or requirement \nstatement.  \nA need or requirement statement with incorrect punctuation is not Correct (C8) \nNote also that the more punctuation in a need or requirement statement, the greater the \nopportunity for ambiguity. \nMany word processing applications are capable of applying a set of punctuation rules as text is \nentered based on a set of built-in rules that are selectable.  When using an application specific \nset of punctuation rules, project-specific punctuation items may be flagged as incorrect as they \nmay not be applicable to the project’s use of punctuation. Therefore, the application punctuation \nchecking can be regarded as a project-specific aspect. Many applications allow the user to “turn \noff” or “ignore” punctuation rules that do not apply to the project. \n \nExamples:",
  "checking can be regarded as a project-specific aspect. Many applications allow the user to “turn \noff” or “ignore” punctuation rules that do not apply to the project. \n \nExamples: \nUnacceptable: The Navigation_Beacon shall provide Augmentation_Data having the \ncharacteristics defined in <ICD xyz> to each Maritime_User, engaged in \nHarbor_Harbor_Approach_M aneuvering (HHA) at an accuracy of less than 20 meters.   \n[This is unacceptable because the incorrectly placed comma in this sentence confuses the \nmea ning, leading the reader to believe that the accuracy is related to the maneuver rather than \nto the augmentation data.]  \nImproved: The Navigation_Beacon shall provide Navigation_Data having the characteristics \ndefined in <ICD xyz> to each Maritime_User engaged in Harbor_Harbor_Approach_M aneuvering \n(HHA), at an accuracy of less than 20 meters. \n[The positioning of the comma now makes it clear that the accuracy and availability relate to the",
  "(HHA), at an accuracy of less than 20 meters. \n[The positioning of the comma now makes it clear that the accuracy and availability relate to the \ndata. Also note that, while performance measures are included, the appropriate conditions are \nnot addressed.  Further “Navigation_Beacon”, “Navigation_Data”, “Maritime_User”, and \n“Harbor_Harbor_Approach_M aneuvering (HHA)” must be defined in the glossary or data \ndictionary.]",
  "Guide to Writing Requirements  82 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n4.3.4 R1 5 – LOGICAL EXPRESSIONS  \nDefinition: \nUse a defined convention to express logical expressions such as “[X AND Y]”, “[X OR Y]”,  \n[X XOR Y]”, “NOT [X OR Y]”. \nElaboration: \nAs with the other rules and characteristics, we want to keep requirement statements as one \nthought with singular statements.  Thus, we avoid using “and” when it involves tying two thoughts \ntogether.  H owever, it is acceptable to use “AND ”, “OR”, “XOR”, and “NOT ” in a logical sense \nwhen talking about conditions to which the verb applies.  All logical expressions decompose to \neither “true” or “false”, resulting in a singular statement. \nExamples of conventions: \n1. Place conjunctions in italics or in all capitals (AND, OR , XOR, NOT) to indicate that the \nauthor intends the conjunction to play a role in a condition. \n2. Place conditions within square brackets, also using the brackets to control their scope.",
  "author intends the conjunction to play a role in a condition. \n2. Place conditions within square brackets, also using the brackets to control their scope. \nFor example, “[X AND Y].” \nFurther, use of “and/or” is non-specific and therefore ambiguous.  The most common \ninterpretation of the expression “and/or” is as an inclusive OR : either X OR  Y OR  both.   \n• If an inclusive OR is intended, that should be written as “at least one of <the two or more \nrequirements>”.   \n• If an Exclusive OR is intended, that should be written as “Either <Requirement 1> OR  \n<Requirement 2> but NOT  both”, and similar wording. \nNote that caution should be used when including logical expressions in requirement statements.  \nIn many cases the use of logical expressions is more appropriate to design output \nspecifications/requirements.  Design Input R equirements should focus on why the logical actions \nare needed - prevent something bad from happening, for example,",
  "specifications/requirements.  Design Input R equirements should focus on why the logical actions \nare needed - prevent something bad from happening, for example,  \nThe use of logical expressions within requirement statements is appropriate when stating “under \nwhat conditions” apply to a need or requirement.  For example, an action that must take place \nbased on whether at logical condition is true or false. \nAlso see R19  and R20 . \n \nExamples: \nUnacceptable: The Engine_Management_System shall disengage the \nSpeed_Control_Subsystem within <TBD seconds> when the Cruise_Control is engaged, and the \nDriver applies the Accelerator.   \n[This is unacceptable because of the ambiguity of “and” could be confused with combining two \nseparate thoughts.  Instead use the form of a logical expression [X AND Y].] \nImproved: W hen [the Cruise_Control is Engaged] AND [the Accelerator is Applied], the \nEngine_Management_System shall D isengage the Speed_Control_Subsystem within <TBD \nseconds>.",
  "Improved: W hen [the Cruise_Control is Engaged] AND [the Accelerator is Applied], the \nEngine_Management_System shall D isengage the Speed_Control_Subsystem within <TBD \nseconds>.  \n[“Engine_Management_System”, “Speed_Control_Subsystem”, “Disengage”, “Engaged”, \n“Accelerator”, “Applied”, and “Cruise_Control” must be defined in the glossary or data dictionary.]",
  "Guide to Writing Requirements  83 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nExceptions and relationships: \nWhile R21: Avoid Parentheses states that parentheses or brackets are to be avoided within \ngeneral sentence structure, this rule suggests that brackets may be used as part of a convention to \navoid ambiguity when expressing a logical expression.   \n4.3.5 R1 6 – U SE OF “N OT ” \nDefinition: \nAvoid the use of the word “not”. \nElaboration: \nThe presence of the word “not” in a need statement or requirement statement implies “not ever”, \nwhich is impossible to verify in a finite time, in which case, the need statement or requirement \nstatement is not correct (C8). \nIn theory, there is a large number of actions the system should not do.  Such statements should be \nre-written in the positive—that is, referring to what the entity is to do, rather than what it is not to do.",
  "re-written in the positive—that is, referring to what the entity is to do, rather than what it is not to do. \nR ewriting the need statement or requirement statement to avoid the use of “not” results in a need or \nstatement requirement statement that is clearer and is verifiable/validatable (C7). \n \nExamples: \nUnacceptable: The <SOI> shall not fail.   \n[This is unacceptable because verification of the requirement would require infinite time. The \nrequirement is also infeasible in that, as written, the implication is to never fail, under any \nconditions.] \nImproved:  \nThe <SOI> shall have an Availability of greater than or equal to 95%.  or  \nThe <SOI> shall have a Mean Time Between Failures (MTBF) of xx operating hours. \n[For quality requirements, it would be more precise in the above were written as need \nstatements.  Then those transforming the quality need statements into requirement statements",
  "[For quality requirements, it would be more precise in the above were written as need \nstatements.  Then those transforming the quality need statements into requirement statements \nwould define feasible concepts that would result in the needed quality attributes and derive well-\nformed requirements on the <SOI> that would result in those needs to be met.] \nUnacceptable: The <SOI> shall not contain mercury.   \n[This is unacceptable because verification of the requirement would require the ability to \nmeasure the amount of mercury with infinite accuracy and precision.  In addition, the real \nrequirement may not be stated, for example, the real concern may be the use of toxic materials, \nnot just mercury.  If that is the case, it may be best to reference a standard from a governmental \nagency concerning allowable exposures to a list of common toxic materials.] \nImproved: The <SOI> shall limit metallic mercury exposure to those coming in contact with the",
  "agency concerning allowable exposures to a list of common toxic materials.] \nImproved: The <SOI> shall limit metallic mercury exposure to those coming in contact with the \n<SOI> to less than or equal 0.025 mg/m3 over a period of 8 hours. \n \nExceptions and relationships: \nIt may be reasonable to include “not” in a requirement when the logical “NOT” is implied—for \nexample when using not [X or Y].  In that case, however, in accordance with R15, it may be better \nto capitalize the “NOT” to make the logical condition explicit: NOT [X or Y].",
  "Guide to Writing Requirements  84 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nThere may be other cases such as “The <SOI> shall not be red in color.”, which is stating a \nconstraint and is verifiable, as long as the range of shades of red is stated (RBG rr,bb,gg range or \na “name” of red in some standard).   \nThe key consideration is verification.  If the “not” can be unambiguously verified, then its use is \nacceptable. \n \n4.3.6 R1 7 – U SE OF O BLIQUE  SYMBOL  \nDefinition: \nAvoid the use of the oblique (“/”) symbol. \nElaboration: \nThe oblique symbol (“/”), or “slash”, has so many possible meanings that it should be avoided.   \nThe slash symbol (such as in “user/operator”, “budget/schedule” or the construct “and/or” \n(discussed in R15 ) can lead to ambiguous statements that do not reflect accurately the true \nstakeholder needs or lifecycle concepts from which the needs in the Integrated Set of Needs \nwere derived.   Also see R19. \n \nExceptions and relationships:",
  "stakeholder needs or lifecycle concepts from which the needs in the Integrated Set of Needs \nwere derived.   Also see R19. \n \nExceptions and relationships: \nExceptions to this rule include where the oblique symbol is used in units (for example “km/h”) or \nwhen communicating a symmetrical range of a value (for example +/- 5 degrees F).  \nThe oblique symbol may also be used when expressing ratios or fractions (such as 1/16)—see \nR40. \n \nExamples: \nUnacceptable: The User_Management_System shall Open/Close the User_Account in less than \n1 second.   \n[This is unacceptable because it is unclear as to what is meant by open/close: open, close, or \nboth?] \nImproved: (Split into two requirements with an appropriate condition)  \nWhen <condition>, the User_Management_System shall Open the User_Account in less than 1 \nsecond. \nWhen <condition>, the User_Management_System shall Close the User_Account in less than 1 \nsecond.",
  "When <condition>, the User_Management_System shall Open the User_Account in less than 1 \nsecond. \nWhen <condition>, the User_Management_System shall Close the User_Account in less than 1 \nsecond.  \nUnacceptable: W hen the Clutch is D isengaged and/or the Brake is Applied, the \nEngine_Management_System shall disengage the Speed_Control_Subsystem within <XYZ ms>.   \n[This is unacceptable because of the use of “and/or.” If simultaneity is intended—that is the dual \nconditions must be met at the same time—write the requirements as a logical AND. If “and” is \nmeant in the sense that the action is to be completed under each of the conditions, split the two \nthoughts into separate requirements, one for each condition.  If “or” is meant, write the \nrequirement as a logical OR .] \nImproved: (As one requirement if simultaneity is intended): \nW hen [the Clutch is D isengaged] AND [the Brake is Applied], the Engine_Management_System \nshall disengage the Speed_Control_Subsystem within <XYZ ms>.",
  "Guide to Writing Requirements  85 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nImproved: (As two requirements if two separate conditions are intended): \nW hen the Clutch is D isengaged, the Engine_Management_System shall disengage the \nSpeed_Control_Subsystem within <XYZ ms>. \nW hen the Brake is Applied, the Engine_Management_System shall disengage the \nSpeed_Control_Subsystem within <XYZ ms>. \nImproved: (As one requirement if inclusive OR  is intended)  \nW hen EITHER  [the Clutch is D isengaged] OR [the Brake is Applied], the \nEngine_Management_System shall disengage the Speed_Control_Subsystem. \n4.4 Singularity \n4.4.1 R1 8 – SINGLE  THOUGHT  SENTENCE  \nDefinition: \nWrite a single sentence that contains a single thought conditioned and qualified by relevant sub-\nclauses. \nElaboration: \nNeed statements and requirement statements (based on the concepts of allocation, traceability, \nvalidation, and verification) must contain a single thought allowing:",
  "clauses. \nElaboration: \nNeed statements and requirement statements (based on the concepts of allocation, traceability, \nvalidation, and verification) must contain a single thought allowing: \n• needs to be traced to their source; \n• the single thought within a requirement statement to be allocated; \n• the resulting single-thought child requirements to trace to their allocated parent, \n• requirements to trace to a single-thought source;  \n• design and system validation and design and system verification against the single-thought \nneed or requirement. \nSometimes a need statement or requirement statement is only applicable under a specific trigger, \ncondition, or multiple conditions as discussed in Section 1.11.   \nIf multiple actions are needed for a single condition, each action should be repeated in the text of \na separate need statement or requirement statement along with the triggering condition, rather",
  "If multiple actions are needed for a single condition, each action should be repeated in the text of \na separate need statement or requirement statement along with the triggering condition, rather \nthan stating the condition and then listing the multiple actions to be taken.  Using this convention, \nthe system can be verified to perform each action, and each action can be separately allocated to \nthe entities at the next level of the architecture.  \nAlso avoid stating the condition or trigger for an action in a separate sentence.  Instead write a \nsimple affirmative declarative sentence with a single subject, a single main action verb and a \nsingle object, framed and qualified by one or more sub-clauses.   \nAvoid compound sentences containing more than one subject/verb/object sequence. This \nconstraint is enforced in the catalog of agreed patterns (see R1 and Appendix C). \nOften when there are multiple sentences for one requirement, the writer is using the second",
  "constraint is enforced in the catalog of agreed patterns (see R1 and Appendix C). \nOften when there are multiple sentences for one requirement, the writer is using the second \nsentence to communicate the conditions for use or rationale for the requirement for the first \nsentence.  This practice is not acceptable—rather include rationale in the attribute A1 - Rationale \nas part of the requirement expression and include the condition of use within the need statement \nor requirement statement or an attribute within the need or requirement expression. \nSee also R1 , R11, R27 , and R28.",
  "Guide to Writing Requirements  86 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nExamples: \nUnacceptable:  When in the Active_State, the Record_Subsystem shall display the Name of each \nLine_Item and shall record the Location of each Line_Item, without obscuring the User_ID.   \n[This is unacceptable because the sentence contains two requirements and the qualification \nonly applies to the first requirement, not the second.] \nImproved: (Split into two separate requirements)  \nWhen in the Active_State, the Record_Subsystem shall display per <Display Standard XYZ> \nthe Name of each Line_Item, without obscuring the User_ID.  \nWhen in the Active_ State, the Record_Subsystem shall record the Location of each Line_Item. \n[Note use of the glossary or data dictionary to define terms.  Any applicable performance \nmeasures must be addressed for the requirement to be complete.] \nUnacceptable: The Control_Subsystem will close the Inlet_Valve until the temperature has",
  "measures must be addressed for the requirement to be complete.] \nUnacceptable: The Control_Subsystem will close the Inlet_Valve until the temperature has \nreduced to 85 °C, when it will then reopen it in less than 1 second.   \n[This is unacceptable because the sentence contains two event driven requirements.  \nAdditionally, the sentence contains two occurrences of the pronoun “it” ambiguously referring to \ndifferent things (see R26), the term “has reduced” is ambiguous, and the action verb must be \n”shall”, not “will”. Also, a time constraint is included but it is not clear whether it applies to both \nactions or only the second action.] \nImproved: (Split into two requirements each with its own time constraint): \nIf the Water_Temperature in the Boiler increases to greater than 85 °C, the Control_Subsystem \nshall close the Inlet_Valve in less than 1 second.  \nWhen the Water_Temperature in the Boiler reduces to less than or equal to 85 °C, the",
  "shall close the Inlet_Valve in less than 1 second.  \nWhen the Water_Temperature in the Boiler reduces to less than or equal to 85 °C, the \nControl_Subsystem shall open the Inlet_Valve in less than 1 second. \n[Note use of the glossary or data dictionary to define terms.]  \n \nUnacceptable:  \nIn the event of a fire detection, within <xxx ms>: \n• Security entrances shall be set to Free_Access_Mode. \n• Fire escape doors shall be unlocked. \n[This is unacceptable because the condition “in the event of a fire detection” is stated following a \nlist of actions to be taken; each of which the system must be verified against.  Also, note the \nactions are written in passive voice which violates R2.  Each action needs to be communicated \nin a separate active voice requirement statement.  For multiple conditions for a single action see \nR 28.] \nImproved: (Split into two requirements) \nIn the event of Fire_Detection, the Fire_Control_Subsystem shall set the Free_Access_Mode \nto ON within <xxx ms>.",
  "R 28.] \nImproved: (Split into two requirements) \nIn the event of Fire_Detection, the Fire_Control_Subsystem shall set the Free_Access_Mode \nto ON within <xxx ms>. \nIn the event of Fire_Detection, the Fire_Control_Subsystem shall send the Fire_Door_Unlock \nunlock command having the characteristics defined in <ICD xyz> to each Fire_D oor within \n<xxx ms>. \n[There is a Fire Detection subsystem responsible for detecting fires and setting the \nFire_Detection parameter to “TRUE” which triggers the two actions.   All other subsystems that",
  "Guide to Writing Requirements  87 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nare monitoring when  the Fire_Control_Subsystem has set the Free_Access_Mode to “TRUE” \nwill take the required action as stated in their set of requirements.  All Fire Doors will be \nmonitoring for the Fire_Door_Unlock command and will unlock when the command is \nreceived.] \n \nUnacceptable: The <corporate website> shall use only approved fonts. The approved fonts are: \n<Font1>, <Font2> and <Font3>. \n[This is unacceptable because it is non-singular. Rather than splitting into three requirements \n(which is quite difficult to so whilst conforming to the “only” constraint, the term \n“Approved_Fonts” can be included in the Glossary, which then states: “Approved_Fonts: \n<Font1>, <Font2> and <Font3>.”] \nImproved: (using the glossary term “Approved_Fonts”) \nThe <corporate website> shall use only Approved_Fonts.",
  "<Font1>, <Font2> and <Font3>.”] \nImproved: (using the glossary term “Approved_Fonts”) \nThe <corporate website> shall use only Approved_Fonts.  \n[Alternately, the organization can define a display standard which includes a definition of \napproved fonts, and the requirement could reference that standard.] \nImproved: (referring to a standard.) \nThe <corporate website> shall display information in accordance with <Display Standard xyz>. \n[Note that this also allows better configuration management of the requirements database, \nparticularly if the approved fonts are referred to in a number of requirements—that is, should \nthe approved fonts change or characteristics of the fonts change, the list of approved fonts and \ncharacteristics only needs to be updated in the Glossary, rather than in multiple requirements \n(in which case there is a risk that one or more of the requirements is missed).] \n[In reality, requirements involving the actions such as “display” are interface requirements",
  "(in which case there is a risk that one or more of the requirements is missed).] \n[In reality, requirements involving the actions such as “display” are interface requirements \ngiven that the information will be provided by something to some display device for display.] \n[Having the information in the display standard then can be referred to in the set of \nrequirements for that display device. Note that referring to a standard also allows for later \nspecialization, for example different parts of the standard may apply to different display \ndevices.] \n \nExceptions and relationships: \nEvery requirement should have a main clause with a main verb (R1).  However, additional sub-\nclauses with auxiliary verbs or adverbs may be used to qualify the requirement with performance \nattributes. \nSuch sub-clauses cannot be verified in isolation since they are incomprehensible without the \nmain clause.  Sub-clauses that need to be verified separately from others should be expressed as",
  "Such sub-clauses cannot be verified in isolation since they are incomprehensible without the \nmain clause.  Sub-clauses that need to be verified separately from others should be expressed as \nseparate requirements. \nFor example, “The Ambulance_Control_System shall communicate Incident_Details to the Driver” \nis a complete, comprehensible statement with a single main verb.  An auxiliary clause may be \nadded to provide a qualifying constraint “The Ambulance_Control_System shall communicate \nIncident_Details to the Driver, while simultaneously maintaining communication with the Caller.”  \n[Note: the verb “communicate” is more appropriate for a need statement.  The resulting Design \nInput Requirements would address the specific means of communication.]",
  "Guide to Writing Requirements  88 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nSimilarly, if the requirement is to extinguish and dispose of a match as a single combined action, \nthe requirement must ensure that both are verified the same time and allocated the same. \nNote that, if performance attributes need to be verified separately, they should be expressed as \nsub-clauses in separate requirements.   \n \n4.4.2 R 19 – C OMBINATORS  \nDefinition: \nAvoid words that join or combine clauses, such as “and”, “or”, “then”, “unless”, “but”, “as well as” \n“but also”, “however”, “whether”, “meanwhile”, “whereas”, “on the other hand”, or “otherwise”. \nElaboration: \nThe presence of such combinators in a statement usually indicates that multiple thoughts are \ncontained within the statement violating rule R18.   \nTo address these instances, either a logical expression is warranted (rule R15) or the statement",
  "contained within the statement violating rule R18.   \nTo address these instances, either a logical expression is warranted (rule R15) or the statement \nmust be broken into separate need or requirement statements, each containing a single thought. \n \nExamples: \nUnacceptable: The user shall either be trusted or not trusted.  \n[This is unacceptable for several reasons.  The intention is that a user should be classified in \none of two ways, but it is also a passive requirement written on the user rather than on the \nsystem (R2) and it is ambiguous: the requirement would still be met if the system took the \noption of treating all users as trusted.] \nImproved: The Security_System shall categorize each User as EITHER Trusted OR Not_Trusted. \n \nUnacceptable:  The <SOI> shall display the Location and Identity of the Lead_Vehicle. \n[This is unacceptable because is in fact stating two requirements which may well need to be",
  "Unacceptable:  The <SOI> shall display the Location and Identity of the Lead_Vehicle. \n[This is unacceptable because is in fact stating two requirements which may well need to be \nverified by different verification actions. In addition, the format of the displayed information is not \nreferenced.]  \nImproved: (Express as two requirements) \nThe <SOI> shall display the Location of the Lead_Vehicle per <Display Standard xyx>. \nThe <SOI> shall display the Identity of the Lead_Vehicle per <Display Standard xyx>. \n \nUnacceptable:  The <SOI> shall provide an audible or visual alarm having the characteristics \ndefined in <alarm standard xyz>. \n[This is unacceptable because it is a moot point as to whether the designer can choose which \nalarm to implement, or (which is probably the intent of the writer) whether both alarms are \nrequired, and the operator is alerted by at least one.]  \nImproved: (if the choice is available to the designer)",
  "required, and the operator is alerted by at least one.]  \nImproved: (if the choice is available to the designer) \nThe <SOI> shall provide EITHER  an Audible_Alarm OR  Visual_Alarm having the \ncharacteristics defined in <Alarm Standard xyz>. \nImproved: (if both alarms are required)",
  "Guide to Writing Requirements  89 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nThe <SOI> shall provide an Audible_Alarm having the characteristics defined in <Alarm \nStandard xyz>. \nThe <SOI> shall provide a Visual_Alarm having the characteristics defined in <Alarm Standard \nxyz>. \n[As separate requirements, each can be allocated differently, and the SOI will be verified to \nmeet each. \n \nExceptions and relationships: \nAND, OR, NOT can be used in need and requirement statements as logical conditions and \nqualifiers as stated in R15. See also R16 and R17. \nCombinators such as in “Command_and_Control” can be used in the project data dictionary, \nontology or glossary to cover one single function or quality of the system. \n \n4.4.3 R2 0 – PURPOSE  PHRASES  \nDefinition: \nAvoid phrases that indicate the “purpose of “, “intent of”, or “reason for” the need statement or \nrequirement statement. \nElaboration:",
  "4.4.3 R2 0 – PURPOSE  PHRASES  \nDefinition: \nAvoid phrases that indicate the “purpose of “, “intent of”, or “reason for” the need statement or \nrequirement statement. \nElaboration: \nNeed  statements and requirement statements should be as concise as possible and be Complete \n(C4).  In an attempt to avoid ambiguity or communicate why the need or requirement is \nNecessary (C1), some writers include additional information to make the purpose, intent, and \nreason clearer by including additional text within the need statement or requirement statement or \ninclude an additional sentence of explanation immediately following the need statement or \nrequirement statement.   \nThe text of a need statement or requirement statement should not include this extra text, nor \nshould an additional sentence be included as part of the need or requirement statements.   \nExpressions of purpose or intent are often indicated by the presence of phrases such as “……to”,",
  "should an additional sentence be included as part of the need or requirement statements.   \nExpressions of purpose or intent are often indicated by the presence of phrases such as “……to”, \n“in order to”, “so that”, and “thus allowing.” \nThis rule does not mean to imply that the additional information with regard to purpose is \nsuperfluous and should not be included at all. On the contrary, this extra information is useful to \nreaders of a statement, but it should not be included in the statement; rather it should be included \nseparately in the need expression or requirement expression using the R ationale attribute (A1) as \ndiscussed in the NRM. \n \nExamples: \nUnacceptable: The Record_Subsystem shall display the Name of each Line_Item so that the \nOperator can confirm that it is the correct Item.   \n[This is unacceptable because the text “so that the Operator can confirm that it is the correct \nItem” is rationale.]",
  "Operator can confirm that it is the correct Item.   \n[This is unacceptable because the text “so that the Operator can confirm that it is the correct \nItem” is rationale.] \nImproved: The Record_Subsystem shall display the Name of each Line_Item per <Display \nStandard XYZ> .   \n[The text “so that the Operator can confirm that it is the correct Item” should be included in the \nrationale attribute.]",
  "Guide to Writing Requirements  90 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n \nUnacceptable: The Operation_Logger shall record each Warning_Message produced by the \nsystem.   \n[This is unacceptable because of the superfluous words “produced by the system”.] \nImproved: The Operation_Logger shall record each Warning_Message within <performance \nmeasure>. \n4.4.4 R2 1 – PARENTHESES   \nDefinition: \nAvoid parentheses and brackets containing subordinate text. \nElaboration: \nIf the text of a need statement or requirement statement contains parentheses or brackets, it \nusually indicates the presence of superfluous information that can simply be removed or can be \ncommunicated in the rationale.  Other times, brackets introduce ambiguity. \nIf the information in the parentheses or brackets aids in the understanding of the intent of the \nrequirement, then that information should be included in the R ationale Attribute (A1) defined in \nthe NRM.",
  "requirement, then that information should be included in the R ationale Attribute (A1) defined in \nthe NRM. \nConventions for the use of parentheses or brackets may be agreed upon for specific purposes. \nSuch conventions should be documented in the project’s requirements and work instructions \nconcerning defining needs and requirements. \n \nExamples: \nUnacceptable: W hen the W ater_Temperature exceeds 85 °C (usually towards the end of the \nboiling cycle), the Control_Unit shall disconnect power from the Boiler within <xxx ms> \n[This is unacceptable because of the parenthetical phrase as well as the ambiguous word \n“usually”.   Note that the parameter W ater_Temperature needs to be defined in the glossary in \norder to be specific] \nImproved: If the W ater_Temperature increases to greater than 85 °C, the Control_Unit shall \ndisconnect power from the Boiler within <xxx ms>. \n[Note: for the above example, if this behavior is the result of a design decision, then the",
  "disconnect power from the Boiler within <xxx ms>. \n[Note: for the above example, if this behavior is the result of a design decision, then the \nrequirement needs to be communicated as a design output.  The design input requirement \nshould focus on why this behavior is needed - for example, prevent the boiler from over \npressurizing and exploding. This is a good example of the benefit of asking “Why” for \nrequirements of this type.  The answer is the real design input requirement.   If included in the \nset of Design Input Requirements, then the “why” should be included in the rationale.] \nImproved: If the W ater_Temperature increases to greater than 85 °C, the Control_Unit shall \nprevent the Boiler from over pressurization. \n[How this is done is a design decision.} \n \nExceptions and relationships: \nWhile this rule states brackets are to be avoided, R1 5 indicates that brackets may be used as",
  "[How this is done is a design decision.} \n \nExceptions and relationships: \nWhile this rule states brackets are to be avoided, R1 5 indicates that brackets may be used as \npart of a convention for eliminating ambiguous conditions such as logical expressions. In that \ncase, it is useful to settle on a combination to be used—that is, for example, the organization",
  "Guide to Writing Requirements  91 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \ntemplate may avoid round brackets “(   )” in any statement and may use square brackets “[...]” in \nlogical expressions. \n4.4.5 R2 2 – ENUMERATION  \nDefinition: \nEnumerate sets explicitly instead of using a group noun to name the set. \nElaboration: \nIf a number of functions are implied, a need statement or requirement statement should be written \nfor each.  \nThe use of a group noun to combine functions or entities is often ambiguous because it leaves \nmembership of that group in doubt.  \nOther issues include allocation, traceability, verification, and validation.  As with the singularity \ncharacteristic C5, each member of the set could be allocated differently, have different child \nrequirements, each of which must be individually verified and validated. \nIt is almost always best to list all the members of the set as separate needs or requirements. See",
  "requirements, each of which must be individually verified and validated. \nIt is almost always best to list all the members of the set as separate needs or requirements. See \nexceptions and relationship discussion below. \nSee also R18. \n \nExamples: \nUnacceptable: The thermal control system shall manage temperature-related functions.   \n[This is unacceptable because there is ambiguity regarding which functions are to be managed \nas well as what is meant by “managed”.  The specific functions should be enumerated explicitly \nin separate requirement statements along with performance expectations and any applicable \nconditions, triggers, or constraints.] \nUnacceptable: The thermal control system shall monitor system temperature.   \nThis is unacceptable because there is ambiguity regarding the function “monitor”.  Similar to \n“managed” What are the expectations of the stakeholders – update the display of the system",
  "This is unacceptable because there is ambiguity regarding the function “monitor”.  Similar to \n“managed” What are the expectations of the stakeholders – update the display of the system \ntemperature, maintain the temperature within some range, or store the history of the system \ntemperature? The specific subfunctions should be enumerated explicitly in separate \nrequirement statements along with performance expectations and any applicable conditions, \ntriggers, or constraints.] \nImproved: (three separate requirements):  \nThe Thermal_Control_System shall update the display of System_Temperature every 10 +/- 1 \nseconds. \nThe Thermal_Control_System shall maintain the System_Temperature between 95°C and \n98°C.  \nThe Thermal_Control_System shall store the history of System_Temperature.  \n[Note use of the glossary to define terms.] \n \nExceptions and relationships: \nIt is almost always better to enumerate members in a set, but the rule may be softened at the",
  "[Note use of the glossary to define terms.] \n \nExceptions and relationships: \nIt is almost always better to enumerate members in a set, but the rule may be softened at the \nhigher levels of abstraction if the resulting requirement is sufficiently unambiguous.  For example, \nat the business management level the business may state “ACME Consulting shall manage",
  "Guide to Writing Requirements  92 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nHuman Relations (HR ) functions centrally.” or a system-level need statement may state: “The \n<stakeholders> need the <SOI> to manage HR functions centrally.”  \nAlthough this raises the question of which HR functions are being referred to, it is not useful to \ninclude a long list at these levels of abstractions and it is often not necessary since the statement \nis sufficiently clear at the level at which it is stated.  The detailed enumeration of functions will be \nundertaken at the business operations level, and the business management stakeholders should \nbe comfortable that no function will be omitted as a result of not listing it at the business \nmanagement  level.   \nAt the system level, need statements may include group nouns to name a set of entities or \ninclude a higher-level function that is appropriate to the level of abstraction being communicated",
  "At the system level, need statements may include group nouns to name a set of entities or \ninclude a higher-level function that is appropriate to the level of abstraction being communicated \nwithin the need statement.  D uring the transformation of the need statement into requirements, \nthe project team would decompose the need into individual functional/performance requirements \nas well as define requirements concerning the word “centrally” and would then validate with the \nstakeholders that the resulting requirements, when realized, would meet the intent of the need \nstatement. \nAnother exemption would be to use the glossary or data dictionary to explicitly elaborate the set. \nFor example. “Account_Information” may be defined in the Glossary to include “Account_Name”, \n“Account_Number”, and “Account_Balance”. \n4.4.6 R2 3 – SUPPORTING D IAGRAM , M ODEL , OR ICD \nDefinition: \nWhen a need or requirement is related to complex behavior, refer to a supporting diagram, model, \nor ICD.",
  "4.4.6 R2 3 – SUPPORTING D IAGRAM , M ODEL , OR ICD \nDefinition: \nWhen a need or requirement is related to complex behavior, refer to a supporting diagram, model, \nor ICD. \nElaboration: \nSometimes it can be difficult to express a complicated need or requirement in words, and it is \nbetter simply to refer to a supporting diagram or model.   \nAn example is a requirement on voltage at turn on which involves a magnitude, rise time, \novershoot, and dampening time along with tolerances.  Stating all these values in the same \nrequirement could be seen to violate our combiner and multiple thought rules.   \nHaving a requirement that states: “Upon turn on, the <SOI> shall supply the initial voltage with the \ncharacteristics shown in Draw ing xxxxx.” It is much simpler for the drawing to show the \nmagnitude, rise time, allowable overshoot, and dampening time.  Stating each as a separate \nrequirement is not applicable because all four conditions are part of the one action.",
  "magnitude, rise time, allowable overshoot, and dampening time.  Stating each as a separate \nrequirement is not applicable because all four conditions are part of the one action. \nThis approach may seem to violate the singularity rule in that the SOI will need to be verified \nagainst each value in the drawing or figure.  Because of this, an organization may choose to \naddress each value in a separate requirement with the requirement or rationale referring to the \ndiagram or drawing for context. \nWhen multiple characteristics for an entity involved in an interaction between two systems, these \ncharacteristics can be defined in an ICD which is referred to within the requirement statement for \neach entity involved in the interactions, for example electrical power passing across an interface \nboundary can have multiple characteristics that must be define. (See example below for \ninterfaces). \nWhen using figures and models, care must be taken to not make matters worse but using",
  "boundary can have multiple characteristics that must be define. (See example below for \ninterfaces). \nWhen using figures and models, care must be taken to not make matters worse but using \ndisparate modelling languages and different terms in figures from those used in the statements.",
  "Guide to Writing Requirements  93 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nR36 applies here to ensure consistency in terms, not just across the sets of need and sets of \nrequirements but also across all associated models, figures, and diagrams. \n \nExamples: \nUnacceptable: The C ontrol_System shall close Valves A AND B within 5 seconds of the \ntemperature exceeding 95 °C AND  within 2 seconds of each other.   \n[This is unacceptable because of the confusing set of conditions.  In this case what is meant \nwill be clear if the requirement referred to a diagram for context.] \nImproved: [Within 5 seconds of the temperature exceeding 95 °C] AND  [within 2 seconds of each \nother as shown in Timing_D iagram_6], the C ontrol_System shall close [Valve A AND Valve B].   \n[Note that this assumes, of course, that the timing diagram itself is not ambiguous.  If it is not \npossible to remove the ambiguity by using a diagram, it may be better to split the requirement \ninto two.]",
  "possible to remove the ambiguity by using a diagram, it may be better to split the requirement \ninto two.] \n[Note: for the above example, if this complex behavior is the result of a design decision, then \nthe requirement needs to be communicated as a design output.  The design input requirement \nshould focus on why this behavior is needed.] \n \nInterface Example: \nAn interface requirement may refer to the characteristics of the electrical power (current/voltage) \nbeing supplied by a system.   \nThere can be multiple characteristics that need to be defined such that the systems receiving the \npower have a clear understanding of the characteristics of the power they are receiving.  In this \ncase it is common for the characteristics to be defined in an ICD which both the provider and \nreceiver of the power can refer to in their Design Input Requirements.  From the provider \nperspective the provider system will have to be verified that the power provided has all of these",
  "receiver of the power can refer to in their Design Input Requirements.  From the provider \nperspective the provider system will have to be verified that the power provided has all of these \ncharacteristics and the receiver will have to verify it can receive and operate on power having \nthese same characteristics.   \n<System 1> shall provide power to <System 2> having the characteristics defined in <ICD xyz>. \nTable 123>. \n<System 2> shall receive power from <System 1> having the characteristics defined in <ICD \nxyz>. Table 123>. \n<System 2> shall operate on power having the characteristics defined in <ICD xyz>. Table \n123>. \n \n4.5 Completeness  \n4.5.1 R2 4 – PRONOUNS  \nDefinition: \nAvoid the use of personal and indefinite pronouns. \nElaboration: \nPronouns are words such as “it”, “this”, “that”, “he”, “she”, “they”, and “them.”  \nRepeat nouns in full instead of using pronouns to refer to nouns included in the need statement or",
  "Elaboration: \nPronouns are words such as “it”, “this”, “that”, “he”, “she”, “they”, and “them.”  \nRepeat nouns in full instead of using pronouns to refer to nouns included in the need statement or \nrequirement statement or other need statements or requirement statements.",
  "Guide to Writing Requirements  94 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nWhen authoring stories, pronouns are a useful device for avoiding the repetition of nouns; but \nwhen writing need statements and requirement statements, pronouns are effectively cross-\nreferences to nouns included within the need statement or requirement statement or other need \nstatements or requirement statements and, as such, are ambiguous and should be avoided.  \nWhen originally written, the noun that defines the pronoun may have preceded the pronoun \npreviously used in the need statement or requirement statement or in a previous need statement \nor requirement statement.   \nH owever, as the set of needs or set of requirements mature, individual needs or requirements \nmay be added, deleted, reordered, or regrouped, such that the defining need or requirement no \nlonger precedes the need or requirement containing the pronoun.  This is especially true when",
  "may be added, deleted, reordered, or regrouped, such that the defining need or requirement no \nlonger precedes the need or requirement containing the pronoun.  This is especially true when \nrequirements are stored in a requirement management tool where they exist as single statements \nin a database that may not be in order.  To avoid these problems, repeat the proper nouns rather \nthan using a pronoun. \nIndefinite pronouns are words such as “all”, “another”, “any”, “anybody”, “anything”, “both”, “each”, \n“either”, “every”, “everybody”, “everyone”, “everything”, “few”, “many”, “most”, “much”, “neither”, \n“no one”, “nobody”, “none”, “one”, “several”, “some”, “somebody”, “someone”, “something”, and \n“such.”  \nIndefinite pronouns stand in for unnamed people or things, which makes their meaning subject to \ninterpretation, ambiguous, and unverifiable. \nSee also R32 and R36. \n \nExamples: \nUnacceptable: The controller shall send the driver his itinerary for the day. It shall be delivered at",
  "interpretation, ambiguous, and unverifiable. \nSee also R32 and R36. \n \nExamples: \nUnacceptable: The controller shall send the driver his itinerary for the day. It shall be delivered at \nleast 8 hours prior to his Shift.  \n[This is unacceptable because the requirement is expressed as two sentences and the second \nsentence uses the pronouns “it” and “his.”] \nImproved: At least 8 hours prior to the Driver_Shift, the Controller shall send the Driver_Itinerary \nfor the day to the Driver.   \n[Note use of the glossary to define terms and to be explicit about the relationship between the \ndriver, shift, and the itinerary for that particular driver.] \n4.5.2 R2 5 – H EADINGS  \nDefinition: \nAvoid relying on headings to support explanation or understanding of the need or requirement. \nElaboration: \nIt is a common mistake in document-centric documentation of needs and requirements to use the \nheading for a specific topic or subject under which the need or requirement applies to contribute",
  "It is a common mistake in document-centric documentation of needs and requirements to use the \nheading for a specific topic or subject under which the need or requirement applies to contribute \nto the explanation of the need or requirement.  The need expression or requirement expression \nshould be complete in and of itself and not require the heading for the intent of the expression to \nbe clearly understood. \nUse of a heading can be avoided when using a data-centric approach to SE where sets of needs \nand requirements are developed and managed using a modern RMT  or other SE tool rather than \na legacy tool that is document-centric which organizes needs and requirements within sections \nand paragraphs of a document.",
  "Guide to Writing Requirements  95 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n \nExamples: \nExample heading: “4.0 Alert Buzzer Requirements.”  \nUnacceptable: 4.1 The <SOI> shall sound it for greater than 20 minutes.   \n[This is unacceptable because the requirement uses the pronoun “it” (R24 ), which requires the \nheading to understand what “it” means.  In addition, the word “sound” could be ambiguous as it \ncan be a noun, a verb, adverb, or adjective.  We do not know whether Alert_Buzzer is a \nsubsystem that controls the noise or the thing that makes the noise.] \nImproved: W hen <triggering event>, the <SOI> shall sound an alert having the characteristics \ndefined in <Alert Standard xyz> for greater than 20 minutes. \n[In this improved rewrite, the existence of the header is not needed to interpret the requirement.  \nEven though the above heading referenced an “Alert Buzzer”—an implementation, the improved",
  "[In this improved rewrite, the existence of the header is not needed to interpret the requirement.  \nEven though the above heading referenced an “Alert Buzzer”—an implementation, the improved \nrequirement avoids implementation to a specific device, and rather indicates that when the \ntriggering event happens, an alert is required to be sounded having the characteristics defined in \nthe alert standard. \n \nExceptions and relationships: \nThe use of headings is useful and acceptable when producing an output of an RMT, grouping like \ntypes or categories of needs or requirements.  However, care must be taken that the headings \nare used solely for management of the subsets of statements—the heading must not be \nnecessary to understand any of the grouped statements. See R41  and R42 . \n4.6 Realism \n4.6.1 R2 6 – A BSOLUTES  \nDefinition: \nAvoid using unachievable absolutes. \nElaboration: \nAn absolute, such as “100% availability”, is not achievable.  Think ahead to design and system",
  "4.6 Realism \n4.6.1 R2 6 – A BSOLUTES  \nDefinition: \nAvoid using unachievable absolutes. \nElaboration: \nAn absolute, such as “100% availability”, is not achievable.  Think ahead to design and system \nverification and design and system validation: how 100% availability be proven?  Even if such a \nsystem could be built, could the project afford to validate, or it meets the need or requirement?  \nOther examples to avoid are “all”, “every”, “always”, and “never” since such absolutes are \nimpossible to verify without an infinite number of verification or validation activities. \nA need or requirement that contains absolutes is neither Feasible (C6), Verifiable/Validatable \n(C7), nor Correct (C8). \n \nExamples: \nUnacceptable: The <SOI> shall have 100% availability.   \n[This is unacceptable because 100% is an absolute that is impossible to achieve and verify.  \nAlso, available over what time period?] \nImproved: The <SOI> shall have an Availability of greater than or equal to 98% during",
  "Also, available over what time period?] \nImproved: The <SOI> shall have an Availability of greater than or equal to 98% during \nO perating_H ours. \n[Note use of the glossary to define Operating_Hours. Alternatively, this requirement could be \nstated as a need.  Then those transforming the need into requirements would develop a",
  "Guide to Writing Requirements  96 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nfeasible concept for doing so and then derive specific Design Input Requirements that would \nresult in the need being met.] \n \nUnacceptable: The Pumping_Station shall maintain the flow of water at 100 liters per second for \n30 minutes.   \n[This is unacceptable because the requirement is impossibly precise to maintain in terms of the \nflow rate (and impossibly precise to measure in verification) as well as being impossibly precise \nto deliver for 30 minutes exactly. Also, it is not clear under what conditions this applies—when in \noperations, when powered on, when commanded?] \nImproved: When in operations, the Pumping_Station shall maintain Water_Flow at 100 ±10 liters \nper second for greater than 30 minutes.   \n[Now the range of acceptable flow performance and time frame is clear and feasible.  Given that",
  "per second for greater than 30 minutes.   \n[Now the range of acceptable flow performance and time frame is clear and feasible.  Given that \nthe condition “when in operations” this requirement applies whenever the Pumping_Station is \nactive—no matter how long. Also, what is the intent for how long—31 minutes satisfies the \nrequirement, but what if the real intent is for however long the Pumping Station is in operations \nwhich could be hours or days—again depending on the operating conditions and need. Further, \nis the 30 minutes of continuous flow or a total of 30 minutes within a set time period?] \n4.7 Conditions \n4.7.1 R2 7 – EXPLICIT C ONDITIONS  \nDefinition: \nState conditions’ applicability explicitly instead of leaving applicability to be inferred from the \ncontext. \nElaboration: \nSometimes needs or requirements are only applicable under certain conditions and multiple \nactions may need to be taken when a given condition exists.  In these cases, the condition should",
  "Sometimes needs or requirements are only applicable under certain conditions and multiple \nactions may need to be taken when a given condition exists.  In these cases, the condition should \nbe repeated in the text of each need statement or requirement statement, rather than stating the \ncondition and then listing the actions to be taken.  This will enable verification of each action \noccurring when the condition exists and identifying any specific action that fails to occur and \nresolving that issue specifically. \nAs presented in R1, and described in more detail in Appendix C, some common applicability \nconditions include event-driven requirements, state-driven requirements, optional features \nrequirements, or unwanted behavior requirements. Furthermore, some of those applicability \nconditions can be mixed together ending up into a more complex yet complete structure (mixing a \nwhile statement to refer to a given state, and when  statement to refer to a trigger is common in",
  "conditions can be mixed together ending up into a more complex yet complete structure (mixing a \nwhile statement to refer to a given state, and when  statement to refer to a trigger is common in \nmany system requirements). \nIf a condition that applies to a need or requirement is not stated explicitly within the need or \nrequirement statement, the need or requirement statement is not C omplete (C4), \nVerifiable/Validatable (C7), nor Correct (C8) unless the condition clause is included. \nNeeds are communicated at a higher level of abstraction, often concerning an overall capability of \nthe system, as such they can be ubiquitous at this level of abstraction and are often stated \nwithout any specific conditions.  However, if a specific condition is applicable, it should be \nincluded within the need statement to ensure the intent clear.",
  "Guide to Writing Requirements  97 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nSee also R1 , R11, R18 and Appendix C. \n \nExamples: \nUnacceptable:  \nThe Free_Access_Mode shall be set to ON within <xxx ms>. \nThe Fire_Door_Unlock command having the characteristics defined in <ICD xyz> shall be \nsent to each Fire_D oor within <xxx ms>. \n[This is unacceptable because the condition or trigger for these actions is not stated. Also, note \nthe actions are written in passive voice which violates R2.  Each action needs to be \ncommunicated in a separate active voice requirement statement with the condition or trigger for \nwhich the action is to be initiated.  For multiple conditions for a single action see R28.] \nImproved: (Split into two requirements) \nIn the event of Fire_Detection, the Fire_Control_Subsystem shall set the Free_Access_Mode \nto ON within <xxx ms>. \nIn the event of Fire_Detection, the Fire_Control_Subsystem shall send the Fire_Door_Unlock",
  "to ON within <xxx ms>. \nIn the event of Fire_Detection, the Fire_Control_Subsystem shall send the Fire_Door_Unlock \nunlock command having the characteristics defined in <ICD xyz> to each Fire_D oor within \n<xxx ms>. \n[Note that there is a Fire Detection subsystem responsible for detecting fires and setting the \nFire_Detection parameter to “TRUE” which triggers the two actions.   All other subsystems that \nare monitoring when the Fire_Control_Subsystem has set the Free_Access_Mode to “TRUE” will \nhave their own requirements to monitor this parameter and take the required action(s) as stated \nin their set of requirements.  All Fire Doors will have their own requirements to monitor for the \nFire_Door_Unlock command and to unlock when the command is received.] \n \n4.7.2 R 28 – M ULTIPLE C ONDITIONS  \nDefinition: \nExpress the propositional nature of a condition explicitly for a single action instead of giving lists of \nactions for a specific condition. \nElaboration:",
  "Definition: \nExpress the propositional nature of a condition explicitly for a single action instead of giving lists of \nactions for a specific condition. \nElaboration: \nSometimes a given action is to be performed based on the existence of multiple conditions or a \ncombination of one or more conditions.  When multiple conditions are listed for a single action in \na single requirement statement, it may not be clear whether all the conditions must hold (a \nconjunction) or any one of them (a disjunction) for the action to take place.   \nThe wording of the requirement should make this clear in order to avoid ambiguity but also to \nfacilitate verification the system performs each of the individual actions as specified.  \nWhen the combination of multiple conditions that trigger an action is complex, consideration \nshould be given to the use of a diagram or table (see R23). \nNeeds are communicated at a higher level of abstraction often concerning an overall capability of",
  "should be given to the use of a diagram or table (see R23). \nNeeds are communicated at a higher level of abstraction often concerning an overall capability of \nthe system, as such they are ubiquitous at this level of abstraction and are often stated without \nany specific conditions. \n \nExamples:",
  "Guide to Writing Requirements  98 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nUnacceptable:  \nThe Audit _Clerk shall be able to change the status of the action item when: \n - the Audit _Clerk originated the item; \n - the Audit _Clerk is the actionee; and \n - the Audit _Clerk is the reviewer. \n[This is unacceptable because it is not clear whether all the conditions must hold (a \nconjunction) or any one of them (a disjunction).  Also, the requirement contains the phrase “be \nable to” which violates R11.] \nBetter: If the requirement is interpreted as a disjunction:  \nThe Audit_System shall change the Action_Item status requested by the Audit_Clerk when one \nor more of the following conditions are true: \n - the Audit_Clerk originated the Action_Item; \n - the Audit_Clerk is the Actionee; or \n - the Audit_Clerk is the R eviewer. \n[Although the requirement is now improved, there is still the issue of verification. If the status",
  "- the Audit_Clerk is the Actionee; or \n - the Audit_Clerk is the R eviewer. \n[Although the requirement is now improved, there is still the issue of verification. If the status \ndoes not change with one of the listed conditions, then the entire requirement fails verification, \neven if the other two conditions are met as specified.] \nBetter: In this case, it would be best to state three distinct requirements as this makes each \natomic and retains the same overall intent.  From an allocation, traceability, and verifiability \nperspective this form is preferable. \nThe Audit_System shall change the Action_Item status requested by the Audit_Clerk when the \nAudit_Clerk originated the Action_Item. \nThe Audit_System shall change the Action_Item status requested by the Audit_Clerk when the \nAudit_Clerk is the Actionee. \nThe Audit_System shall change the Action_Item status requested by the Audit_Clerk when the \nAudit_Clerk is the R eviewer. \nBetter if interpreted as a conjunction:",
  "Audit_Clerk is the Actionee. \nThe Audit_System shall change the Action_Item status requested by the Audit_Clerk when the \nAudit_Clerk is the R eviewer. \nBetter if interpreted as a conjunction:  \nThe Audit_System shall change the Action_Item status requested by the Audit_Clerk when the \nfollowing conditions are true: \n - the Audit_Clerk originated the Action_Item AND  \n - the Audit_Clerk is the Actionee AND  \n - the Audit_Clerk is the R eviewer. \n[In this form, the three conditions are expressed as a logical condition such that all three must \nall be true for the logical condition to be true.] \n4.8 Uniqueness \n4.8.1 R 29 – C LASSIFICATION  \nDefinition: \nClassify needs and requirements according to the aspects of the problem or system it addresses. \nElaboration: \nBy classifying needs or requirements by type or category, it is possible to group or sort \nrequirements to help identify potential duplications and conflicts within a given type or category.",
  "Guide to Writing Requirements  99 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nThe ability to view specific groups of needs or requirements can also assist in identifying what \nneeds or requirements may be missing helping to address the characteristic of completeness \n(C10) as associated with the set of needs or set of requirements. \nIt is useful to assign to each need statement and requirement statement an attribute associated \nwith its type or category.  (See NRM  for more guidance on organizing needs and requirements \nand the use of Attribute A 40 - type/category).   \nExamples of types or categories of needs and requirements include form, fit, \nfunction/performance, quality (-ilities), and compliance (standards and regulations).  These can \nbe further grouped in to sub types or categories.  Refer to the NRM Sections 4 and 6 for a \ndetailed discussion concerning organizing needs and requirements.",
  "be further grouped in to sub types or categories.  Refer to the NRM Sections 4 and 6 for a \ndetailed discussion concerning organizing needs and requirements. \nThe type/category attribute is most useful because it allows the needs and requirements \ndatabase to be viewed by a number of designers and stakeholders for a wide range of users.  For \nexample, maintainers could review the database filtering out all but the maintenance \nrequirements, engineers developing test plans could filter and extract all verification \nrequirements, and so on.  To that end then, the organization would choose types or categories \nthat are useful for the management of their need or requirement set tailored to their specific \nproduct line and processes.  As discussed in the NRM, the use of attributes allows reports to be \ngenerated for all needs or requirements of a certain type or category, allowing the identification of \ndependencies, duplication, conflicts, or absence of requirements.",
  "generated for all needs or requirements of a certain type or category, allowing the identification of \ndependencies, duplication, conflicts, or absence of requirements. \nEach different type might be related to one or a few different patterns in the catalog of agreed \npatterns. \nThe classification used for needs and requirements is defined at organization or project level. The \nclassification schema should be defined as part of the project data dictionary.  \nHow an organization organizes needs and requirements should be clearly defined in the \norganization’s process documents and associated templates for organizing sets of needs and \nrequirements.   \n \nExamples: \nExample classifications: Functional, Performance, Operational, R eliability, Availability, \nMaintainability, Safety, Security, Design and Construction Standards, Physical Characteristics.  \nSee the NRM for more guidance on organizing needs and requirements. \nSee Also R41  – Related Requirements",
  "See the NRM for more guidance on organizing needs and requirements. \nSee Also R41  – Related Requirements \n4.8.2 R3 0 – U NIQUE EXPRESSION  \nDefinition: \nExpress each need and requirement once and only once. \nElaboration: \nAvoid including the same or equivalent need and requirement more than once, either as a \nduplicate or in similar form.  Exact duplicates are relatively straightforward to identify; finding \nsimilar need or requirement statements with slightly different wording is much more difficult but is \naided by the consistent use of defined terms (R4) and by classification (R29), as well as the use \nof a properly defined project data dictionary, ontology or glossary in which synonymies and \nequivalences between terms and acronyms can be defined.",
  "Guide to Writing Requirements  100 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nNLP/AI tools can help in the identification of duplicates or similar needs or requirements. In any \ncase, when following the agreed patterns for statement (R1) and a data dictionary, the detection \nof duplicates and similar results far easier. \nAvoidance of duplication can be aided by classification (R29) so a subset of needs or \nrequirements can be compared.   \n \nExamples: \nExact duplicates can be found by matching of text strings.  The main problem is to identify \nsimilarities with different expressions, but which are equivalent.   \nFor example, the following statements are overlapping in that the first is a subset of the second: \nThe <SOI > shall generate a report of financial transactions containing the information defined in \n<some standard or contract deliverable listing>. \nThe <SOI> shall generate a financial report. \n4.9 Abstraction \n4.9.1 R3 1 – SOLUTION FREE  \nDefinition:",
  "<some standard or contract deliverable listing>. \nThe <SOI> shall generate a financial report. \n4.9 Abstraction \n4.9.1 R3 1 – SOLUTION FREE  \nDefinition: \nAvoid stating implementation in a need statement or requirement statement unless there is \nrationale for constraining the design. \nElaboration: \nAs design inputs, every system endeavor should have a level of needs and requirements for an \nentity that captures inputs to the architectural and design activities (what - design inputs) without \nincluding implementation (how - design outputs) as shown in Figure 2.   \nSystem level needs and requirements should provide a system-level requirement for the overall \nconcern to be addressed by design.  The first level of architecture may be laid out, but \nsubsystems are considered as black boxes to be elaborated as the project team moves down \nlevels of the architecture.  See the NRM concerning levels and moving between levels.",
  "subsystems are considered as black boxes to be elaborated as the project team moves down \nlevels of the architecture.  See the NRM concerning levels and moving between levels.  \nWhen reviewing a requirement that states implementation (how), ask “for what purpose?  The \nanswer will reveal the real requirement.  (Notice that this question is subtly different from simply \nasking \"Why?” and encourages a teleological rather than causal response.)  \nUnderstanding the concepts of design inputs versus design outputs allows engineers to ask the \nquestion: “Is this requirement addressing “what” the system needs to do versus “how ” the system \nneeds to do it”?  The answer to these questions has the potential to help do three things: \n1. Rephrase the requirement in terms of the concern to be addressed by the design. \n2. Determine if the requirement is at the right level. \n3. Identify which design input requirement(s) or need(s) the design output requirement is",
  "2. Determine if the requirement is at the right level. \n3. Identify which design input requirement(s) or need(s) the design output requirement is \naddressing or whether the design input requirement is missing. \nOften when rationale is provided with requirements that state implementation (design output), the \nrationale often answers the “for what purpose?” question, and thus the real (and often missing) \ndesign input requirement may be extracted from the rationale.",
  "Guide to Writing Requirements  101 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nExamples: \nGeneral: For a medical diagnostic system \n• Stakeholders need statement: “The <stakeholders> need the <diagnostic system> to measure \n[something] with an accuracy as good as or better than similar devices in the market.”  \n[This is an appropriate level of abstraction for a stakeholder need statement, clearly stating \nthe expectation the stakeholders have concerning accuracy, however this would not be a \ngood design input requirement.] \n• Requirement transformed from the stakeholder need statement: “The <diagnostic system> \nshall measure [something] with an accuracy of [xxx].”  \n[The developers have explored various concepts for meeting the need for accuracy, have \nexamined candidate technologies, have accessed their maturity (technology readiness level \n(TRL), and have decided that the value [xxx] is feasible with acceptable risk for this lifecycle",
  "examined candidate technologies, have accessed their maturity (technology readiness level \n(TRL), and have decided that the value [xxx] is feasible with acceptable risk for this lifecycle \nstage.  As stated, this is an appropriate level of detail for a design input requirement.] \nNote that when dealing with measures, both accuracy and precision must be addressed, either \nas separate requirements or including both in a measurement requirement defining \ncharacteristics of the measured parameter. \nThese system-level design input accuracy and precision requirements are then allocated to the \nparts of the system architecture that have a role in meeting the overall system accuracy and \nprecision requirements.  For a medical diagnostic system this could include allocations to the \nhardware (instrument), assay (biological sample), and software.  These allocations could then \nbe further sub-allocated within the hardware, assay, and software lower-level entities.",
  "hardware (instrument), assay (biological sample), and software.  These allocations could then \nbe further sub-allocated within the hardware, assay, and software lower-level entities.   \nAs long as the requirements are written on the accuracy and precision allocations and not how \nthat accuracy or precision will be obtained by one of the architectural entities, the requirements \nare Design Input Requirements.  As soon as specific hardware components are named (laser, \nLEDs emitting light at a specific wavelength, optical system components, specific \nmagnifications, algorithms, formulations, etc.,) then the requirements are reflecting design \noutputs and need to be communicated within design output artifacts (specifications).  \n \nUnacceptable: Traffic lights shall be used to control traffic at the intersection.   \n[This is unacceptable because “Traffic lights” are a solution (design output).  Why are traffic \nlights needed? This requirement is also written in passive voice - see R 2]",
  "[This is unacceptable because “Traffic lights” are a solution (design output).  Why are traffic \nlights needed? This requirement is also written in passive voice - see R 2] \nImproved: (several requirements): \nW hen a Pedestrian signals an intent to cross the street at the Intersection, the \nTraffic_Control_System shall provide [the Pedestrian a “Walk” signal AND provide the traffic a \n“Stop” signal]. \nThe Traffic_Control_System shall limit the Wait_Time of Vehicles traversing the Intersection to \nless than Daylight_Wait_Time during N ormal_D aytime traffic conditions.   \n[Note that glossary definitions should be used for Traffic_Control_System, \nDaylight_Wait_Time_Value, Normal_Daytime, Vehicles, and Intersection.] \n \nUnacceptable: When a pedestrian signals his presence by pressing a button on the traffic-light \npillar, the traffic light shall turn red for the traffic to stop.   \n[This is unacceptable because this requirement contains solution-biased detail - design output.",
  "pillar, the traffic light shall turn red for the traffic to stop.   \n[This is unacceptable because this requirement contains solution-biased detail - design output.  \nIn addition, the requirement is unacceptable because it has additional information concerning",
  "Guide to Writing Requirements  102 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nthe action traffic is to take and does not specify the duration of the red light.  The use of a \npronoun is also not recommended]. \n \nImproved: When the presence of a Pedestrian that needs to cross the street at the Intersection \nduring Day_Light_Hours is detected, the Traffic_Control_System shall issue a \nTraffic_Stop_Signal for Average_Pedestrian_Crossing_Time.  \n[This design input requirement allows freedom in determining the best solution (design output), \nwhich may be a means of automatic detection rather than button pushing along with the type \nand characteristics of the signal issued.  Note that pedestrians may be in proximity of the \nintersection that do not wish to cross the street.]  \n[An interesting consideration from a consistency or conflict perspective, what if the \nAverage_Pedestrian_Crossing_Time” is greater than the “Daylight_Wait_Time_Value” defined",
  "[An interesting consideration from a consistency or conflict perspective, what if the \nAverage_Pedestrian_Crossing_Time” is greater than the “Daylight_Wait_Time_Value” defined \nfor the traffic in the previous example.  Each time is from a different entity perspective.] \n[Note that glossary definitions should be used for “Pedestrian”, “Traffic_Control_System”, \n“Traffic_Stop_Signal”, “Day_Light_Hours”, “Average_Pedestrian_Crossing_Time”, and \n“Intersection”.] \n \nExceptions and relationships: \nSometimes solutions have to be described in requirements, even if it is very detailed for a given \nlevel, for example if the airworthiness authorities require the use of a specific template for a \ncertain report; or if a naval customer requires that the new naval vessel be equipped with a \nspecific weapon system from a specific supplier; or if all vehicles in a fleet are required to use the \nsame fuel or the next model make use of a particular engine. In these cases, it is not a premature",
  "same fuel or the next model make use of a particular engine. In these cases, it is not a premature \nsolution, but a real stakeholder or customer need concerning a constraint.  As such this is \nacceptable as a design input. \nHowever, as a rule, if a detailed, specific design solution is expressed as a design input without \nproper justification, it may be a premature solution and should be communicated as a design \noutput and an appropriate set of design input needs and associated requirements developed that \ncommunicate “For what purpose?” which the design output requirements can be traced to.  \nExamples of issues concerning design outputs expressed as design inputs include: \n1. The project is developing an upgrade to an existing system (brownfield SE).  Rather than \ndocumenting design input “what” requirements, the project team focuses on known solutions \nand implementations and documenting design output level requirements as design inputs.",
  "documenting design input “what” requirements, the project team focuses on known solutions \nand implementations and documenting design output level requirements as design inputs.  \nThis is problematic in that the real “for what purpose?” question is not being addressed and \nthe real Design Input Requirements are not communicated. \n2. A similar case exists when procuring an off-the-shelf (OTS) solution and communicating the \nrequirements for that solution as Design Input Requirements rather than in a design output \nspecification.  Again, this is problematic in that the real “for what purpose?” question is not \nbeing addressed and the real Design Input Requirements are not communicated. \n3. A common issue arises when an existing system or OTS exists, yet the project develops \nand documents as design inputs a detailed design output level set of requirements (design \noutput specification) for the system rather than a set of design input set of “what”",
  "and documents as design inputs a detailed design output level set of requirements (design \noutput specification) for the system rather than a set of design input set of “what” \nrequirements that would guide the selection of an appropriate OTS.  This can result in a \nredundant set of requirements that are not necessary, will have to be verified - adding \nadditional cost to the project, yet not addressing the “for what purpose?” design input \nrequirement set that should drive the selection of the specific OTS.  Refer to the NRM for a \ndetailed discussion the use of OTS entities.",
  "Guide to Writing Requirements  103 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n4. As part of the lifecycle concept analysis and maturation activities the project team developed \na prototype to access feasibility.  The resulting needs and resulting requirements are based \non the prototype and an associated trade study that resulted a specific solution that meets \nthe needs of the stakeholders.  Rather than communicating the Design Input Requirements, \nthe design output requirements for the prototype are included in the design input set of \nrequirements while not addressing the “for what purpose?” design input requirement set that \nwould drive the design for the prototype. \n4.10 Quantifiers \n4.10.1 R3 2 – U NIVERSAL Q UALIFICATION  \nDefinition: \nUse “each” instead of “all”, “any”, or “both” when universal quantification is intended. \nElaboration: \nThe use of “all”, “both”, or “any” is confusing because it is hard to distinguish whether the action",
  "Elaboration: \nThe use of “all”, “both”, or “any” is confusing because it is hard to distinguish whether the action \nhappens to the whole set or to each element of the set.  “All” can also be hard to verify unless \n“all” can be clearly defined as a closed set.  In many cases, the word “all” is unnecessary and can \nbe removed, resulting in a less ambiguous need or requirement statement. \n \nExamples: \nUnacceptable: The Operation_Logger shall record any (or all) warning messages.   \n[This is unacceptable because of the use of the word “any”, which is then made worse by the \naddition of “(or all)”.] \nImproved: The Operation_Logger shall record each Warning_Message.   \n[Note that Warning_Message must be defined in the glossary so that it is clear that the SOI only \nwill record each defined Warning Message. Also, any conditions or performance must also be \nincluded in the requirements statement for it to be complete.]",
  "will record each defined Warning Message. Also, any conditions or performance must also be \nincluded in the requirements statement for it to be complete.] \n \nUnacceptable: The Record_Subsystem shall display per <Display Standard xyz> the Names of \nboth of the Line_Items.   \n[This is unacceptable because of the use of the word “both”.] \nImproved: The Record_Subsystem shall display per <Display Standard xyz> the Name of each \nLine_Item.  \nImproved: The Record_Subsystem shall display per <Display Standard xyz> each \nLine_Item_Name. \n4.11 Tolerance \n4.11.1 R3 3 – R ANGE OF VALUES  \nDefinition: \nDefine each quantity with a range of values appropriate to the entity to which the quantity applies \nand against which the entity will be verified or validated.",
  "Guide to Writing Requirements  104 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nElaboration: \nWhen it comes to defining performance, single-point values are seldom sufficient and are difficult \nto test.  Ask the question: “if the performance was a little less (or more) than this, would I still buy \nit?” or “Is it still fit for its intended use?” If the answer is yes, then change the need or requirement \nstatement to reflect an acceptable range of values. \nIt also helps to consider the underlying goal: are you trying to minimize, maximize or optimize \nsomething?  The answer to this question will help determine whether there is an upper bound, \nlower bound, or both. \nState the quantities contained in a need or requirement statement with ranges or limits with a \ndegree of accuracy and precision that is appropriate to the entity to which the need or \nrequirement applies and against which the entity will be verified against.",
  "degree of accuracy and precision that is appropriate to the entity to which the need or \nrequirement applies and against which the entity will be verified against.  \nCare should be taken to avoid unspecified value ranges and ensure the quantities are expressed \nwith tolerances or limits.  There are two reasons for this: \n1) Several requirements may have to be traded against each other, and providing tolerances or \nlimits is a way of describing the trade-space.  Seldom is a quantity absolute.  A range of values \nis usually acceptable, providing different performance levels. \n2) Verification against a single absolute value is usually not feasible or at best expensive and \ntime consuming, whereas verification against a defined range of values with upper and lower \nlimits makes verification more manageable. \nCare should also be taken to ensure the tolerances are no tighter than needed.  Tighter \ntolerances can drive costs both in system design and manufacturing as well as the costs in",
  "Care should also be taken to ensure the tolerances are no tighter than needed.  Tighter \ntolerances can drive costs both in system design and manufacturing as well as the costs in \nverifying the system can perform within the tighter tolerances. \nR anges and tolerances must be described in a consistent and unambiguous way. Examples of \npossible structures for such information are: \n10 kg ± 2 kg \n10 kg ± 5% \n10 kg (+0.0 kg / -0.5 kg)  \n… from 10 kg to 12 kg. \n… between 10 kg and 12 kg. \nSpecific scenarios such as '8.0 oz (+0/-0,5 oz)' can be particularly dangerous:  \n1) They require uniformity in terms of decimal format (R40) between the value and the tolerance \nranges: '8.0 oz (+0.0/-0.5 oz)'. \n2) The measurement units must be appropriate and clearly defined for each numerical value \n(R6): '8.0 oz (+0.0 oz / -0.5 oz)' \n3) For comprehension reasons, these structures can be simplified as: \"from 7.5 oz to 8.0 oz\" or",
  "(R6): '8.0 oz (+0.0 oz / -0.5 oz)' \n3) For comprehension reasons, these structures can be simplified as: \"from 7.5 oz to 8.0 oz\" or \n\"between 7.5 oz and 8.0 oz\" (note that the ranges could also be expressed as \"from 8.0 oz to 7.5 \noz\" or \"between 8.0 oz and 7.5 oz\", but comprehension is facilitated by nominating the lower \nvalue first). Also, be aware of tolerance stack up issues. It may be that individual tolerances seem \nreasonable, but when combined with other related component tolerances, there may be an issue.  \nIf one part is at the lower end of the tolerance range and the part it is to interface with is at the \nhigher end of the tolerance range, the parts may not be able to be connected.  Thus, the \ntolerance ranges must be consistent and not in conflict with other related parts of the system \narchitecture in which a part is to interact.  See also R40.",
  "Guide to Writing Requirements  105 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nExamples: \nUnacceptable: The Pumping_Station shall maintain the flow of water at 100 liters per second for \n30 minutes.   \n[This is unacceptable because we do not know whether a solution that addresses more or less \nthan the specified quantities is acceptable Also, it is not clear under what conditions this applies \n– when in operations, when powered on, when commanded?] \nImproved: When in operations, the Pumping_Station shall maintain Water_Flow at 100 ±10 liters \nfor a minimum of 30 minutes.   \n[Now the range of acceptable flow performance is clear and that the 30 minutes is a minimum \nacceptable performance.  Given that the condition “when in operations”, this requirement applies \nwhenever the Pumping_Station is active—no matter how long. Also, a question to be asked is \nwhat is the intent for how long—31 minutes satisfies the requirement, but what if the real intent is",
  "whenever the Pumping_Station is active—no matter how long. Also, a question to be asked is \nwhat is the intent for how long—31 minutes satisfies the requirement, but what if the real intent is \nfor however long the Pumping Station is in operations which could be hours or days – again \ndepending on the operating conditions and need. What if there is not enough water at the inlet to \nthe pumping station to establish the required flow rate?] \nUnacceptable: The Flight_Information_System shall display the current altitude to approximately \n1 meter resolution.   \n[This is unacceptable because it is imprecise.  What is “approximately” in the context of a \ndistance of 1 meter?  Who has the option of deciding what is “approximately”?  How will \n“approximately” be verified?  What is the acceptable tolerance?]  \n[Note that care must be taken to confirm that the units are appropriate in the context of the \norganizational and project templates.  See also R6.]",
  "[Note that care must be taken to confirm that the units are appropriate in the context of the \norganizational and project templates.  See also R6.] \nImproved: The Flight_Information_System shall display Current_Altitude with an accuracy of ±1 \nmeter.   \n[Note that “Current_Altitude” must be defined in the glossary since there are a number of \npossible interpretations of the term.] \nUnacceptable: The <SOI> shall limit arsenic contamination in the drinking water to allowable \nlevels.  Rationale: Arsenic contamination in drinking water can cause health problems.   \n[While “allowable” is acceptable in a need statement, it is unacceptable in a requirement \nstatement because allowable is ambiguous - allowable by whom?  What specific concentration \nis allowable?  In what market?] \nUnacceptable: The <SOI> shall limit arsenic contamination in the drinking water to 1 part per \ntrillion.  Rationale Attribute (A1): Arsenic contamination in drinking water can cause health \nproblems.",
  "trillion.  Rationale Attribute (A1): Arsenic contamination in drinking water can cause health \nproblems.   \n[This is unacceptable because the EPA contamination limit in drinking water is 10 parts per \nbillion.  Requiring a tighter limit may be beyond the ability of current technology to measure or \nif measuring concentrations of 1 part per trillion are possible, the cost to do so may be \nunacceptably high.  Also, no range is specified.  Using ‘less than’ is probably the real intent.] \nImproved: The <SOI> shall limit arsenic contamination in the drinking water to less than10 parts \nper billion.  Rationale Attribute (A1): EPA set the arsenic standard for drinking water at 10 ppb (or \n0.010 parts per million).  The EPA has determined that concentrations of this level or less will \nprotect consumers from the effects of long-term, chronic exposure to arsenic. \nExceptions and relationships:",
  "Guide to Writing Requirements  106 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nThe use of tolerances in need statements may not be as mandatory as their use in requirement \nstatements—see Appendix D. \n4.12 Quantification \n4.12.1 R3 4 – M EASURABLE  PERFORMANCE  \nDefinition: \nProvide specific measurable performance targets appropriate to the entity to which the need or \nrequirement is stated and against which the entity will be verified to meet. \nElaboration: \nSome words signal unmeasured quantification, such as \"prompt”, “fast\", “routine”, “maximum ”, \n“minimum ”, “optimum”, “nominal”, “easy to use”, “close quickly”, “high speed”, “medium -sized”, \n“best practices”, and “user-friendly.” These are ambiguous and need to be replaced by specific \nquantities within feasible ranges that can be measured. \n \nExamples: \nUnacceptable: The <SOI> shall use minimum  power.   \n[This is unacceptable because both words “use” and “minimum” are ambiguous and \nunverifiable.]",
  "Examples: \nUnacceptable: The <SOI> shall use minimum  power.   \n[This is unacceptable because both words “use” and “minimum” are ambiguous and \nunverifiable.] \nImproved: The <SOI> shall consume  less than or equal to 50W  of mains power.   \n[This both considers the underlying goal—to minimize power consumption—and provides a \nmeasurable target.] \n \nUnacceptable: The engine shall achieve an emissions level that is at least 5% less than the \ncompetition’s emission levels 2 years from now.   \n[This is an actual requirement from marketing to an engineering department.  The statement \nsets a completely unmeasurable end state.] \nImproved: The Engine shall achieve an emissions level that is less than or equal to xxx.   \n[where xxx represents the required threshold value, including the appropriate units.] \n \nUnacceptable: The <SOI> shall conform to best practices for spurious emissions. \n[This statement is vague and unverifiable from number of specifics]",
  "Unacceptable: The <SOI> shall conform to best practices for spurious emissions. \n[This statement is vague and unverifiable from number of specifics] \nImproved: The <SOI> shall limit Spurious_Emissions in accordance with <Clause xab of Standard \nXYZ >. \n \nExceptions and relationships: \nSome quantification terms such as “minimum”, “maximum ”, “optimal” are almost always \nambiguous.  Other terms may be ambiguous at lower levels but sufficient at the higher levels and \nas need statements.  For example, it may be appropriate that the business state that “The Aircraft \nshall provide class-leading comfort.”—while such a requirement is not quantifiable and therefore \nnot measurable, it may be sufficient for the business to communicate its intentions as a need",
  "Guide to Writing Requirements  107 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nstatement to developers who can then turn comfort into such measurable quantities such as seat \ndimensions and leg length.  \nThis exception also applies to needs stated at the system or system element levels. \n \n4.12.2 R3 5 – TEMPORAL D EPENDENCIES  \nDefinition: \nDefine temporal dependencies explicitly instead of using indefinite temporal keywords such as \n“eventually”, “until”, “before”, “after”, “as”, “once”, “earliest”, “latest”, “instantaneous”, \n“simultaneous”, and “at last”. \nElaboration: \nU sing indefinite temporal keywords such as those express above signal non-specific timing, are \nambiguous, and not verifiable.  Indefinite temporal keywords can cause confusion or unintended \nmeaning.  These words should be replaced by specific timing constraints. \n \nExamples: \nUnacceptable: Continual operation of the pump shall eventually result in the tank being empty.",
  "meaning.  These words should be replaced by specific timing constraints. \n \nExamples: \nUnacceptable: Continual operation of the pump shall eventually result in the tank being empty.   \n[This is unacceptable because “eventually” is ambiguous.  Also, this statement is not written in \nthe proper form.  It is written on “operation” rather than on a requirement on the pump which \nviolates R3.] \nImproved: The Pump shall remove greater than 99% of the Fluid from the Tank in less than 3 \ndays of continuous operation. \n4.13 Uniformity of Language \n4.13.1 R3 6 – C ONSISTENT TERMS  AND U NITS \nDefinition: \nUse each term and unit of measure consistently throughout need and requirement sets as well as \nassociated models and other SE artefacts developed across the lifecycle. \nElaboration: \nR4 requires the definition of terms in each requirement and R6 requires units of measure to be \nincluded with numbers.  In addition to those rules, terms and units of measure must be used",
  "R4 requires the definition of terms in each requirement and R6 requires units of measure to be \nincluded with numbers.  In addition to those rules, terms and units of measure must be used \nconsistently throughout not only the sets of needs and requirements, but all artifacts developed \nacross all lifecycle stages.   \nA common ontology therefore needs to be defined for each project defining terms and units of \nmeasure across all artifacts, including the sets of needs and requirements as well as all design \noutput artifacts.  Synonyms are not acceptable. \nA glossary or data dictionary is extremely useful to define words precisely.  Terms defined within \nthe glossary or data dictionary are capitalized to signify that the word or term being used has a \nspecific meaning in the context of the set of statements.   \nFor a numeric value for a given variable that may appear in multiple needs or requirements, to",
  "specific meaning in the context of the set of statements.   \nFor a numeric value for a given variable that may appear in multiple needs or requirements, to \nhelp ensure consistency, it is a best practice to define the variable and its numeric value and units",
  "Guide to Writing Requirements  108 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nof measure in a glossary or data dictionary.   An example would be the maximum and minimum \nenvironment temperatures specified in multiple places.  For example, \nMa ximum_Temperature_Value.  This also resolves the units problem as the units can be defined \nat the same time in the glossary entry.  Although it could be argued that the loss of the value in \nthe text makes the requirement harder to understand, the ability to maintain consistency is of \nhigher priority. \nIdeally, the glossary or data dictionary used for the sets of needs and requirements is the same \nas the project glossary or data dictionary. \nWhen describing an action performed by a system or system element, states and modes should \nbe used consistently to make sure it is clear as to which state/mode the statement applies.  \nAdditionally, whenever mode/state definitions or transitions are involved, these must come from a",
  "be used consistently to make sure it is clear as to which state/mode the statement applies.  \nAdditionally, whenever mode/state definitions or transitions are involved, these must come from a \nproject dictionary (ontology, model, etc.) ensuring its consistent use throughout the specification. \nIt is also important to maintain consistency in how a group of related units is formatted for \nexample for hours, minutes, or seconds (hh:mm:ss) or dates month day year (mm/dd/yyyy vs \nyyyy/mm /dd vs dd/mm/yyyy) \n \nExamples: \nUnacceptable: It would not be acceptable for one requirement to refer to an entity using one term \nand another to refer to the same entity using another term. \nFor example, a subsystem set of Design Input Requirements contains the following three \nrequirement statements: \n    The R adio shall ....  \n    The R eceiver shall .... \n    The Terminal shall .... \nOr: \n    The Bleed_Valve shall ....  \n    The H igh-Pressure_Bleed_Valve shall .... \n    The HPBV shall ....",
  "The R adio shall ....  \n    The R eceiver shall .... \n    The Terminal shall .... \nOr: \n    The Bleed_Valve shall ....  \n    The H igh-Pressure_Bleed_Valve shall .... \n    The HPBV shall .... \nIf each term refers to the same subject, the statements need to be modified to use the same word \n(or, if they are meant to be different, the words must be defined to be so). \nImproved: Settle on only one term, define it in the glossary or data dictionary, and then use it \nconsistently in each need, requirement, and design output artifact. \n \nUnacceptable: When the Input_Valve is connected to the Water_Source, the Control_Subsystem \nshall open the Inlet_Valve.   \n[Two terms are used for the same thing “Input_Valve” and “Inlet_Valve”.] \nImproved: When the Inlet_Valve is connected to the Water_Source, the Control_Subsystem shall \nopen the Inlet_Valve. \n \nUnacceptable: It would not be acceptable for one requirement to use one unit of measure (for",
  "open the Inlet_Valve. \n \nUnacceptable: It would not be acceptable for one requirement to use one unit of measure (for \nexample, US - feet) and another requirement to use another unit of measure (for example, Metric \n- meter).",
  "Guide to Writing Requirements  109 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nImproved: Settle on which units of measure will be used and use that unit of measure consistency \nacross all SE artifacts including needs, Design Input Requirements and design output \nspecifications.  \nAlso, see R40 for guidance regarding the conversion from one measurement system to another \nand the use of significant digits. \n4.13.2 R3 7 – A CRONYMS  \nDefinition: \nIf acronyms are used, they must be consistent throughout need and requirement sets as well as \nassociated models and other SE artefacts developed across the lifecycle. \nElaboration: \nThe same acronym must be used in each need and requirement; various versions of the acronym \nare not acceptable. The use of different acronyms implies that the two items being referred to are \ndifferent.  Inconsistency in the use of acronyms can lead to ambiguity.",
  "are not acceptable. The use of different acronyms implies that the two items being referred to are \ndifferent.  Inconsistency in the use of acronyms can lead to ambiguity.  \nIn a document-based practice of SE, a common rule is to use the full term and the abbreviation or \nacronym (in brackets) the first time and then use just the abbreviation or acronym from then on \nwithin a document (as is done in this Guide). In a data-centric practice, need and requirement \nsets that are generated and managed within an RMT , so there is no guarantee that the set will be \nextracted in any particular order, so the old practice is not useful.  To prevent confusion, either \navoid using acronyms or (more usefully) ensure that all acronyms are defined in the project \nglossary or data dictionary. \nWhen used, acronyms must be used consistently throughout not only the sets of needs and \nrequirements, but all artifacts developed across all lifecycle stages.",
  "glossary or data dictionary. \nWhen used, acronyms must be used consistently throughout not only the sets of needs and \nrequirements, but all artifacts developed across all lifecycle stages.  \nAcronyms must be written in a consistent way in terms of capitalization and periods.  For \nexample, always use “CMDP ” and not “C.M.D.P.” nor “CmdP ”. \n \nExamples: \nUnacceptable: It would not be acceptable for one requirement to use the acronym “CP ” for \ncommand post and another acronym “CMDP” to also refer to the “command post.” The use of two \ndifferent acronyms implies that the two system elements being referred to are different. \nImproved: Settle on only one acronym, define it in the list of acronyms, and then use it \nconsistently throughout the requirement set. \n \nUnacceptable: It would not be acceptable for one requirement to refer to the “Global Positioning \nSystem” and the remaining requirements refer just to “GPS. ”",
  "Unacceptable: It would not be acceptable for one requirement to refer to the “Global Positioning \nSystem” and the remaining requirements refer just to “GPS. ” \nImproved: Use the full term every time or, perhaps more usefully, define the acronym in the \nproject acronym list or glossary and use it every time. \n \n4.13.3 R 38 – A BBREVIATIONS  \nDefinition: \nAvoid the use of abbreviations in needs and requirement statements as well as associated \nmodels and other SE lifecycle artefacts.",
  "Guide to Writing Requirements  110 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nElaboration: \nThe use of abbreviations adds ambiguity and is to be avoided unless the context is clear, and the \nabbreviation is clearly defined in the project glossary or acronym list.  \nIt is common to have an abbreviation with multiple meanings depending on context.   \nIn the case where there is a single meaning and that abbreviation is defined in the project \nglossary, it is acceptable to use the abbreviation within the text of the need or requirement.   \nHowever, when there are abbreviations that have different meanings, it is a best practice to avoid \nambiguity by spelling out the abbreviation. \n \nExamples: \nUnacceptable: It would not be acceptable for one requirement to refer to the abbreviation “op” \nmeaning operation and another to refer to the “op” meaning the operator. \nImproved: Avoid the abbreviation and use the full term every time. \n4.13.4 R 39 – STYLE G UIDE  \nDefinition:",
  "meaning operation and another to refer to the “op” meaning the operator. \nImproved: Avoid the abbreviation and use the full term every time. \n4.13.4 R 39 – STYLE G UIDE  \nDefinition: \nUse a project-wide style guide for individual need statements and requirement statements. \nElaboration: \nA style guide provides a template and patterns for developing requirements, defines the attributes \nthat the organization chooses to document with each need statement and requirement statement, \nselects the requirement patterns to be used for specific types of needs and requirements, and \ndefines what other information should be included (such as the glossary).  \nThe style guide should also list the rules the organization wants to use (based on this G uide).  \nWhen managing needs and requirements electronically (versus in a printed document) within a \nRMT or other systems engineering tool, this information is the basis of the schema that defines \nthe organization of the data within the tool database.",
  "RMT or other systems engineering tool, this information is the basis of the schema that defines \nthe organization of the data within the tool database. \nTo ensure need statements and requirement statements are consistently structured, the \norganization needs to include pre-defined patterns or templates in their development and \nmanagement process.  The patterns or templates can come from an international standard, or an \norganizational standard set of patterns or templates based on type of stakeholder need or \nrequirement.  If using an RMT , a standard schema should be defined as part of the needs and \nrequirements development and management process.  The patterns need to be tailored to the \norganization’s domain and the distinct types of products within that domain. \nPatterns and templates for individual need statements and requirement statements help ensure \nconsistency and completeness of the individual statements (see Appendix C ). \nSee also R1. \n \nExamples:",
  "Patterns and templates for individual need statements and requirement statements help ensure \nconsistency and completeness of the individual statements (see Appendix C ). \nSee also R1. \n \nExamples: \nFor example, each organization should have a style guide or schema to address such issues as \nthe selection and definition of what need patterns and requirement patterns should be used for \nwriting need statements and requirement statements of a particular type, the selection and use of \nattributes, standard abbreviations and acronyms, layout and use of figures and tables, layout of \ndocuments or databases and, statement numbering.",
  "Guide to Writing Requirements  111 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nTerms used throughout the sets of needs and sets of requirements are defined in an ontology or \nat least a project glossary. \n \n4.13.5 R40  – D ECIMAL FORMAT  \nDefinition: \nUse a consistent format and number of signification digits for the specification of decimal \nnumbers. \nElaboration: \nA decimal separator is a symbol used to separate the integer part of a number from the fractional \npart of a number written in decimal form. For example, a period ‘.’ is used as the decimal \nseparator (called a decimal point) in ‘12.45’; and a comma ‘,’ is used as the decimal separator \n(called a decimal comma) in ‘12,45’. The choice of decimal separator also affects the choice of \nsymbol for the thousands separator.  \nThere are three principal conventions to combine thousand separators and decimal separators \n(where 'x' represents the thousands and 'y' represents the hundreds, tens and units of the integer",
  "There are three principal conventions to combine thousand separators and decimal separators \n(where 'x' represents the thousands and 'y' represents the hundreds, tens and units of the integer \npart, while 'z' defines the decimal part): \n• A space is used as the thousands separator (recommended internationally) and a decimal \npoint or a decimal comma as the decimal separator—for example ‘xxx yyy.zzz’ and  \n‘xxx yyy,zzz’. \n• A comma is used as a thousands separator (used in most English-speaking countries) and a \ndecimal point is used as a decimal separator—for example ‘xxx,yyy.zzz’. \n• A period is used as a thousands separator (used in many non-English speaking countries) \nand a decimal point is used as a decimal separator—for example ‘xxx.yyy,zzz’. \nAny one of the above conventions may be used, providing the one convention is used \nconsistently throughout. \nWhen specifying numbers between 1 and –1, avoid using '.99' or '–,99'; use the zero in front of",
  "consistently throughout. \nWhen specifying numbers between 1 and –1, avoid using '.99' or '–,99'; use the zero in front of \nthe decimal separator. For instance, use '0.99' or '–0,99'. \nThe use of the number of significant digits should also be consistent throughout (based on the \nneed for precision in the need and requirement set). For example, avoid using ‘512’, ’10.15’ and \n‘5.1’ in the same set—use instead ‘512.00’, ’10.15’ and ‘5.10’ (assuming two significant places is \nthe agreed convention throughout). \nIn respect to numerical values represented as factions (1/16).  Some tools may provide decimal \nequivalents in terms of decimal numbers with results of .06 or 0.063 instead of (0.0625) based on \nnumber of decimal places allowed in the requested output.  Fractions imply a level of accuracy \nand tolerancing which may be lost when the design drawings are created and transferred to \nanother entity.",
  "and tolerancing which may be lost when the design drawings are created and transferred to \nanother entity.   \nCaution concerning significant digits should also be observed when converting from one \nmeasurement system to another. For example, kilograms to pounds.   1 kg = 2.2046226218 lbs 1 \nlbs. = 0.45359237 kg Example: convert 15 kg to lbs.: 15 kg = 15 × 2.2046226218 lbs. = \n33.0693393277 lbs.   What number of significant digits is appropriate?  In this example is it ok to \nuse 33 lbs., 33.1 lbs., 33.07 lbs., or 33069 lbs.?  Notice the 15 kg that was being converted had",
  "Guide to Writing Requirements  112 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nno decimal places.  What precision is needed when 15 kg a “ballpark” estimation of someone \nsays “about 1000kg”?  If so, using 1, 2, or 3 decimal places may not be warranted. \nAgain, organizations need to be consistent concerning these conversions and the number of \nsignification digits included in a need or requirement statement. Where a conversion has been \nmade, it may be useful to record in the Rationale Attribute A1 that the figure has been converted \nfrom another measurement system and rounded to x decimal places. \nCare should be taken with regard to the selection of the number of significant digits on the cost of \ndesign, verification, and validation—inappropriately high precision can cause significantly higher \ncosts. \n \nExamples: \nUnacceptable: The <SOI> shall have an MTBF of less than or equal to 9.499,99 h. &  \nThe <SOI> shall consume less than or equal to 0.99 W.",
  "costs. \n \nExamples: \nUnacceptable: The <SOI> shall have an MTBF of less than or equal to 9.499,99 h. &  \nThe <SOI> shall consume less than or equal to 0.99 W. \n[These two statements are unacceptable when included in the same set because a different \nformat is used in the two statements.] \nImproved:  \nThe <SOI> shall have an MTBF of less than or equal to 9,499.99 h. &  \nThe <SOI> shall consume less than or equal to 0.99 W.  \nOR  \nThe <SOI> shall have an MTBF of less than or equal to 9.499,99 h. &  \nThe <SOI> shall consume less than or equal to 0,99 W. \n \nUnacceptable: The <SOI> shall have an MTBF of less than or equal to 0.99 h. &  \nThe <SOI> shall consume less than or equal to .99 W. \n[These two statements are unacceptable when included in the same set because a different \nformat is used in the two statements.] \nImproved:  \nThe <SOI> shall have an MTBF of less than or equal to 9,499.99 h. &  \nThe <SOI> shall consume less than or equal to 0.99 W.  \n \n4.14 Modularity",
  "format is used in the two statements.] \nImproved:  \nThe <SOI> shall have an MTBF of less than or equal to 9,499.99 h. &  \nThe <SOI> shall consume less than or equal to 0.99 W.  \n \n4.14 Modularity \n4.14.1 R4 1 – R ELATED N EEDS AND R EQUIREMENTS  \nDefinition: \nGroup related needs and requirements together. \nElaboration: \nN eed and requirements statements that belong together should be grouped together.  This is a \ngood principle for organizing sets of needs and requirements within an RMT  or another SE tool.",
  "Guide to Writing Requirements  113 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nOne approach is to put requirements into groups based on their type or category.  See also R29  \nand R42  and the NRM for more guidance on organizing needs and requirements. \nAn example grouping could be form, fit, function, quality, and compliance.  See R42 .  This \ngrouping forces the team to look at the system from each of these perspectives helping to ensure \ncompleteness of the sets.  Methodologies that only focus on function/performance and fit will \nresult in incomplete sets of needs and requirements. \nIn functional decomposition, functional/performance requirements are grouped by the function \nthat originates them. \nG rouping by type/category helps to ensure completeness of the sets, consistency within sets, and \nmakes it easier to identify missing, overlapping, inconsistent or redundant requirements.  See \nalso R29.   \n \nExamples: \nRequirements may be related by:",
  "makes it easier to identify missing, overlapping, inconsistent or redundant requirements.  See \nalso R29.   \n \nExamples: \nRequirements may be related by: \n- type (for example, critical functions, enabling functions, safety, or security requirements); \n- scenario (for example, requirements arising from a single scenario). \n- interactions with other systems (for example interface requirements). \n- function (for example, multiple requirements defined for a function, each addressing a different \nperformance characteristics, mode, state, condition, or trigger.) \n- capability (for example a needed capability may be released by a set of requirements that \ntogether result in the needed capability to be provided. \n-compliance (for example requirements whose purpose it is to implement a requirement in a \nstandard or regulation. \nSee R29 and the NRM for more guidance on organizing needs and requirements. \n \n4.14.2 R4 2 – STRUCTURED SETS  \nDefinition:",
  "standard or regulation. \nSee R29 and the NRM for more guidance on organizing needs and requirements. \n \n4.14.2 R4 2 – STRUCTURED SETS  \nDefinition: \nConform to a defined structure or template for organizing sets of needs and requirements. \nElaboration: \nA well-organized set of needs and requirements allows an understanding of the whole set to be \nassimilated without undue cognitive loading on the reader. \nDespite what has been stated about the completeness of individual need statements and \nrequirement statements, it is often easier to understand when they are placed in context with \nother related requirements. \nWhether managed within a document or within an RMT, the ability to link together, through \ntraceability, related needs or requirements and groups of needs or requirements is a vital tool in \nidentifying repetition and conflict between need statements or requirement statements.  \nTemplates for organizing needs and requirements will help ensure consistency and completeness",
  "identifying repetition and conflict between need statements or requirement statements.  \nTemplates for organizing needs and requirements will help ensure consistency and completeness \nof your requirement set. \nRefer to the NRM for a detailed discussion on organizing needs and requirements. \nSee also R29, R39, and R41",
  "Guide to Writing Requirements  114 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n \nExamples: \nFor sets of needs or requirements, an outline can be defined that organizes them in categories or \nby type.   \nExamples of Type/Category of needs and requirements include:  \n• Function: Functional/Performance. \n• Fit: Operational: interactions with external systems - input, output, external interfaces, \noperational environmental, facility, ergonomic, compatibility with existing systems, logistics, \nusers, training, installation, transportation, storage. \n• Quality (-ilities): reliability, availability, maintainability, accessibility, transportability, quality \nprovisions, growth capacity. \n• Form: physical characteristics. \n• Compliance:  \n– Standards and regulations—policy and regulatory. \n– Constraints—imposed on the project and the project must show compliance. \n– Business rules—a rule imposed by the enterprise or business unit.",
  "– Standards and regulations—policy and regulatory. \n– Constraints—imposed on the project and the project must show compliance. \n– Business rules—a rule imposed by the enterprise or business unit. \n– Business requirements—a requirement imposed by the enterprise or business unit. \nRefer to the NRM Sections 4 and 6 for a more detailed discussion on this approach to organizing \nneeds and requirements. \nO utlines for organizing needs and requirements can come from international standards or an \norganizational standard tailored to the organization’s domain and different types of products \nwithin that domain.  (The organization for system level needs and requirements may be different \nthan the organization of a set of software needs and requirements.)",
  "Guide to Writing Requirements  115 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nAppendix A:   References \n \nThe following references were consulted when developing this Guide.  When possible, the \nsource is referenced in the text.  In some cases, concepts and information from several sources \nwas used as a basis of the text but are not directly attributable to any single source.  \nReferenced documents are applicable only to the extent specified herein.  \n1 ANSI/AIAA G-043-2012e, Guide to the Preparation of Operational Concept Documents. \n2 Carson, R. S., et al.  (2004). Requirements Completeness. Proceedings of INCOSE 2004. \nWiley. \n3 Carson, R. S., Noel, R. A., “Formal Requirements Verification and Validation,” INCOSE IS \n2018. \n4 Dick, J. and J. Chard, “The Systems Engineering Sandwich: Combining Requirements, \nModels and Design”, INCOSE International Symposium IS2004, July 2004. \n5 Dick, J. and Llorens, J., \"Using Statement-level Templates to Improve the Quality of",
  "Models and Design”, INCOSE International Symposium IS2004, July 2004. \n5 Dick, J. and Llorens, J., \"Using Statement-level Templates to Improve the Quality of \nRequirements\", International Conference on Software and Systems Engineering and \nApplications.  ICSSEA 2012, Paris, France. \n6 Doran, G., Management Review, November 1981. \n7 Génova, G, Fuentes J.M., Llorens, J., Hurtado, O., and Moreno, V., “A Framework to \nMeasure and Improve the Quality of Textual Requirements\", Requirements Engineering, Vol \n18, 2013. \n8 Gilb, T. Competitive Engineering: A Handbook for Systems Engineering, Requirements \nEngineering and Software Engineering Management Using Planguage, Elsevier \nButterworth-Heinemann, 2005. \n9 Heitmeyer, C., J. Kirby, and B. Labaw, “The SCR Method for Formally Specifying, Verifying, \nand Validating Requirements: Tool Support”, Proceeding ICSE '97 Proceedings of the 19th \ninternational Conference on Software Engineering, pp. 610-611, Boston, Massachusetts,",
  "and Validating Requirements: Tool Support”, Proceeding ICSE '97 Proceedings of the 19th \ninternational Conference on Software Engineering, pp. 610-611, Boston, Massachusetts, \nUSA — May 17 - 23, 1997. \n10 Hull, E., K. Jackson, J. Dick, Requirements Engineering, Springer, 2011. \n11 INCOSE -TP -2003-002-04 2015, Jan 2015 Systems Engineering Handbook, Fourth Edition, I \n12 INCOSE -TP -2018-001-01, 2018, INCOSE Integrated Data as a Foundation of Systems \nEngineering, prepared by the Requirements Working Group, INCOSE. \n13 INCOSE -TP -2021-002-01.1, 2022 Needs and Requirements Manual, prepared by the \nRequirements Working Group, INCOSE \n14 INCOSE -TP -2021-004-01, 2022 Guide to Verification and Validation, prepared by the \nRequirements Working Group, INCOSE \n15 INCOSE -TP -2021-003-01, 2022, Guide to Needs and Requirements, prepared by the \nRequirements Working Group, INCOSE \n16 ISO/IEC/IEEE 15288, Systems and software engineering — System lifecycle processes, \nFirst edition 2015-05-15",
  "Requirements Working Group, INCOSE \n16 ISO/IEC/IEEE 15288, Systems and software engineering — System lifecycle processes, \nFirst edition 2015-05-15 \n17 ISO/IEC/IEEE 29148, Systems and software engineering — Lifecycle Processes — \nRequirements engineering, Second edition, 2018-12.  \n18 Mavin, A, Wilkinson, P, Harwood, A, Novak, M, EARS (Easy Approach to Requirements \nSyntax), RE09, IEEE, August 2009 \n19 Ryan, M.J., “An Improved Taxonomy for Major Needs and Requirements Artefacts”, \nINCOSE International Symposium IS2013, June 2013.",
  "Guide to Writing Requirements  116 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n20 Ryan, M., Wheatcraft, L, Dick, J, and Zinni, R, “An Improved Taxonomy for Definitions \nAssociated with a Requirement Expression”, Systems Engineering / Test and Evaluation \nConference SETE2014, Adelaide, 28-30 April 2014. \n21 Ryan, M., Wheatcraft, L., “On the Use of the Terms Verification and Validation”, INCOSE \nInternational Symposium IS2017, July 2017. \n22 Simplified Technical English (STE), Specification (ASD-STE100), ASD Belgium, \nhttp://www.asd-ste100.org/. \n23 US Code of Federal Regulations: Title 21, Part 820, Quality System Regulation \n24 Wheatcraft, L., Ryan, M., Dick, J.  “On the Use of Attributes to Manage Requirements”, \nSystems Engineering Journal, Volume 19, Issue 5, September 2016, pp. 448-458. \n25 Wiegers, K.E., Software Requirements, Redmond, WA: Microsoft Press, 2003. \n26 Wiegers, K.E., More About Software Requirements, Redmond, WA: Microsoft Press, 2006.",
  "Guide to Writing Requirements  117 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nAppendix B:   ACRONYMS AND ABBREVIATIONS \n \nAD 2 Advancement Degree of Difficulty \nAI Artificial Intelligence \nCM  Configuration Management \nConOps  Concept of Operations \nCOTS  Commercial off-the-shelf \nGtNR  Guide to Needs and Requirements \nGtVV  Guide to Verification and Validation \nGtWR  Guide to Writing Requirements \nICD Interface Control Document \nIEC International Electrotechnical Commission \nIEEE Institute of Electrical and Electronics Engineers \nINCOSE  International Council on Systems Engineering \nISO International Organization for Standardization \nKDN  Key Driving Need \nKDR  Key Driving Requirement \nNLP  Natural Language Processing \nNRM  Needs and Requirements Manual \nOpsCon  Operational Concept \nPM  Project Management \nPMP  Project Management Plan \nRMT  Requirement Management Tool \nRWG  Requirements Working Group \nSA  Supplier Agreement \nSAFe  Scale Agile Framework®",
  "PM  Project Management \nPMP  Project Management Plan \nRMT  Requirement Management Tool \nRWG  Requirements Working Group \nSA  Supplier Agreement \nSAFe  Scale Agile Framework®  \nSE  Systems Engineering \nSE HB  Systems Engineering Handbook \nSTE  Simplified Technical English \nSOI System of Interest \nSOW  Statement of Work \nSysML  Systems Modeling Language \nTBD  To Be Determined \nTBS  To Be Supplied \nTBR  To Be Resolved \nTRL  Technology Readiness Level \nUML  Unified Modeling Language",
  "Guide to Writing Requirements  118 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nAppendix C:   Patterns \n \nC.1 Introduction to Patterns \nThe concept of patterns is mentioned in several sections of this Guide. Patterns are used to \nhelp ensure that need statements and requirement statements have the characteristics and \nobey the rules defined in this guide.  This Appendix provides additional elaboration on the use of \npatterns when forming well-formed requirement statements as is discussed in rule R1.  \nThe notion of patterns (also called boilerplates or templates) was initially applied within the \nFuture Surface Combatant (FSC) defense project in the United Kingdom in 1998 (Dick and \nLlorens, 2012) as an aid to solve several difficulties when writing different types of textual \nrequirements (timeliness, etc.).  Once requirement writers were shown example patterns for \nrequirement statements based on type, the difficulty in writing a properly formed requirement",
  "requirements (timeliness, etc.).  Once requirement writers were shown example patterns for \nrequirement statements based on type, the difficulty in writing a properly formed requirement \nstatement was largely overcome.  \n“Structured and normalized” examples of types of requirements can be defined in patterns.  A \npattern may be structured as a sequential list of placeholders, including words, along with \nsyntactic or semantic restrictions.   \nFor example, a basic pattern for defining a well-formed requirement statement is: \n“The <entity> shall <what>, <how well>, <under what conditions>.”  \n“The <stakeholders> need the <entity><what>, <how well>, <under what conditions>.” \nThese placeholders are generally called pattern slots.  The need or requirement statement text \nis written per a need or requirement pattern that is appropriate to the type of need or \nrequirement and what is to be communicated.  The following example represents a requirement",
  "is written per a need or requirement pattern that is appropriate to the type of need or \nrequirement and what is to be communicated.  The following example represents a requirement \nstatement and the associated candidate pattern.  In this example, the requirement pattern has 6 \npattern slots.  \nThe Power System shall have an availability greater than or equal to 98%.  \n<SOI> <shall> <have> a <PHYSICAL_PROPERTY> <OPERATOR> \n<PERCENTAGE /UNIT OF MEASURE > \nCurrently, the terminology for defining the abstractions that represent common natural language \nstructures at the syntactic and semantic level is not mature.  Several approaches are used in \nthe literature (see references at the end of this appendix) with similar intent. \nOne common approach uses the term “templates”.  The term “template” is most often used in \nthe field of requirements management to refer to the structure and organization of a set of",
  "One common approach uses the term “templates”.  The term “template” is most often used in \nthe field of requirements management to refer to the structure and organization of a set of \nneeds or set of requirements communicated in a document form.  The use of such templates \nhelps ensure that the authors consider the complete range of concerns and corresponding types \nof requirements when organizing the sets.   \nFor requirement statements, some authors have coined a more detailed term: “statement-level \ntemplate” to avoid confusion with templates for requirement sets (Dick and Llorens, 2012). \nIn another approach, Hull et al (2002) uses the term “boilerplates” to refer to a grammatical \nstructure for an individual textual requirement statement.",
  "Guide to Writing Requirements  119 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nThe term “pattern” has a clear meaning in software (Gamma et al, 1994) and recently systems \nengineering, usually representing a reusable structure that resolves a problem by instantiating \nand configuring this structure to become a solution.  INCOSE and others promote this term for \nuse in the system engineering lifecycle (INCOSE Patterns Working Group).  To align with these \nuses, this G uide uses the term “patterns” to represent the concept of structured, natural \nlanguage need statement and requirement statement presenting syntactic and semantic \ninformation (restrictions and properties). \nAs this G uide describes, there are multiple factors that contribute to the realization of quality \nneed statements and requirement statements and sets of needs and sets of requirements.  One \nimportant method to assist in achieving quality need and requirement statements and sets of",
  "need statements and requirement statements and sets of needs and sets of requirements.  One \nimportant method to assist in achieving quality need and requirement statements and sets of \nneeds and sets of requirements is by the proper definition and agreement of a set of patterns \nwith which the need statements and requirement statements must comply as stated in rule R1.   \nC.2 Benefits of U sing Patterns  \nEnsuring that needs and requirements conform to agreed patterns and being able to identify the \nspecific elements within a need statement or requirement statement contributes to the ability to \nverity the needs and requirements are well-formed having the characteristics and complying \nwith the rules discussed in this Guide.   \nThis ability is necessary to be able to measure the quality of the need statements and \nrequirement statements and provide actionable information based on any deficiencies related to \na specific statement.",
  "requirement statements and provide actionable information based on any deficiencies related to \na specific statement. \nThe use of patterns enables the development of NLP/AI tools or “digital assistants”.  These \ntools, along with a project ontology (data dictionary), can aid the definition of quality need and \nrequirement statements.  \nThe use of pattens also helps to validate that the requirement statements effectively \ncommunicate the intent of the needs from which they were transformed and validate the need \nstatements effectively communicate the intent of the lifecycle concepts and other sources from \nwhich they were transformed.   \nIn addition, defining need statements and requirement statements following a set of agreed \npatterns also makes it easier to: \n• write concise, easy to read, complete, and atomic need statements and requirement \nstatements; \n• classify needs and requirements within a set of needs or set of requirements;",
  "• write concise, easy to read, complete, and atomic need statements and requirement \nstatements; \n• classify needs and requirements within a set of needs or set of requirements; \n• identify missing information within need and requirement statements (completeness); \n• ensure consistency; \n• support other activities such as modeling, analysis, and implementation. \nFollowing a set of agreed-upon patterns also leads to a consistent set of needs and set of \nrequirements, and the automatization of several requirement management activities such as \nthe: \n• identify duplicate and conflicting needs and requirements;  \n• verify consistency and completeness rules associated with other systems engineering \nartifacts generated across all system lifecycles (for example, consistency of requirements \nversus design as stated in a model and consistent use of terms defined in the project \nontology);",
  "Guide to Writing Requirements  120 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n• extraction of entities, functions, and properties from need statements and requirement \nstatements; \n• extraction of needs and requirements from documents; and \n• translation of need and requirement text to different languages. \nFinally, patterns can also facilitate properly defining and teaching a common methodology for \ndefining need statements and requirement statements and leverage the use of a consistent, \ndefined vocabulary. \nC.3 Basic structure of a need or requirement pattern \nRequirement statement patterns. \nThe structure of requirements statements must be in the form of a complete sentence, the \nsimplest form of which is: \n<subject (entity)> shall <verb (action)><object><response> \nThe subject of the sentence is essential because it is the entity undertaking the action (and is \ntherefore the entity that will be subject to any verification/validation activity); the verb that comes",
  "therefore the entity that will be subject to any verification/validation activity); the verb that comes \nbefore the object is essential because it is the action being performed; the object is essential \nbecause it must be clear as to which entity is being acted upon, and the response is the \nrequired result of the action being performed. \nBoth, subject and objects are therefore normally entities coming from a data dictionary or model \nand, for a requirement statement, the action is introduced by a “shall” as described in Section 1.  \nUse of “shall” makes it clear that what is being communicated is formal, the statement is a \nrequirement, the statement is legally binding, and the entity will be verified against the \nrequirement. \nExpanding on the <subject> <verb> <object><response> form, the response may be further \nelaborated to address a measurable outcome: \nThe <entity> shall <action verb> <object> <measurable outcome>.",
  "Expanding on the <subject> <verb> <object><response> form, the response may be further \nelaborated to address a measurable outcome: \nThe <entity> shall <action verb> <object> <measurable outcome>.   \nIn terms of a function/performance requirement, the <action verb> <object> pair is \ncommunicated as a function/object pair (such as, “heat coffee”) and the <measurable outcome> \nis a specific response in terms of a required performance outcome resulting from that function \n(such as, “to a temperature greater than 120 degrees Fahrenheit”.)  \nFor a requirement involving an interaction between two entities (interface requirement) the \n<action verb> indicates the type of interaction, the <object> is what is involved in the interaction \n(together with the <subject>), and the <measurable outcome> is a pointer where the specific \ninteraction is defined (e.g., Interface Control Document). \nThe <SOI > shall establish communications with the <object> as defined in <ICD xyz>.",
  "interaction is defined (e.g., Interface Control Document). \nThe <SOI > shall establish communications with the <object> as defined in <ICD xyz>. \nNeed statement patterns. \nNeed statements have a similar form: \nThe <stakeholders> need the <entity><entity response>.  or  \nThe <stakeholders> need the <entity><action verb> <object> < measurable outcome>.   \nBecause need statements communicate a different perspective as discussed in Section 1, the \nsubject is the stakeholders that have the need and entity is the entity to which the need applies.  \nIt is this entity that will be the subject of the requirements that are transformed from the need \nstatement, and it is this entity that will be validated against the need.",
  "Guide to Writing Requirements  121 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nFor need statements, the outcome may be at a higher level of abstraction and therefore may not \nbe as rigorous a <measurable outcome> as for a requirement statement as discussed in \nSection 2 and R3—for example, the measurable outcome for a need statement may be more \nqualitative (even perhaps requiring subject assessment) than the quantitative outcome \n(requiring objective assessment) of a requirement statement. Once again, the NLP/AI tools \naiming at helping engineers define well-formed need statements and requirement statements \nmust take this level of abstraction into consideration. \nQualifying Clause \nExpanding on the <subject> <verb> <object> form, a need statement or requirement statement \nmay also include a <qualifying clause> to provide additional information needed to clearly \ncommunicate the intent of the requirement: \nThe <entity> shall <entity response> <qualifying clause>.",
  "may also include a <qualifying clause> to provide additional information needed to clearly \ncommunicate the intent of the requirement: \nThe <entity> shall <entity response> <qualifying clause>. \nIf a <qualifying clause> is needed to clearly communicate the intent of the action verb, or the \nobject is not stated explicitly within the need or requirement statement, the need or requirement \nstatement is not Complete (C4) ), Verifiable/Validatable (C7), nor Correct (C8)  unless that \nqualifying clause is included, .e.g., performance associated with the action verb, or for an \ninterface requirement where a pointer to where the specific interaction is defined (such as in an \nICD). \nCondition Clause \nU biquitous needs and requirements are those not requiring a condition (they are always active) \n(See Section 1.11 for a more detailed discussion concerning ubiquitous needs and \nrequirements.) \nThe basic structure for a ubiquitous need or requirement is as follows:",
  "(See Section 1.11 for a more detailed discussion concerning ubiquitous needs and \nrequirements.) \nThe basic structure for a ubiquitous need or requirement is as follows: \nThe <stakeholders> need the <SOI> <system response>. \nHowever, a need or requirement is often not ubiquitous and only applies under a certain \ncondition or a set of conditions (such as only applicable in a particular state or mode or in \nresponse to a triggering event).  \nAs discussed in Section 1.11, ISO/IEC 29148 states that a more-complete, typical sentence \nform for a functional requirement is: \nWhen <condition clause>, the <subject clause> shall <action verb clause> <object \nclause> <qualifying clause>. \nThere are several agreed types of condition clauses outlined in a range of methodologies. For \nexam ple, Mavin (2009) suggests the following three types of condition clause in EARS: \nEvent-driven requirements: \nWhen <optional preconditions/trigger>, the <SOI> shall <system response>. \nState-driven requirements:",
  "Event-driven requirements: \nWhen <optional preconditions/trigger>, the <SOI> shall <system response>. \nState-driven requirements: \nWhile <entering, exiting or in a specific state (or mode)>, the <SOI> shall <system \nresponse>. \nUnwanted behavior requirements: \nIf <optional preconditions/trigger>, then the <SOI> shall <system response>. \nOptional feature requirements: \nWhere <feature is included>, the <SOI> shall <system response>.",
  "Guide to Writing Requirements  122 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nComplex requirements: \nWhen several conditions apply at the same time, like the use of a trigger in an event block \n(when) that is only triggered when the SOI is into a given state defined in the while block, both \nconditions must be explicitly stated (See rules R27  and R28) in order for the need or \nrequirement to be complete (C4).   \nOrganizational Patterns  \nWhile ISO/IEC/IEEE 29148 shows the condition clause at the beginning of the statement and \nthe qualifying clause at the end, some organizations prefer to put the qualifying clause at the \nbeginning of the statement and the condition clause at the end.  Either format is acceptable, \nproviding that only one is chosen for a given set of needs or requirements. Organizations should \ndefine the desired pattern (R1) in their standards, guides, and processes and then ensure \nconsistency in the pattern being used.",
  "define the desired pattern (R1) in their standards, guides, and processes and then ensure \nconsistency in the pattern being used.   \nC.4 B uilding B locks for Requirement Patterns \nWhen it comes to defining the grammar of a requirement pattern, recursion has to be \nconsidered.  In that sense, requirement patterns may be made up, if necessary, of smaller \npatterns (building blocks) that can also be further split in even smaller blocks.  \nThis makes requirement patterns more modular and reusable, since different types of \nrequirements can share some common building blocks, whilst also having unique elements.  \nFor example, some special types of requirements may include (optionally) performance \ninformation.  If the performance information is represented as a second level pattern, several \nadvantages can be gathered: \n• This second level pattern might be reused among different top-level patterns.",
  "advantages can be gathered: \n• This second level pattern might be reused among different top-level patterns. \n• Variations of the second level pattern can be defined yet extending the ‘ex pressivity’ of \nthe entire catalog of patterns, with no need of changing the top-level ones. \nFortunately, the recursion referred in this appendix is not too deep; just a few levels should be \nenough to provide a set of flexible and reusable catalog of patterns.  Usually, the complex \npatterns are formed by sub-patterns and the simple patterns are formed by simple restrictions, \ndefining a set of building blocks.  The way to construct these patterns catalog (bottom up, top \ndown, iterative, etc.) is left to each organization based on their specific needs.  \nAs an example, Figure C -1 shows the structure of sub-patterns used as building blocks that may \nbe in a catalog of patterns.  \n \nFigure C -1: Requirement pattern building blocks.",
  "Guide to Writing Requirements  123 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nWriting requirements based on agreed patterns is a good approach that will result in a \nconsistent set of requirements.  However, dealing with consistent patterns is largely pointless if \nthe actual words and concepts used to specify a requirement are not used consistently.  Every \norganization must solve this challenge within the scope of the knowledge management process.  \nThis common ontology must be implemented within the schema to be used to document and \nmanage the requirement development and systems engineering process activities. \nConsidering these more fine-grained components into a pattern, we could assign detailed \npatterns for different types of requirements. A necessary first choice for any organization is to \nclearly define unique requirement types and their associated patterns (R1). Several patterns are \nidentified above.",
  "clearly define unique requirement types and their associated patterns (R1). Several patterns are \nidentified above. \nExamples of this finer decomposition are presented by Ron Carson (Carson, 2015). According \nto Carson, types of requirements will have different means of expressing the basic requirements \nelements (who, what, how well, under what conditions).  \nPossible types of requirements for a SOI may be related to the primary intended use (functional \nand performance requirements), fitness for use (suitability, e.g., safety, security, resilience and \nvarious “ilities”), constraints on the solution (“design” requirements), and natural and induced \nenvironments that define conditions of testing, operations, maintenance, transportation, or \nstorage.  \nBoeing (Carson, 2025) defined a set of four basic requirements patterns addressing unique \nrequirement types to enable quality measurements: \n• Functional/Performance: The AGENT shall FUNCTION in accordance with INTERFACE-",
  "requirement types to enable quality measurements: \n• Functional/Performance: The AGENT shall FUNCTION in accordance with INTERFACE-\nOUTPUT with PERFORMANCE [and TIMING upon EVENT TRIGGER in accordance with \nINTERFACE -INPUT] while in CONDITION. \n• Suitability: The AGENT shall exhibit CHARACTERISTIC with PERFORMANCE while \nCONDITION [for CONDITION DURATION]. \n• Environments: The AGENT shall exhibit CHARACTERISTIC during/after exposure to \nENVIRONMENT [for EXPOSURE DURATION].  \n• Design: The AGENT shall exhibit DESIGN CONSTRAINTS [in accordance with \nPERFORMANCE while in CONDI TION]. \n(Note: Using the terminology used in this guide and other RWG products, the word AGENT \nshould be replaced using the word ENTITY.) \nEach of these types is intended to be both verifiable (capable of being proven satisfied) and \ntraceable to the needs included within the Integrated Set of Needs discussed in Section 1. Each",
  "Each of these types is intended to be both verifiable (capable of being proven satisfied) and \ntraceable to the needs included within the Integrated Set of Needs discussed in Section 1. Each \norganization involved in defining requirements must establish patterns for different possible \nrequirement types. We elaborate the Boeing patterns as follows: \nThe Functional/Performance type addresses the intended use-related functions, behavior, \nactivity of the SOI. This type includes performance attributes to define “how well”. If \nperformance is omitted then there is no statement of “how well”, and the resulting requirement is \nincomplete. The template allows an optional clause […] that enables a differentiation of behavior \ntriggered by an “EVENT TRIGGER” with an associated TIMING performance attribute. The \n“INTERFACE” elements are associated with constraints on how the INPUTS and OUTPUTS to \nthe function are implemented and can be defined by reference to an ICD or other interface",
  "“INTERFACE” elements are associated with constraints on how the INPUTS and OUTPUTS to \nthe function are implemented and can be defined by reference to an ICD or other interface \nconstraint reference accessible to all entities involved in the interaction. \nThe Suitability type addresses intended use-related or enabling functions and characteristics \nassociated with “fitness for use” in the intended environment, by intended personnel, and under",
  "Guide to Writing Requirements  124 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nintended conditions. This type includes such suitability considerations and functionality to meet \nquality (-ilities such as availability, reliability, maintainability), training, safety, security, and \nresiliency needs. The optional clause […] addresses the varying need to define the DURATION \nof the CONDITION being applied to the system, e.g., “reliability” is always defined with both a \nDURATION and CONDITION.  \nThe Environment type is primarily a characterization of the CONDITIONS applicable to a \nsystem or its elements while either performing some subset of functions, or its existence in \nsome state or phase. It is important to ensure that the CHARACTERISTIC is verifiably defined. \nFor example, “The system shall survive exposure to xyz ENVIRONMENT” is not a verifiable \nrequirement because “survive” is ill-defined and subject to widely varying interpretation as,",
  "For example, “The system shall survive exposure to xyz ENVIRONMENT” is not a verifiable \nrequirement because “survive” is ill-defined and subject to widely varying interpretation as, \n“doesn’t fail immediately”, “doesn’t diminish its reliability”, “meet all functional and performance \nrequirements”, or “doesn’t fall apart”. \nThe Design type addresses constraints on the solution space. This type can be used to specify \nallocations of physical attributes, e.g., size, weight, and other physical characteristics, e.g., \nparts, materials, processes, color. The complete template includes optional […] clauses for \nPerformance (measurable attributes) and CONDITIONS (e.g., “dry weight”) because these are \nsometimes applicable, even for solution characteristics. \n“Interface requirements” are not a separate type. Requirements associated with interfaces are \neither of the Functional/ Performance type addressing inputs and outputs (because this type can",
  "“Interface requirements” are not a separate type. Requirements associated with interfaces are \neither of the Functional/ Performance type addressing inputs and outputs (because this type can \nreference interface constraints), Suitability type , or of the Design type if used to constrain \ncertain classes of interfaces, e.g., “The system shall use communicate digital data conforming to \nUSB 3.0 standard.” \nOrganizations may define and use other types of requirements. However, it is best to use a \nshort list and have clear definitions (to avoid overlap and confusion) and clear patterns so that \ncompleteness can be assessed. And each pattern must satisfy the basic construct of “the who  \nshall what, how well, under what conditions” to help ensure completeness and verifiability. \nC.5 Other references \nOther sources of requirement patterns are: \n• Jeremy Dick, Juan Llorens, \"Using Statement-level Templates to Improve the Quality of",
  "C.5 Other references \nOther sources of requirement patterns are: \n• Jeremy Dick, Juan Llorens, \"Using Statement-level Templates to Improve the Quality of \nRequirements\", International Conference on Software and Systems Engineering and \nApplications.  ICSSEA 2012, Paris, France.  \n• Hull et al: Requirements Engineering, Springer, 2012. \n• “EARS - Easy Approach to Requirements Syntax”, \nhttp://ieeexplore.ieee.org/document/5636542/ \n• The PABRE Catalog: http://www.upc.edu/gessi/PABRE/index.html \n• ARTEMIS CRYSTAL EU Research Project: http://www.crystal-artemis.eu/",
  "Guide to Writing Requirements  125 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nAppendix D:   Rule Applicability Matrix \n \nD.1 The Importance of Tailoring the Rules \nThe characteristics of needs and requirements presented in this Guide provide a common basis \nto support the definition of quality needs and requirements and sets of needs and requirements.  \nThe underlying rules defined in this Guide help ensure that needs and requirements possess \nthese characteristics. However, the SE practitioner applying the rules defined in this Guide to a \nspecific project warrants additional guidance as to the selection of the appropriate set of rules \nwhen they are applied to need statements versus requirement statements.  \nIn the aftermath of adopting NLP/AI based tools to partially automate the verification of needs \nand requirements to assess their quality, many SE practitioners have also been expecting from",
  "In the aftermath of adopting NLP/AI based tools to partially automate the verification of needs \nand requirements to assess their quality, many SE practitioners have also been expecting from \nthose “digital assistants” help in distinguishing need statements from requirement statements in \nthe need verification and requirement verification activities rather than focusing only on \nrequirements and sets of requirements as has been done in the past. \nBy including this Rule Applicability Matrix, the objective is to help SE practitioners tailor the rule \nset to be used to either assess the quality of need statements or requirement statements, \nproviding them with guidance about optional or recommended rules applicable to needs before \nbeing applied to the requirements transformed from those needs. Users of NLP/AI based tools \nwill thus benefit from a tailored automated assessment of the quality of need statements or \nrequirement statements with the appropriate thoroughness.",
  "will thus benefit from a tailored automated assessment of the quality of need statements or \nrequirement statements with the appropriate thoroughness. \nThe Rule Applicability Matrix also provides guidance about the need for a Project Data \nDictionary, which can be organized either as a glossary, a model, or an ontology, among other \nkinds of data models. The concept of project data dictionary suggests that there is a data \ndictionary defined at organizational level, which enables SE practitioners to process those data \ninputs into engineered knowledge that will then be used across the lifecycle by the \norganizational project teams that may be using different tools. The data dictionary can include \nterms and definitions, but also relationships that help precisely define a consistent terminology \nto describe the SOI, its operating environment, and interactions with other external systems in \nthe operational environment.",
  "to describe the SOI, its operating environment, and interactions with other external systems in \nthe operational environment. \nThis data dictionary is then tailored to the specific project since the organization-wide \nterminology may need to be tailored within the scope of this project. \nD.2 Dimensions of the Rule Applicability Matrix \nAs described in the paragraphs above, the Rule Applicability Matrix provides two dimensions to \nhelp engineers select the appropriate set of rules:  \n• The level of applicability of each rule to needs, requirements, or both.  \n• The need for a project data dictionary to check that a need or requirement statement \ncomplies with each rule and uses consistent terminology.  \nLevel of Applicability \nAs shown in the following table, each rule is assigned a specific level of applicability:",
  "Guide to Writing Requirements  126 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n• CNCR:  Compulsory for Needs and Compulsory for Requirements, \n• RNCR:  Recommended for Needs and Compulsory for Requirements,  \n• CR: Compulsory for Requirements (Optional for Needs). \nThese levels suggest that the rules will be applied in any case for requirements, but every \norganization can decide whether to use a rule or not. The tailoring of the rules should be \nperformed considering the following four considerations: the level of abstraction, the stage in the \nlifecycle, the level of criticality of the need or requirement, and the criticality of the SOI.  \nThe difference between CN, RN and CR can be addressed as follows:  \n• ‘CN’ means the rule is compulsory for needs. \n• ‘RN’ means the rule is recommended for needs but not compulsory.  The project may \ndecide not to apply the rule to the set of needs based on the above four tailoring \nconsiderations.",
  "• ‘RN’ means the rule is recommended for needs but not compulsory.  The project may \ndecide not to apply the rule to the set of needs based on the above four tailoring \nconsiderations. \n• ‘CR’ means the rule is compulsory for requirements but optional for needs depending on \nthe above four tailoring considerations.  \nScope (Project Data Dictionary) \n \nApart from the applicability, the table also shows if the rule requires a project data dictionary to \nbe assessed. The rules that do not require a project data dictionary can be considered as \n“cross-project” or even “cross-domain”, as they address the syntax of the need or requirement. \nTherefore, this criterion defines the scope on which the rule is to be applied. \nExamples:  \n• Rule 05 (Use Definite Articles) does not require a project data dictionary, since the \nnature of the terms involved in the rules (“the”, “a”, an”) do not vary from the \norganization-wide definition of articles.",
  "nature of the terms involved in the rules (“the”, “a”, an”) do not vary from the \norganization-wide definition of articles.  \n• Rule 37 (Define Acronyms), however, requires a project data dictionary, as the acronym \ncan be defined at project level, to characterize a specific feature, function, entity, \ncomponent, unit of measure or even supersede an acronym used for another entity at \norganization level.  \nThis scope criterion helps organizations prepare the tailoring of the rules to needs or \nrequirements by defining the key terminology to be used within a project and serves as a set of \nbest practices to be introduced within the organization prior to the definition of needs or \nrequirements and other SE artifacts across the lifecycle. \nC onsidering the importance of knowledge management in an organization across the lifecycle \nand enabling SE data and information to be captured, stored, and shared throughout the",
  "C onsidering the importance of knowledge management in an organization across the lifecycle \nand enabling SE data and information to be captured, stored, and shared throughout the \norganization, helps set the cornerstone of the underlying processes and activities. The project \ndata dictionary will improve the communication between various stakeholders and ensure the \nuse of consistent terms and concepts across all lifecycle activities.",
  "Guide to Writing Requirements  127 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nApplicability of Rules to Needs and Requirements \n*(CNCR= Compulsory for Needs and Requirements; RNCR=Recommended for Needs and Compulsory for \nRequirements; CR=Compulsory for Requirements and Not Applicable to Needs) \nRule \n# Rule Name Rule Short Description Rule \nApplicability*   \nApplicability \nComments \nRequires \nProject Data \nDictionary, \nGlossary, \nModels or \nOntology? \n(Y/N) \nScope \nComments \nR1 Structured \nStatements \nNeed statements and \nrequirement statements \nmust conform to one of \nthe agreed patterns, \nthus resulting in a well-\nstructured complete \nstatement. \nCNCR  N   \nR2 Active \nVoice \nUse the active voice in \nthe need statement or \nrequirement statement \nwith the responsible \nentity clearly identified \nas the subject of the \nsentence. \nRNCR \nNeeds: The use of \nactive voice can have \na higher tolerance \nwhen considering \nneeds, although it is \nrecommended to avoid",
  "entity clearly identified \nas the subject of the \nsentence. \nRNCR \nNeeds: The use of \nactive voice can have \na higher tolerance \nwhen considering \nneeds, although it is \nrecommended to avoid \nit in both cases. \nN   \nR3 \nAppropriate \nSubject-\nVerb \nEnsure the subject and \nverb of the need or \nrequirement statement \nare appropriate to the \nentity to which the \nstatement refers. \nCNCR  Y \nThe subject \nshould be the \nentity rather \nthan a \ncharacteristic of \nthe entity. \nR4 Defined \nTerms \nDefine all terms used \nwithin the need \nstatement and \nrequirement statement \nwithin an associated \nglossary and/or data \ndictionary. \nCNCR  Y  \nR5 Definite \nArticles \nUse definite article “the” \nrather than the \nindefinite article “a.” \nRNCR \nNeeds: Some \nconcepts with a higher \nlevel of abstraction \nmight be expressed \nindefinitely in need \nstatements as they are \nstill not clearly defined. \nAlso see R08 and \nR09. \nN   \nR6 \nCommon \nUnits of \nMeasure \nWhen stating quantities, \nall numbers should",
  "might be expressed \nindefinitely in need \nstatements as they are \nstill not clearly defined. \nAlso see R08 and \nR09. \nN   \nR6 \nCommon \nUnits of \nMeasure \nWhen stating quantities, \nall numbers should \nhave appropriate and \nconsistent units of \nmeasure explicitly \nstated using a common \nmeasurement system in \nterms of the thing the \nnumber refers. \nCNCR  N   \nR7 Vague \nTerms \nAvoid the use of vague \nterms. CNCR  N",
  "Guide to Writing Requirements  128 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nRule \n# Rule Name Rule Short Description Rule \nApplicability*   \nApplicability \nComments \nRequires \nProject Data \nDictionary, \nGlossary, \nModels or \nOntology? \n(Y/N) \nScope \nComments \nR8 Escape \nClauses \nAvoid the inclusion of \nescape clauses that \nstate vague conditions \nor possibilities, such as \n“so far as is possible”, \n“as little as possible”, \n“where possible”, “as \nmuch as possible”, “if it \nshould prove \nnecessary”, “if \nnecessary”, “to the \nextent necessary”, “as \nappropriate”, “as \nrequired”, “to the extent \npractical”, and “if \npracticable”. \nRNCR \nNeeds: The lower level \nof precision of need \nstatements might \nimply the use of no \nescape clauses. Also \nsee R05 and R09. \nN   \nR9 \nOpen-\nEnded \nClauses \nAvoid open-ended, non-\nspecific clauses such as \n“including but not \nlimited to”, “etc.” and \n“and so on”. \nCNCR Also see R05 and \nR08. N   \nR10 Superfluou\ns Infinitives",
  "R9 \nOpen-\nEnded \nClauses \nAvoid open-ended, non-\nspecific clauses such as \n“including but not \nlimited to”, “etc.” and \n“and so on”. \nCNCR Also see R05 and \nR08. N   \nR10 Superfluou\ns Infinitives \nAvoid the use of \nsuperfluous infinitives \nsuch as “to be designed \nto”, “to be able to”, “to \nbe capable of”, “to \nenable”, “to allow”. \nCR \nNeeds: The use of \nsuperfluous infinitives \nmay be acceptable \nwithin a need \nstatement given the \nhigher level of \nabstraction. \nN   \nR11 Separate \nClauses \nUse a separate clause \nfor each condition or \nqualification. \nCNCR  N   \nR12 Correct \nGrammar Use correct grammar CNCR  N   \nR13 Correct \nSpelling Use correct spelling CNCR  Y \nProject-specific \nvocabulary \nitems can be \nflagged as \nmisspelled \nwords as they \ndo not belong to \nany defined \ndictionary. \nTherefore, the \nspellchecking \ncan be regarded \nas a project-\nspecific aspect. \nR14 \nCorrect \nPunctuatio\nn \nUse correct \npunctuation. CNCR  N",
  "Guide to Writing Requirements  129 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nRule \n# Rule Name Rule Short Description Rule \nApplicability*   \nApplicability \nComments \nRequires \nProject Data \nDictionary, \nGlossary, \nModels or \nOntology? \n(Y/N) \nScope \nComments \nR15 \nLogical \nExpression\ns \nUse a defined \nconvention to express \nlogical expressions \nsuch as “[X AND Y]”, \n“[X OR Y]”, [X XOR Y]”, \n“NOT [X OR Y]”. \nCNCR  N   \nR16 Use of \n“Not” \nAvoid the use of the \nword “not.” RNCR \nNeeds: Need \nstatements might use \nnegative expressions \nto state the unwanted \nbehavior of the system \nto develop. \nN   \nR17 \nUse of \nOblique \nSymbol \nAvoid the use of the \noblique (\"/\") symbol. CNCR  N   \nR18 \nSingle \nThought \nSentence \nWrite a single sentence \nthat contains a single \nthought conditioned and \nqualified by relevant \nsub-clauses. \nCNCR  N   \nR19 Combinator\ns \nAvoid combinators that \njoin clauses, such as \n“and”, ”or”, ”then”, \n”unless”, ”but”, ”as well \nas”, ”but also”,",
  "qualified by relevant \nsub-clauses. \nCNCR  N   \nR19 Combinator\ns \nAvoid combinators that \njoin clauses, such as \n“and”, ”or”, ”then”, \n”unless”, ”but”, ”as well \nas”, ”but also”, \n”however”, ”whether”, \n”meanwhile”, ”whereas”, \n”on the other hand”, and \n”otherwise.” \nCNCR  N   \nR20 Purpose \nPhrases \nAvoid phrases that \nindicate the “purpose \nof“, “intent of”, or \n“reason for” the need \nstatement or \nrequirement statement. \nCNCR  N   \nR21 Parenthese\ns \nAvoid parentheses and \nbrackets containing \nsubordinate text. \nCNCR  N   \nR22 Enumeratio\nn \nEnumerate sets \nexplicitly instead of \nusing a group noun to \nname the set. \nRNCR \nNeeds: Early-stage \nneeds might include \ngroup nouns to name \na set of entities or \nfunctions that is \nappropriate to the level \nof abstraction being \ncommunicated. \nN   \nR23 \nSupporting \nDiagram, \nModel, or \nICD \nWhen a need or \nrequirement is related \nto complex behavior, \nrefer to the supporting \ndiagram, model, or ICD. \nRNCR \nThe supporting",
  "communicated. \nN   \nR23 \nSupporting \nDiagram, \nModel, or \nICD \nWhen a need or \nrequirement is related \nto complex behavior, \nrefer to the supporting \ndiagram, model, or ICD. \nRNCR \nThe supporting \ndiagram model, or ICD \nhelps define the \ncontext.  \nY   \nR24 Pronouns \nAvoid the use of \npersonal and indefinite \npronouns. \nCNCR  N",
  "Guide to Writing Requirements  130 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nRule \n# Rule Name Rule Short Description Rule \nApplicability*   \nApplicability \nComments \nRequires \nProject Data \nDictionary, \nGlossary, \nModels or \nOntology? \n(Y/N) \nScope \nComments \nR25 Headings \nAvoid relying on \nheadings to support \nexplanation or \nunderstanding of the \nneed or requirement. \nCNCR  N   \nR26 Absolutes Avoid using \nunachievable absolutes. CNCR  N   \nR27 Explicit \nConditions \nState conditions’ \napplicability explicitly \ninstead of leaving \napplicability to be \ninferred from the \ncontext. \nRNCR \nNeeds: Needs are \ncommunicated at a \nhigher level of \nabstraction often \nconcerning an overall \ncapability of the \nsystem, as such they \nare ubiquitous at this \nlevel of abstraction. \nY \nIf a specific \ncondition is \napplicable, it \nshould be \nincluded within \nthe need \nstatement to \nensure the intent \nclear \nR28 Multiple \nConditions \nExpress the \npropositional nature of a",
  "Y \nIf a specific \ncondition is \napplicable, it \nshould be \nincluded within \nthe need \nstatement to \nensure the intent \nclear \nR28 Multiple \nConditions \nExpress the \npropositional nature of a \ncondition explicitly for a \nsingle action instead of \ngiving lists of actions for \na specific condition \nCR \nNeeds: Needs are \ncommunicated at a \nhigher level of \nabstraction often \nconcerning an overall \ncapability of the \nsystem, as such they \nare ubiquitous at this \nlevel of abstraction. \nN   \nR29 Classificati\non \nClassify needs and \nrequirements according \nto the aspects of the \nproblem or system it \naddresses. \nCNCR  Y \nThe \nclassification \nused for needs \nand \nrequirements is \ndefined at \norganization or \nproject level. \nThe \nclassification \nschema is as \nsuch a project \ndata dictionary.  \nR30 Unique \nExpression \nExpress each need and \nrequirement once and \nonly once. \nCNCR  N   \nR31 Solution \nfree \nAvoid stating \nimplementation in a \nneed statement or \nrequirement statement",
  "R30 Unique \nExpression \nExpress each need and \nrequirement once and \nonly once. \nCNCR  N   \nR31 Solution \nfree \nAvoid stating \nimplementation in a \nneed statement or \nrequirement statement \nunless there is rationale \nfor constraining the \ndesign. \nCNCR  N   \nR32 \nUniversal \nQualificatio\nn \nUse “each” instead of \n“all”, “any'’ or “both' \nwhen universal \nquantification is \nintended \nRNCR \nNeeds: May be \nallowed in needs but \nnot accepted in \nrequirements \nN",
  "Guide to Writing Requirements  131 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nRule \n# Rule Name Rule Short Description Rule \nApplicability*   \nApplicability \nComments \nRequires \nProject Data \nDictionary, \nGlossary, \nModels or \nOntology? \n(Y/N) \nScope \nComments \nR33 Range of \nValues \nDefine each quantity \nwith a range of values \nappropriate to the entity \nto which the quantity \napplies and against \nwhich the entity will be \nverified or validated. \nCR \nRequirements: Some \nneeds can be \nexpressed with \"TBD\" \nvalues (See R7), as \nthe expected value for \na characteristic is still \nunknown at need \ndefinition stage, while \nrequirements require \nto have a proper \ndefinition of value \nranges and tolerances \nto help its derivation \ninto the lower levels. \nN   \nR34 \nMeasurable \nPerformanc\ne \nProvide specific \nmeasurable \nperformance targets \nappropriate to the entity \nto which the need or \nrequirement is stated \nand against which the \nentity will be verified to \nmeet. \nRNCR",
  "e \nProvide specific \nmeasurable \nperformance targets \nappropriate to the entity \nto which the need or \nrequirement is stated \nand against which the \nentity will be verified to \nmeet. \nRNCR \nNeeds: Performance \ntargets might be \ndefined with a lower \nlevel of precision when \nexpressing needs, \nwithout the ability to \nmeasure them. \nN   \nR35 \nTemporal \nDependenc\nies \nDefine temporal \ndependencies explicitly \ninstead of using \nindefinite temporal \nkeywords such as \n“eventually”, “until”, \n“before”, “after”, “as”, \n“once”, “earliest”, \n“latest”, \n“instantaneous”, \n“simultaneous”, and “at \nlast”. \nRNCR \nNeeds: Temporal \ndependencies can be \nexpressed with \nindefinite expressions \nat need definition \nstage and then precise \nin an accurate and \nnon-ambiguous way \nas they are \ntransformed into \nrequirements. \nN   \nR36 \nConsistent \nTerms and \nUnits \nUse each term and unit \nof measure consistently \nthroughout need and \nrequirement sets as \nwell as associated \nmodels and other SE",
  "requirements. \nN   \nR36 \nConsistent \nTerms and \nUnits \nUse each term and unit \nof measure consistently \nthroughout need and \nrequirement sets as \nwell as associated \nmodels and other SE \nartefacts developed \nacross the lifecycle. \nCNCR  Y \nThe definition of \nthe terms to be \nused requires a \nproject data \ndictionary. See \nalso R4 & R6. \nR37 Acronyms \nIf acronyms are used, \nthey must be consistent \nthroughout need and \nrequirement sets as \nwell as associated \nmodels and other SE \nartefacts developed \nacross the lifecycle. \nCNCR  Y",
  "Guide to Writing Requirements  132 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nRule \n# Rule Name Rule Short Description Rule \nApplicability*   \nApplicability \nComments \nRequires \nProject Data \nDictionary, \nGlossary, \nModels or \nOntology? \n(Y/N) \nScope \nComments \nR38 Abbreviatio\nns \nAvoid the use of \nabbreviations in needs \nand requirement \nstatements as well as \nassociated models and \nother SE lifecycle \nartefacts. \nCNCR  N   \nR39 Style Guide \nUse a project-wide style \nguide for individual \nneed statements and \nrequirement \nstatements. \nCNCR  Y   \nR40 Decimal \nFormat \nUse a consistent format \nand number of \nsignification digits for \nthe specification of \ndecimal numbers. \nCNCR  N   \nR41 \nRelated \nNeeds and \nRequireme\nnts \nGroup related needs \nand requirements \ntogether. \nCNCR  Y See also Rule \nR29 \nR42 Structured \nSets \nConform to a defined \nstructure or template for \norganizing sets of \nneeds and \nrequirements. \nCNCR  N",
  "Guide to Writing Requirements  133 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nAppendix E:   Cross Reference Matrices \n \nRules to Characteristics Cross Reference Matrix \n \n \n       Characteristics for \nIndividual needs and requirements\nCharacteristics for \nSets of needs requirements\nNecessary\nAppropriate\nUnambiguous\nComplete\nSingular\nFeasible\nVerifiable\nCorrect\nConforming\nComplete\nConsistent\nFeasible\nComprehensible\nAble to be validated\nCorrect\nQuality Focus Rule Subject C1 C2 C3 C4 C5 C6 C7 C8 C9 C10 C11 C12 C13 C14 C15\nAccuracy R1 Structured Statements X X X X X\nR2 Active Voice X X X X\nR3 Appropriate Subject-Verb X X X X X\nR4 Defined Terms X X X X X X\nR5 Definite Articles X X\nR6 Common Units of Measure X X X X\nR7 Vague Terms X X X\nR8 Escape Clauses X X\nR9 Open-ended Clauses X X X X\nConcision R10 Superfluous infinitives X X\nR11 Separate Clauses X X X X\nNon-ambiguity R12 Correct Grammar X X X X\nR13 Correct Spelling X X\nR14 Correct Condition X X",
  "R9 Open-ended Clauses X X X X\nConcision R10 Superfluous infinitives X X\nR11 Separate Clauses X X X X\nNon-ambiguity R12 Correct Grammar X X X X\nR13 Correct Spelling X X\nR14 Correct Condition X X\nR15 Logical Expressions X X\nR16 Use of “Not” X X X\nR17 Use of Oblique Symbol X X\nSingularity R18 Single-thought Sentence X X X X X\nR19 Combinators X X\nR20 Purpose Phrases X X\nR21 Parentheses X\nR22 Enumeration X X\nR23 Supporting Diagram, Model or ICD X X X\nCompleteness R24 Pronouns X X X\nR25 Headings X\nRealism R26 Absolutes X X X X\nConditions R27 Explicit Conditions X X X\nR28 Multiple Conditions X X\nUniqueness R29 Classification X X\nR30 Unique Expression X X X\nAbstraction R31 Solution Free X\nQuantifiers R32 Universal Qualification X X X\nTolerance R33 Range of Values X X X X X X\nQuantification R34 Measurable Performance X X X X\nR35 Temporal Dependencies X X X\n Uniformity of \nLanguage R36 Consistent Terms and Units X X X X X X X\nR37 Acronyms X X X X X X\nR38 Abbreviations X X X X X",
  "R35 Temporal Dependencies X X X\n Uniformity of \nLanguage R36 Consistent Terms and Units X X X X X X X\nR37 Acronyms X X X X X X\nR38 Abbreviations X X X X X\nR39 Style Guide X X X X X X X\nR40 Decimal Format X X X X\nModularity R41 Related Needs and Requirements X X X X X X\nR42 Structured Sets X X X X X",
  "Guide to Writing Requirements  134 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nNRM Concepts and Activities to Characteristics Cross Reference Matrix Part 1 \n \nCharacteristics for \nSets of needs requirements\n       Characteristics for \nIndividual needs and requirements\nNecessary\nAppropriate\nUnambiguous\nComplete\nSingular\nFeasible\nVerifiable\nCorrect\nConforming\nComplete\nConsistent\nFeasible\nComprehensible\nAble to be validated\nCorrect\nC1 C2 C3 C4 C5 C6 C7 C8 C9 C10 C11 C12 C13 C14 C15\n3.2.1.1 C om m unication X X X\n3.2.1.2 Pow er of Expression X X X X X\n3.2.1.3 M anaging Sets of N eeds And R equirem ents X X\n3.2.1.5 Attributes X X\n3.2.1.6 Form al, Binding Agreem ent X X X X X X X\n3.2.1.7 System  Verification and System  Validation X X\n3.2.2.1 Analysis from  W hich N eeds and R equirem ents \nare D erived X X X X X X X X X\n3.2.2.2 C om pleteness X X X\n3.2.2.3 C onsistency X X X\n3.2.2.4 Identity and M anage Interdependencies X X X X X\n3.2.2.5 Support Sim ulations X X X",
  "are D erived X X X X X X X X X\n3.2.2.2 C om pleteness X X X\n3.2.2.3 C onsistency X X X\n3.2.2.4 Identity and M anage Interdependencies X X X X X\n3.2.2.5 Support Sim ulations X X X\n3.2.2.6 Key to U nderstanding X X\n4.3.3 Identify External and Internal Stakeholders X\n4.3.6.2 Technology M aturity X X\n4.3.7.1 C lasses of R isk - D evelopm ent R isk X X\n4.4.3 G et Stakeholder Agreem ent X X X X X X X X X X\n4.4.4 C om pleteness X\n4.5 Lifecycle C oncepts Analysis and M aturation X X X X X X X\n4.5.1 Feasibility X X\n4.5.3 U ser of D iagram s and M odels for Analysis X X X X X\n4.5.4 Levels of D etail and Abstraction X\n4.5.7.1 M odel D evelopm ent, Analysis, and M aturation X X X X X\n4.5.7.4 Zeroing in on a Feasible Architecture and \nD esign X X\n4.6.2.3 O rganizing the Integrated Set of N eeds X X\n4.6.3.1 M anaging U nknow ns X X X X X X\n4.6.3.2 Appropriate to Level X\n4.6.3.3 C om pleteness of the Integrated Set of N eeds X\n4.6.3.4 N eeds Feasibility and R isk X X X X",
  "4.6.3.1 M anaging U nknow ns X X X X X X\n4.6.3.2 Appropriate to Level X\n4.6.3.3 C om pleteness of the Integrated Set of N eeds X\n4.6.3.4 N eeds Feasibility and R isk X X X X\n4.7 Plan for System  Validation X\n4.8 Baseline & M anage Lifecycle C oncepts & N eeds \nD efinition O utputs X X X X X X X X X X X\n5.1.2 Perform  N eeds Verification X X X X X X X\n5.2 N eeds Validation X\n5.2.2  Perform  N eeds Validation X X X X X X X X\nNRM Concepts and Activities\nSECTION 3: INFORMATION-BASED NEEDS AND \nREQUIREMENT DEVELOPMENT AND MANAGEMENT\nSEC TIO N  4: LIFEC YC LE C O N C EPTS A N D  N EED S \nD EFIN ITIO N\nSEC TIO N  5: N EED S VER IFIC A TIO N  A N D  N EED S \nVA LID A TIO N",
  "Guide to Writing Requirements  135 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nNRM Concepts and Activities to Characteristics Cross Reference Matrix Part 2 \n \n \n \n       Characteristics for \nIndividual needs and requirements\nCharacteristics for \nSets of needs requirements\nNecessary\nAppropriate\nUnambiguous\nComplete\nSingular\nFeasible\nVerifiable\nCorrect\nConforming\nComplete\nConsistent\nFeasible\nComprehensible\nAble to be validated\nCorrect\nC1 C2 C3 C4 C5 C6 C7 C8 C9 C10 C11 C12 C13 C14 C15\n6.2 Perform  D esign Input R equirem ents D efinition X X X X X X X X X X\n6.2.1 Transform ing N eeds into D esign Input \nR equirem ents X X X\n6.2.1.1 O rganizing Sets of D esign Input R equirem ents X X X\n6.2.1.2 C onsiderations For Each Type O f R equirem ent X X X X X\n6.2.1.4 Appropriate to Level X\n6.2.1.5 M anaging U nknow ns X X X X X X\n6.2.2 Establish Traceability X X X\n6.2.2.1 Establishing Traceability Betw een D ependent \nPeer R equirem ents X",
  "6.2.1.4 Appropriate to Level X\n6.2.1.5 M anaging U nknow ns X X X X X X\n6.2.2 Establish Traceability X X X\n6.2.2.1 Establishing Traceability Betw een D ependent \nPeer R equirem ents X\n6.2.3.6 Interface R equirem ents Audit X X X X X X X X\n6.2.5 Plan for System  Verification X\n6.2.6.2 C om pleteness, C orrectness, and C onsistency X X X X\n6.2.6.3 R equirem ents Feasibility and R isk X X X X\n6.3 Baseline and M anage D esign Input \nR equirem ents X X X X X X X X X X X\n6.4.3 Allocation – Flow  D ow n of R equirem ents X X X\n6.4.4 D efining C hild R equirem ents that M eet the Intent \nof the Allocated Parents X\n6.4.5 Budgeting of Perform ance, R esource, and \nQ uality R equirem ents X X\n6.4.7 . U se of Traceability and Allocation to M anage \nR equirem ents X X X X X X\n7.1.2 Perform  D esign Input R equirem ents Verification X X X X X X X X\n7.2 D esign Input R equirem ents Validation X\n7.2.2 Perform  D esign Input R equirem ents Validation X X X X X X X X X X X",
  "7.1.2 Perform  D esign Input R equirem ents Verification X X X X X X X X\n7.2 D esign Input R equirem ents Validation X\n7.2.2 Perform  D esign Input R equirem ents Validation X X X X X X X X X X X\n8.1 D esign D efinition Process O verview X X X X X X X X X X X\n8.2 Early System  Verification and System  Validation X X X X X X X X X X X\n8.4 D esign Verification X X X X X X X\n8.5 D esign Validation X X X X X\n14.2.1  Baseline N eeds, R equirem ents, and \nSpecifications X X X X X X X X X X X\n14.2.4 M anaging U nknow ns X X X X X X X\n14.2.7  C om bine Allocation and Traceability to M anage \nR equirem ents X X X X X\n14.2.8 M anaging Interfaces X X X\n14.2.9 M anaging System  Verification and System  \nValidation X X\nNRM Concepts and Activities\nSECTION 6: DESIGN INPUT REQUIREMENTS DEFINITION\nSEC TIO N  7: D ESIG N  IN PU T R EQ U IR EM EN TS \nVER IFIC A TIO N  &  VA LID A TIO N\nSEC TIO N  8: D ESIG N  VER IFIC A TIO N  A N D  D ESIG N  \nVA LID A TIO N\nSEC TIO N  14: N EED S, R EQ U IR EM EN TS,",
  "VER IFIC A TIO N  &  VA LID A TIO N\nSEC TIO N  8: D ESIG N  VER IFIC A TIO N  A N D  D ESIG N  \nVA LID A TIO N\nSEC TIO N  14: N EED S, R EQ U IR EM EN TS, \nVER IFIC A TIO N , &  VA LID A TIO N  M A N A G EM EN T",
  "Guide to Writing Requirements  136 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nAttributes to Characteristics Cross Reference Matrix  \n  \n       Characteristics for \nIndividual needs and requirements\nCharacteristics for \nSets of needs requirements\nNecessary\nAppropriate\nUnambiguous\nComplete\nSingular\nFeasible\nVerifiable/Validatiable\nCorrect\nConforming\nComplete\nConsistent\nFeasible\nComprehensible\nAble to be Validated\nCorrect\nAttribute Subject C1 C2 C3 C4 C5 C6 C7 C8 C9 C10 C11 C12 C13 C14 C15\nA1 Rationale X X X\nA2 Trace to Parent X X\nA3 Trace to Source X\nA4 States and Modes X\nA5 Allocation/Budgeting\nA6 System Verification or Validation Success Criteria X X X X X\nA7 System Verification or Validation Strategy\nA8 System Verification or  Validation Method X X X X X\nA9\nSystem Verification or  Validation Responsible \nOrganization \nA10 System Verification or  Validation Level\nA11  System Verification or  Validation Phase\nA12 Condition of Use X X",
  "A9\nSystem Verification or  Validation Responsible \nOrganization \nA10 System Verification or  Validation Level\nA11  System Verification or  Validation Phase\nA12 Condition of Use X X\nA13 System Verification or  Validation Results\nA14 System Verification or  Validation Status\nA15  Unique Identifier\nA16 Unique Name\nA17 Originator/Author\nA18 Date Requirement Entered\nA19 Owner\nA20 Stakeholders\nA21 Change Board\nA22 Change Proposed\nA23 Version Number\nA24 Approval Date \nA25 Date of Last Change\nA26 Stability/Volatility X X\nA27 Responsible Person\nA28 Need or Requirement Verification Status\nA29 Need or Requirement Validation Status\nA30 Status of the Need or Requirement\nA31 Status (of Implementation) X\nA32 Trace to Interface Definition X X X X\nA33 Trace to Dependent Peer Requirements X X\nA34 Priority X\nA35 Criticality or Essentiality X\nA36 Risk (of Implementation) X X\nA37 Risk (Mitigation)\nA38 Key Driving Need or Requirement (KDN/KDR) X X\nA39 Additional Comments X\nA40 Type/Category X",
  "A34 Priority X\nA35 Criticality or Essentiality X\nA36 Risk (of Implementation) X X\nA37 Risk (Mitigation)\nA38 Key Driving Need or Requirement (KDN/KDR) X X\nA39 Additional Comments X\nA40 Type/Category X\nA41 Applicability\nA42 Region\nA43 Country\nA44 State/Province\nA45 Market Segment\nA46 Business Unit\nA47 Product Line\nA48 Product Line Common Needs and Requirements\nA49 Product Line Variant Needs and Requirements\nRefer to the Needs and Requirements Manual Section 15 for a detailed description of each attribute.",
  "Guide to Writing Requirements  137 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \nAppendix F:   Comment Form \n \nReviewed Document: \n \nName of submitter (first name & last name): \n \nDate Submitted: \n \nContact information (email address): \n \nType of submission (individual/group): \n \nGroup name and number of contributors  \n(if applicable) Please read examples carefully before providing your \ncomments (and delete the examples provided.) \n \nComment \nsequence \nnumber \nCommenter \nname \nSection \nnumber (for \nexample, 2.1.1, \nno alpha) \nSpecific \nreference (for \nexample, \nparagraph, \nline, Figure \nno., Table \nno.) \nIssue, comment and \nrationale \n(Rationale must make \ncomment clearly evident \nand supportable) \nProposed Changed/New Text \n \n-- MANDATORY ENTRY -- \n \n(Must be substantial to \nincrease the odds of \nacceptance) \nImportance Rating \n(R = Required, \nI = Important, \nT = Think About for \nfuture version)",
  "(Must be substantial to \nincrease the odds of \nacceptance) \nImportance Rating \n(R = Required, \nI = Important, \nT = Think About for \nfuture version) \n       \n       \n       \n        \nSubmit comments to Working Group chair.  Current WG chair will be listed at: \nhttp://www.incose.org/techcomm.html  \nIf this fails, comments may be sent to info@incose.org (the INCOSE \nmain office), which can relay to the appropriate WG, if so, requested \nin the comment cover page.",
  "Guide to Writing Requirements  138 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n \n \n \n \n \n \n \n(INTENTIONALLY BLANK)",
  "Guide to Writing Requirements  139 \n \n \nINCOSE -TP -2010-006-04| VERS/REV:4  |  1 July 2023   \n \n \n \n \n \n \n \n \n \n \n \n(BACK COVER)  \n \n \n \n \n \n \nINCOSE Publications Office \n7670 Opportunity Road, Suite 220 \nSan Diego, CA 92111-2222 USA \n \n \nCopyright © 2023 International Council on Systems Engineering"
]